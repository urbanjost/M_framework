$!==================================================================================================================================
$BLOCK COMMENT -file blocks.3m_messages.man
NAME
   blocks(1f) - [M_messages] write large block letters
   (LICENSE:PD)

SYNOPSIS
   subroutine blocks(string,iounit)

    character(len=*)  ::  string
    integer :: iounit

DESCRIPTION
   Given a string, BLOCKS() writes out the string
   left-justified starting in column 2 in large block letters 10 lines tall
   Note that 10 characters will fit between columns 2 and 131.

   This can be used to make banners in program output files; it is also handy
   for making attention-catching notices in interactive programs. The routine
   has been used to make large delivery banners on fixed-type printers and to
   make eye-readable headers on microfiche.

   If the output unit number is negative, JOURNAL() is called instead
   of writing to a unit
OPTIONS
   STRING  The string to represent in block characters
   IOUNIT  The unit number (the LUN) for the file to write to

EXAMPLE
  Sample program:

   program demo_blocks
   use M_messages, only : blocks
      call blocks('NOTICE',6)
   end program demo_blocks

  would produce:

    >nn      nn    oooooooo    tttttttttt   iiiiiiiiii    cccccccc    eeeeeeeeee
    >nnn     nn   oooooooooo   tttttttttt   iiiiiiiiii   cccccccccc   eeeeeeeeee
    >nnnn    nn   oo     ooo       tt           ii       cc       c   ee        
    >nn nn   nn   oo    o oo       tt           ii       cc           ee        
    >nn  nn  nn   oo   o  oo       tt           ii       cc           eeeee     
    >nn  nn  nn   oo  o   oo       tt           ii       cc           eeeee     
    >nn   nn nn   oo o    oo       tt           ii       cc           ee        
    >nn    nnnn   ooo     oo       tt           ii       cc       c   ee        
    >nn     nnn   oooooooooo       tt       iiiiiiiiii   cccccccccc   eeeeeeeeee
    >nn      nn    oooooooo        tt       iiiiiiiiii    cccccccc    eeeeeeeeee

AUTHOR
   John S. Urban
LICENSE
   Public License
$!==================================================================================================================================
$BLOCK NULL
Origins

    In days gone by BLOCKS(3F) was used to make large delivery banners on
    fixed-type printers and to make eye-readable headers on microfiche.
    I originally wrote it for a CDC SCOPE2 and NOS machine to make a
    banner page on printers that had a fixed font size.  I still
    find it handy for program banners and to make a message that's hard
    to ignore.

Alternatives

    If you are looking for a command instead of a procedure, the ultimate
    banner generator is probably the figlet(1) package. If you just miss
    the unix banner command you can probably use this Bourne shell
    script: <a href="../srcs/banner.sh">banner.sh</a>.
$!==================================================================================================================================
$BLOCK COMMENT
PROGRAM:     blocks(1F)
DESCRIPTION: print alphabet in big block letters using blocks(3f)
AUTHOR:      John S. Urban
VERSION:     2.0, 20160624
COPYRIGHT:   Copyright (c) 1984, 1996 John S. Urban
$!==================================================================================================================================
$BLOCK END
!===================================================================================================================================
!()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()!
!===================================================================================================================================
!subroutine blocks(str,iout,filler,char)
subroutine blocks(str,iout)
!     Things to do:
!      o  make one that writes into a character array instead of to a file
!      o  make an option to print a bitmap-like string for use by atobm(1)
!      o  if bothered to order data in ASCII collating sequence could use ichar(letter) instead of slower index(string,key)
!===================================================================================================================================
use M_journal, only : journal
implicit none
character(len=*),parameter      :: ident="@(#)M_messages::blocks(3f): write out 132-character string in large block letters"
character(len=*),intent(in)     :: str
integer,intent(in)              :: iout
!character,intent(in),optional  :: filler
!character,intent(in),optional  :: char
!character                      :: filler_local
!character                      :: char_local
character(len=12)               :: alf(10,95)
character(len=len(str)*12+1)    :: line
integer                         :: l(len(str))
integer                         :: ilet,irow,ii,kk,ip,lstr,mm
save
      data ((alf(irow,ilet),ilet=1,5),irow=1,10) /                      &
     &' AAAAAAAA ','BBBBBBBBB ',' CCCCCCCC ','DDDDDDDDD ','EEEEEEEEEE', &
     &'AAAAAAAAAA','BBBBBBBBBB','CCCCCCCCCC','DDDDDDDDDD','EEEEEEEEEE', &
     &'AA      AA','BB      BB','CC       C','DD      DD','EE        ', &
     &'AA      AA','BB      BB','CC        ','DD      DD','EE        ', &
     &'AA      AA','BBBBBBBBB ','CC        ','DD      DD','EEEEE     ', &
     &'AAAAAAAAAA','BBBBBBBBB ','CC        ','DD      DD','EEEEE     ', &
     &'AAAAAAAAAA','BB      BB','CC        ','DD      DD','EE        ', &
     &'AA      AA','BB      BB','CC       C','DD      DD','EE        ', &
     &'AA      AA','BBBBBBBBBB','CCCCCCCCCC','DDDDDDDDDD','EEEEEEEEEE', &
     &'AA      AA','BBBBBBBBB ',' CCCCCCCC ','DDDDDDDDD ','EEEEEEEEEE'/
      DATA ((ALF(IROW,ILET),ILET=6,10),IROW=1,10) /                     &
     &'FFFFFFFFFF',' GGGGGGGG ','HH      HH','IIIIIIIIII','  JJJJJJJJ', &
     &'FFFFFFFFFF','GGGGGGGGGG','HH      HH','IIIIIIIIII','  JJJJJJJJ', &
     &'FF        ','GG        ','HH      HH','    II    ','     JJ   ', &
     &'FF        ','GG        ','HH      HH','    II    ','     JJ   ', &
     &'FFFFF     ','GG   GGGGG','HHHHHHHHHH','    II    ','     JJ   ', &
     &'FFFFF     ','GG   GGGGG','HHHHHHHHHH','    II    ','     JJ   ', &
     &'FF        ','GG      GG','HH      HH','    II    ','JJ   JJ   ', &
     &'FF        ','GG      GG','HH      HH','    II    ','JJ   JJ   ', &
     &'FF        ','GGGGGGGGGG','HH      HH','IIIIIIIIII','JJJJJJJ   ', &
     &'FF        ',' GGGGGGGGG','HH      HH','IIIIIIIIII',' JJJJJ    '/
      data ((alf(irow,ilet),ilet=11,15),irow=1,10) /                    &
     &'KK      KK','LL        ','MM      MM','NN      NN',' OOOOOOOO ', &
     &'KK     KK ','LL        ','MMMM  MMMM','NNN     NN','OOOOOOOOOO', &
     &'KK   KK   ','LL        ','MM MMMM MM','NNNN    NN','OO     OOO', &
     &'KK KK     ','LL        ','MM  MM  MM','NN NN   NN','OO    O OO', &
     &'KKKKK     ','LL        ','MM  MM  MM','NN  NN  NN','OO   O  OO', &
     &'KK  KK    ','LL        ','MM      MM','NN  NN  NN','OO  O   OO', &
     &'KK   KK   ','LL        ','MM      MM','NN   NN NN','OO O    OO', &
     &'KK    KK  ','LL        ','MM      MM','NN    NNNN','OOO     OO', &
     &'KK     KK ','LLLLLLLLLL','MM      MM','NN     NNN','OOOOOOOOOO', &
     &'KK      KK','LLLLLLLLLL','MM      MM','NN      NN',' OOOOOOOO '/
      data ((alf(irow,ilet),ilet=16,20),irow=1,10) /                    &
     &'PPPPPPPPP ',' QQQQQQQQ ','RRRRRRRRR ',' SSSSSSSS ','TTTTTTTTTT', &
     &'PPPPPPPPPP','QQQQQQQQQQ','RRRRRRRRRR','SSSSSSSSSS','TTTTTTTTTT', &
     &'PP      PP','QQ      QQ','RR      RR','SS       S','    TT    ', &
     &'PP      PP','QQ      QQ','RR      RR','SS        ','    TT    ', &
     &'PPPPPPPPPP','QQ      QQ','RRRRRRRRRR','SSSSSSSSS ','    TT    ', &
     &'PPPPPPPPP ','QQ      QQ','RRRRRRRRR ',' SSSSSSSSS','    TT    ', &
     &'PP        ','QQ   QQ QQ','RR   RR   ','        SS','    TT    ', &
     &'PP        ','QQ    QQQQ','RR    RR  ','S       SS','    TT    ', &
     &'PP        ','QQQQQQQQQ ','RR     RR ','SSSSSSSSSS','    TT    ', &
     &'PP        ',' QQQQQQ QQ','RR      RR',' SSSSSSSS ','    TT    '/
      data ((alf(irow,ilet),ilet=21,25),irow=1,10) /                    &
     &'UU      UU','VV      VV','WW      WW','XX      XX','YY      YY', &
     &'UU      UU','VV      VV','WW      WW',' XX    XX ',' YY    YY ', &
     &'UU      UU',' VV    VV ','WW      WW','  XX  XX  ','  YY  YY  ', &
     &'UU      UU',' VV    VV ','WW      WW','   XXXX   ','   YYYY   ', &
     &'UU      UU',' VV    VV ','WW  WW  WW','    XX    ','    YY    ', &
     &'UU      UU',' VV    VV ','WW  WW  WW','   XXXX   ','    YY    ', &
     &'UU      UU','  VV  VV  ','WW  WW  WW','  XX  XX  ','    YY    ', &
     &'UU      UU','  VV  VV  ','WW WWWW WW',' XX    XX ','    YY    ', &
     &'UUUUUUUUUU','   VVVV   ',' WWW  WWW ','XX      XX','    YY    ', &
     &' UUUUUUUU ','    VV    ',' WW    WW ','XX      XX','    YY    '/
      data ((alf(irow,ilet),ilet=26,30),irow=1,10) /                    &
     &'ZZZZZZZZZZ','   0000   ','    11    ',' 22222222 ','3333333333', &
     &'ZZZZZZZZZ ','  000000  ','  1111    ','2222222222','333333333 ', &
     &'      ZZ  ',' 00    00 ',' 11 11    ','2       22','      33  ', &
     &'     ZZ   ','00      00','    11    ','        22','     33   ', &
     &'    ZZ    ','00      00','    11    ','       222','    333   ', &
     &'    ZZ    ','00      00','    11    ','     222  ','      333 ', &
     &'   ZZ     ','00      00','    11    ','   222    ','       33 ', &
     &'  ZZ      ',' 00    00 ','    11    ','  222     ','3       33', &
     &' ZZZZZZZZZ','  000000  ','1111111111','2222222222','3333333333', &
     &'ZZZZZZZZZZ','   0000   ','1111111111','2222222222',' 33333333 '/
      data ((alf(irow,ilet),ilet=31,35),irow=1,10) /                    &
     &'     444  ','5555555555',' 66666666 ','          ','    $$    ', &
     &'    4444  ','5555555555','6666666666','  @@@@@@  ',' $$$$$$$$ ', &
     &'   44 44  ','55        ','66       6',' @@   @@@ ','$$$$$$$$$$', &
     &'  44  44  ','55        ','66        ','       @@ ','$$  $$    ', &
     &' 44   44  ','555555555 ','666666666 ','   @@@@@@ ','$$$$$$$$$ ', &
     &'4444444444','5555555555','6666666666','  @@   @@ ',' $$$$$$$$$', &
     &'4444444444','        55','66      66',' @@    @@ ','    $$  $$', &
     &'      44  ','5       55','66      66',' @@    @@ ','$$$$$$$$$$', &
     &'      44  ','5555555555','6666666666','  @@@@@@  ',' $$$$$$$$ ', &
     &'      44  ',' 55555555 ',' 66666666 ','          ','    $$    '/
      data ((alf(irow,ilet),ilet=36,40),irow=1,10) /                    &
     &' %%%    %%','  &&&&    ','          ','       (  ','  )       ', &
     &'%% %%  %% ',' &&  &&   ','          ','     ((   ','   ))     ', &
     &'%% %% %%  ',' &&  &&   ',' *  *  *  ','    ((    ','    ))    ', &
     &' %%% %%   ','  && &&   ','  * * *   ','   ((     ','     ))   ', &
     &'    %%    ','   &&&    ','   ***    ','   ((     ','     ))   ', &
     &'   %%     ','  && &&   ','********* ','   ((     ','     ))   ', &
     &'  %%  %%% ',' &&   && &','   ***    ','   ((     ','     ))   ', &
     &' %%  %% %%','&&     &&&','  * * *   ','    ((    ','    ))    ', &
     &'%%   %% %%','&&     && ',' *  *  *  ','     ((   ','   ))     ', &
     &'%     %%% ',' &&&&&& &&','          ','       (  ','  )       '/
      data ((alf(irow,ilet),ilet=41,44),irow=1,10) /       &
     &'          ','          ','          ','          ', &
     &'          ','          ','          ','   ++++   ', &
     &'          ','          ','          ','   ++++   ', &
     &'          ','          ','==========','   ++++   ', &
     &'----------','          ','==========','++++++++++', &
     &'----------','          ','          ','++++++++++', &
     &'          ','          ','==========','   ++++   ', &
     &'          ','          ','==========','   ++++   ', &
     &'          ','__________','          ','   ++++   ', &
     &'          ','__________','          ','          '/
! By himself so can expand \ to \\ and not go past column 72; some compilers now treat \ as an escape
! character, Linux is the only one so far that does not have an option to turn that off.
      data ((alf(irow,ilet),ilet=45,45),irow=1,10) / &
     &'\         ', &
     &'\\        ', &
     &' \\       ', &
     &'  \\      ', &
     &'   \\     ', &
     &'    \\    ', &
     &'     \\   ', &
     &'      \\  ', &
     &'       \\ ', &
     &'        \ '/
      data ((alf(irow,ilet),ilet=46,50),irow=1,10) /                    &
     &'    ]]]]] ','   [[[[[  ','          ','         ','           ', &
     &'       ]] ','   [[     ',' >>       ','         ','         <<', &
     &'       ]] ','   [[     ','   >>     ','         ','       <<  ', &
     &'       ]] ','   [[     ','     >>   ','         ','     <<    ', &
     &'       ]] ','   [[     ','       >> ','         ','   <<      ', &
     &'       ]] ','   [[     ','         >>','        ',' <<        ', &
     &'       ]] ','   [[     ','       >> ','         ','   <<      ', &
     &'       ]] ','   [[     ','     >>   ','   ...   ','     <<    ', &
     &'       ]] ','   [[     ','   >>     ','  .....  ','       <<  ', &
     &'    ]]]]] ','   [[[[[  ',' >>       ','   ...   ','         <<'/
      data ((alf(irow,ilet),ilet=51,55),irow=1,10) /                    &
     &'          ','  ?????   ','         /','    !!    ','          ', &
     &'          ',' ???????  ','        //','    !!    ','    ;;;   ', &
     &'          ','??     ?? ','       // ','    !!    ','   ;;;;;  ', &
     &'          ','       ?? ','      //  ','    !!    ','    ;;;   ', &
     &'          ','      ??  ','     //   ','    !!    ','          ', &
     &'   ,,,    ','     ??   ','    //    ','    !!    ','    ;;;   ', &
     &'  ,,,,,   ','   ??     ','   //     ','    !!    ','   ;;;;;  ', &
     &'   ,,,,   ','   ??     ','  //      ','    !!    ','    ;;;;  ', &
     &'     ,    ','          ',' //       ','          ','       ;  ', &
     &'    ,     ','   ??     ',' /        ','    !!    ','      ;   '/
!    NB: takes two single quotes to make a quote
      data ((alf(irow,ilet),ilet=56,60),irow=1,10) /                    &
     &'    ''''''','  ""  ""  ','          ','          ','          ', &
     &'    ''''''','  ""  ""  ','    :::   ','  ##  ##  ','    ^^    ', &
     &'    ''''''','  ""  ""  ','   :::::  ','  ##  ##  ','   ^^^^   ', &
     &'          ','  ""  ""  ','    :::   ','##########','  ^^  ^^  ', &
     &'          ','          ','          ','  ##  ##  ',' ^^    ^^ ', &
     &'          ','          ','    :::   ','  ##  ##  ','^^      ^^', &
     &'          ','          ','   :::::  ','##########','          ', &
     &'          ','          ','    :::   ','  ##  ##  ','          ', &
     &'          ','          ','          ','  ##  ##  ','          ', &
     &'          ','          ','          ','          ','          '/
      data ((alf(irow,ilet),ilet=61,65),irow=1,10) /                    &
     &'7777777777',' 88888888 ',' 99999999 ','          ','          ', &
     &'7777777777','8888888888','9999999999','          ','          ', &
     &'       77 ','88      88','99      99','          ','          ', &
     &'      77  ','88      88','99      99','          ','          ', &
     &'     77   ',' 88888888 ','9999999999','          ','          ', &
     &'    77    ',' 88888888 ',' 999999999','          ','   aaaa   ', &
     &'   77     ','88      88','        99','          ','      aa  ', &
     &'  77      ','88      88','        99','          ','  aaaaaa  ', &
     &' 77       ','8888888888','9999999999','          ',' aa   aa  ', &
     &'77        ',' 88888888 ',' 99999999 ','          ','  aaaaa a '/
      data ((alf(irow,ilet),ilet=66,70),irow=1,10) /                    &
     &' bb       ','          ','       dd ','          ','     ff   ', &
     &' bb       ','          ','       dd ','          ','    ff ff ', &
     &' bb       ','          ','       dd ','          ','    ff    ', &
     &' bb       ','          ','       dd ','          ','  fffff   ', &
     &' bb       ','          ','       dd ','          ','    ff    ', &
     &' bbbbbbb  ','  cccccc  ','  ddddddd ','  eeeeee  ','    ff    ', &
     &' bb    bb ',' cc       ',' d     dd ',' ee     e ','    ff    ', &
     &' bb    bb ',' cc       ',' d     dd ',' eeeeeee  ','    ff    ', &
     &' bb    bb ',' cc       ',' d     dd ',' ee       ','    ff    ', &
     &' bbbbbbb  ','  cccccc  ','  ddddddd ','  eeeeee  ','    ff    '/
      data ((alf(irow,ilet),ilet=71,75),irow=1,10) /                    &
     &'          ',' hh       ','          ','          ','          ', &
     &'          ',' hh       ','          ','          ',' kk       ', &
     &'          ',' hh       ','          ','       jj ',' kk       ', &
     &'  ggggg   ',' hh       ','    ii    ','          ',' kk       ', &
     &' g     gg ',' hh       ','          ','       jj ',' kk   kk  ', &
     &' g     gg ',' hhhhhhh  ','    ii    ','       jj ',' kk  kk   ', &
     &'  ggggggg ',' hh    hh ','    ii    ','       jj ',' kkkk     ', &
     &'       gg ',' hh    hh ','    ii    ','       jj ',' kk  kk   ', &
     &'       gg ',' hh    hh ','    ii    ',' jj    jj ',' kk   kk  ', &
     &'   ggggg  ',' hh    hh ','    ii    ','   jjjjj  ',' kk    kk '/
      data ((alf(irow,ilet),ilet=76,80),irow=1,10) /                    &
     &'   lll    ','          ','          ','          ','          ', &
     &'    ll    ','          ','          ','          ','          ', &
     &'    ll    ','          ','          ','          ','          ', &
     &'    ll    ','          ','          ','          ','   ppppp  ', &
     &'    ll    ','          ','          ','          ',' pp     p ', &
     &'    ll    ',' mmmm mmm ',' n nnnnn  ','  oooooo  ',' pp     p ', &
     &'    ll    ',' mm  m  mm',' nn    nn ',' oo    oo ',' ppppppp  ', &
     &'    ll    ',' mm  m  mm',' nn    nn ',' oo    oo ',' pp       ', &
     &'    ll    ',' mm  m  mm',' nn    nn ',' oo    oo ',' pp       ', &
     &'    ll    ',' mm  m  mm',' nn    nn ','  oooooo  ',' pp       '/
      data ((alf(irow,ilet),ilet=81,85),irow=1,10) /                    &
     &'          ','          ','          ','          ','          ', &
     &'          ','          ','          ','          ','          ', &
     &'          ','          ','          ','   tt     ','          ', &
     &'  qqqqq   ','          ','          ','   tt     ','          ', &
     &' qq    qq ','          ','          ',' ttttttt  ','          ', &
     &' qq    qq ',' r rrrrrr ','  ssssss  ','   tt     ',' uu    uu ', &
     &'  qqqqqqq ',' rrr      ',' ss       ','   tt     ',' uu    uu ', &
     &'       qq ',' rr       ','  ssssss  ','   tt     ',' uu    uu ', &
     &'       qq ',' rr       ','       ss ','   tt     ',' uu    uu ', &
     &'       qq ',' rr       ','  ssssss  ','     ttt  ','  uuuuuu u'/
      data ((alf(irow,ilet),ilet=86,90),irow=1,10) /                    &
     &'          ','          ','          ','          ','          ', &
     &'          ','          ','          ','          ','          ', &
     &'          ','          ','          ','          ','          ', &
     &'          ','          ','          ',' yy    yy ','          ', &
     &'          ','          ','          ','  yy  yy  ','          ', &
     &' vv     vv',' ww     ww',' xx   xx  ','   yyyy   ','  zzzzzz  ', &
     &'  vv   vv ',' ww  w  ww','  xx xx   ','    yy    ','     zz   ', &
     &'   vv vv  ',' ww  w  ww','    x     ','   yy     ','    zz    ', &
     &'    v v   ',' ww  w  ww','  xx xx   ','  yy      ','   zz     ', &
     &'     v    ','  www www ',' xx   xx  ',' yy       ','  zzzzzz  '/
      data ((alf(irow,ilet),ilet=91,95),irow=1,10) /                    &
     &'   |||    ','   {{{{   ','   }}}}   ','  ~       ','```       ', &
     &'   |||    ','  {{      ','      }}  ','  ~      ~',' ```      ', &
     &'   |||    ',' {{       ','       }} ','~ ~ ~   ~ ','  ```     ', &
     &'   |||    ','  {{      ','      }}  ',' ~ ~ ~ ~ ~','   ```    ', &
     &'   |||    ','{{{       ','       }}}','~   ~ ~ ~ ','          ', &
     &'   |||    ','{{{       ','       }}}','     ~ ~  ','          ', &
     &'   |||    ','  {{      ','      }}  ','          ','          ', &
     &'   |||    ',' {{       ','       }} ','          ','          ', &
     &'   |||    ','  {{      ','      }}  ','          ','          ', &
     &'   |||    ','   {{{{   ','   }}}}   ','          ','          '/
!-----------------------------------------------------------------------------------------------------------------------------------
   lstr=len_trim(str)              ! have space to print lstr characters
   do ii = 1, lstr                 ! find column number for this letter
      ip=index('ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456@$%&*()-_=+\][>.<,?/!;''":#^789 abcdefghijklmnopqrstuvwxyz|{}~`',str(ii:ii))
      if (ip .eq. 0) then      ! if not found, letter is not supported
         ! (note that could just check  31 < ichar(str(ii:ii) < 127 now that all printable ASCII characters are defined )
         l(ii) = 64
         ! actually printing a non-printable character is risky so print ASCII Decimal Equivalent
         call journal('sc','*banner* BAD CHARACTER, ADE=',ichar(STR(ii:ii)))
      else
         l(ii) = ip
      endif
   enddo
!-----------------------------------------------------------------------------------------------------------------------------------
   do kk = 1, 10
      if(iout.ge.0)then
         write (*,'(1x,*(a12):)') (alf(kk,l(mm)), mm = 1, lstr)
      else
         write (LINE, '(1x,*(a12):)') (alf(kk,l(mm)), mm = 1, lstr)
         call journal(LINE)
      endif
   enddo
!===================================================================================================================================
end subroutine blocks
!===================================================================================================================================
!()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()!
!===================================================================================================================================
