>>>> MODULE IS                       M_units
>>>> DOCUMENT DIRECTORY IS           /home/urbanjs/venus/V600/github/M_framework/candidates/M_units/src/source
>>>> MANPAGES PROCEDURE DIRECTORY IS /home/urbanjs/venus/V600/github/M_framework/candidates/M_units/man
>>>> MAN_EXTENSION IS                m_units
+ grep -q '^#' M_units.FF
+ SUFFIX=F90
+ '[' TRUE = '' ']'
+ prep F90 GITHUB --noenv --comment doxygen --verbose -i M_units.FF -o ../M_units.F90
+ verbose mode on
+ -->> M_units:: nan128(3fp): Returns a NAN (Not a number) of type real128
+ grep -qi '^$IFDEF  *C *$' M_units.FF
+ '[' TRUE = '' ']'
+ prep GITHUB C --noenv --comment doxygen --verbose -i M_units.FF -o ../C-M_units.c
+ verbose mode on
+ -->>d2r(3c): Convert degrees to radians"
+ -->>r2d(3c): Convert radians to degrees"
+ cd doc
+ set -xv
+ cat
>>>> .man files to MAN DIRECTORY as ROFF and HTML
>>>> MANOUT        => /home/urbanjs/venus/V600/github/M_framework/candidates/M_units/man
>>>> MAN_EXTENSION => 
>>>> DOCS          => /home/urbanjs/venus/V600/github/M_framework/candidates/M_units/docs
+ for NUM in 1 2 3 4 5 6 7 8
+ mkdir -p /home/urbanjs/venus/V600/github/M_framework/candidates/M_units/man/man1
++ sort
++ uniq
++ ls '*.1.man' '*.1m_units.man'
+ for NUM in 1 2 3 4 5 6 7 8
+ mkdir -p /home/urbanjs/venus/V600/github/M_framework/candidates/M_units/man/man2
++ uniq
++ sort
++ ls '*.2.man' '*.2m_units.man'
+ for NUM in 1 2 3 4 5 6 7 8
+ mkdir -p /home/urbanjs/venus/V600/github/M_framework/candidates/M_units/man/man3
++ sort
++ uniq
++ ls '*.3.man' acosd.3m_units.man asind.3m_units.man atan2d.3m_units.man atand.3m_units.man atomnum2symbol.3m_units.man c2f.3m_units.man cartesian_to_polar.3m_units.man cartesian_to_spherical.3m_units.man cosd.3m_units.man d2r.3m_units.man f2c.3m_units.man feet_to_meters.3m_units.man inf.3m_units.man is_even.3m_units.man is_nan.3m_units.man meters_to_feet.3m_units.man M_units.3m_units.man nan.3m_units.man norm_angle_deg.3m_units.man norm_angle_rad.3m_units.man polar_to_cartesian.3m_units.man pounds_to_kilograms.3m_units.man r2d.3m_units.man sind.3m_units.man spherical_to_cartesian.3m_units.man symbol2atomnum.3m_units.man tand.3m_units.man
+ for NAME in $(ls *.$NUM.man *.${NUM}${MAN_EXTENSION}.man 2>/dev/null|sort|uniq)
+ echo '>>>> processing manpage and HTML for acosd.3m_units.man'
>>>> processing manpage and HTML for acosd.3m_units.man
++ basename acosd.3m_units.man .man
+ SHORTNAME_MAN=/home/urbanjs/venus/V600/github/M_framework/candidates/M_units/man/man3/acosd.3m_units
++ basename acosd.3m_units.man .3m_units.man
+ SHORTNAME=acosd
+ : SHORTNAME_MAN /home/urbanjs/venus/V600/github/M_framework/candidates/M_units/man/man3/acosd.3m_units SHORTNAME acosd
+ tee /home/urbanjs/venus/V600/github/M_framework/candidates/M_units/man/man3/acosd.3m_units
+ txt2man -s 3m_units -t acosd acosd.3m_units.man
+ env AUX_FILENAME=acosd man2html
/home/urbanjs/venus/V600/github/index/github_scripts/bash/txt2man
man2html 815b65f8-9078-4c44-a386-faf6e93b677a
+ replace index.html https://github.com/urbanjost/M_units -- /home/urbanjs/venus/V600/github/M_framework/candidates/M_units/docs/acosd.3m_units.html
CHANGING FILE /home/urbanjs/venus/V600/github/M_framework/candidates/M_units/docs/acosd.3m_units.html  [index.html][https://github.com/urbanjost/M_units]
BEFORE: /home/urbanjs/venus/V600/github/M_framework/candidates/M_units/docs/acosd.3m_units.html:45:<h5><a href="index.html">[UP]</a></h5>
AFTER:  /home/urbanjs/venus/V600/github/M_framework/candidates/M_units/docs/acosd.3m_units.html:45:<h5><a href="https://github.com/urbanjost/M_units">[UP]</a></h5>
+ gzip -f /home/urbanjs/venus/V600/github/M_framework/candidates/M_units/man/man3/acosd.3m_units
+ for NAME in $(ls *.$NUM.man *.${NUM}${MAN_EXTENSION}.man 2>/dev/null|sort|uniq)
+ echo '>>>> processing manpage and HTML for asind.3m_units.man'
>>>> processing manpage and HTML for asind.3m_units.man
++ basename asind.3m_units.man .man
+ SHORTNAME_MAN=/home/urbanjs/venus/V600/github/M_framework/candidates/M_units/man/man3/asind.3m_units
++ basename asind.3m_units.man .3m_units.man
+ SHORTNAME=asind
+ : SHORTNAME_MAN /home/urbanjs/venus/V600/github/M_framework/candidates/M_units/man/man3/asind.3m_units SHORTNAME asind
+ txt2man -s 3m_units -t asind asind.3m_units.man
+ tee /home/urbanjs/venus/V600/github/M_framework/candidates/M_units/man/man3/asind.3m_units
+ env AUX_FILENAME=asind man2html
/home/urbanjs/venus/V600/github/index/github_scripts/bash/txt2man
man2html cace20ad-73ce-4547-8a36-2ea2cdbc1165
+ replace index.html https://github.com/urbanjost/M_units -- /home/urbanjs/venus/V600/github/M_framework/candidates/M_units/docs/asind.3m_units.html
CHANGING FILE /home/urbanjs/venus/V600/github/M_framework/candidates/M_units/docs/asind.3m_units.html  [index.html][https://github.com/urbanjost/M_units]
BEFORE: /home/urbanjs/venus/V600/github/M_framework/candidates/M_units/docs/asind.3m_units.html:45:<h5><a href="index.html">[UP]</a></h5>
AFTER:  /home/urbanjs/venus/V600/github/M_framework/candidates/M_units/docs/asind.3m_units.html:45:<h5><a href="https://github.com/urbanjost/M_units">[UP]</a></h5>
+ gzip -f /home/urbanjs/venus/V600/github/M_framework/candidates/M_units/man/man3/asind.3m_units
+ for NAME in $(ls *.$NUM.man *.${NUM}${MAN_EXTENSION}.man 2>/dev/null|sort|uniq)
+ echo '>>>> processing manpage and HTML for atan2d.3m_units.man'
>>>> processing manpage and HTML for atan2d.3m_units.man
++ basename atan2d.3m_units.man .man
+ SHORTNAME_MAN=/home/urbanjs/venus/V600/github/M_framework/candidates/M_units/man/man3/atan2d.3m_units
++ basename atan2d.3m_units.man .3m_units.man
+ SHORTNAME=atan2d
+ : SHORTNAME_MAN /home/urbanjs/venus/V600/github/M_framework/candidates/M_units/man/man3/atan2d.3m_units SHORTNAME atan2d
+ txt2man -s 3m_units -t atan2d atan2d.3m_units.man
+ tee /home/urbanjs/venus/V600/github/M_framework/candidates/M_units/man/man3/atan2d.3m_units
+ env AUX_FILENAME=atan2d man2html
/home/urbanjs/venus/V600/github/index/github_scripts/bash/txt2man
man2html b62d33aa-6393-4fa4-aa92-9d9bdf42ba7a
+ replace index.html https://github.com/urbanjost/M_units -- /home/urbanjs/venus/V600/github/M_framework/candidates/M_units/docs/atan2d.3m_units.html
CHANGING FILE /home/urbanjs/venus/V600/github/M_framework/candidates/M_units/docs/atan2d.3m_units.html  [index.html][https://github.com/urbanjost/M_units]
BEFORE: /home/urbanjs/venus/V600/github/M_framework/candidates/M_units/docs/atan2d.3m_units.html:45:<h5><a href="index.html">[UP]</a></h5>
AFTER:  /home/urbanjs/venus/V600/github/M_framework/candidates/M_units/docs/atan2d.3m_units.html:45:<h5><a href="https://github.com/urbanjost/M_units">[UP]</a></h5>
+ gzip -f /home/urbanjs/venus/V600/github/M_framework/candidates/M_units/man/man3/atan2d.3m_units
+ for NAME in $(ls *.$NUM.man *.${NUM}${MAN_EXTENSION}.man 2>/dev/null|sort|uniq)
+ echo '>>>> processing manpage and HTML for atand.3m_units.man'
>>>> processing manpage and HTML for atand.3m_units.man
++ basename atand.3m_units.man .man
+ SHORTNAME_MAN=/home/urbanjs/venus/V600/github/M_framework/candidates/M_units/man/man3/atand.3m_units
++ basename atand.3m_units.man .3m_units.man
+ SHORTNAME=atand
+ : SHORTNAME_MAN /home/urbanjs/venus/V600/github/M_framework/candidates/M_units/man/man3/atand.3m_units SHORTNAME atand
+ tee /home/urbanjs/venus/V600/github/M_framework/candidates/M_units/man/man3/atand.3m_units
+ txt2man -s 3m_units -t atand atand.3m_units.man
+ env AUX_FILENAME=atand man2html
/home/urbanjs/venus/V600/github/index/github_scripts/bash/txt2man
man2html 3b330304-5dc5-4351-8037-f3d7e92d0094
+ replace index.html https://github.com/urbanjost/M_units -- /home/urbanjs/venus/V600/github/M_framework/candidates/M_units/docs/atand.3m_units.html
CHANGING FILE /home/urbanjs/venus/V600/github/M_framework/candidates/M_units/docs/atand.3m_units.html  [index.html][https://github.com/urbanjost/M_units]
BEFORE: /home/urbanjs/venus/V600/github/M_framework/candidates/M_units/docs/atand.3m_units.html:45:<h5><a href="index.html">[UP]</a></h5>
AFTER:  /home/urbanjs/venus/V600/github/M_framework/candidates/M_units/docs/atand.3m_units.html:45:<h5><a href="https://github.com/urbanjost/M_units">[UP]</a></h5>
+ gzip -f /home/urbanjs/venus/V600/github/M_framework/candidates/M_units/man/man3/atand.3m_units
+ for NAME in $(ls *.$NUM.man *.${NUM}${MAN_EXTENSION}.man 2>/dev/null|sort|uniq)
+ echo '>>>> processing manpage and HTML for atomnum2symbol.3m_units.man'
>>>> processing manpage and HTML for atomnum2symbol.3m_units.man
++ basename atomnum2symbol.3m_units.man .man
+ SHORTNAME_MAN=/home/urbanjs/venus/V600/github/M_framework/candidates/M_units/man/man3/atomnum2symbol.3m_units
++ basename atomnum2symbol.3m_units.man .3m_units.man
+ SHORTNAME=atomnum2symbol
+ : SHORTNAME_MAN /home/urbanjs/venus/V600/github/M_framework/candidates/M_units/man/man3/atomnum2symbol.3m_units SHORTNAME atomnum2symbol
+ txt2man -s 3m_units -t atomnum2symbol atomnum2symbol.3m_units.man
/home/urbanjs/venus/V600/github/index/github_scripts/bash/txt2man
+ tee /home/urbanjs/venus/V600/github/M_framework/candidates/M_units/man/man3/atomnum2symbol.3m_units
+ env AUX_FILENAME=atomnum2symbol man2html
man2html 815dd515-09de-4808-92ac-9c5ade4f5cb6
+ replace index.html https://github.com/urbanjost/M_units -- /home/urbanjs/venus/V600/github/M_framework/candidates/M_units/docs/atomnum2symbol.3m_units.html
CHANGING FILE /home/urbanjs/venus/V600/github/M_framework/candidates/M_units/docs/atomnum2symbol.3m_units.html  [index.html][https://github.com/urbanjost/M_units]
BEFORE: /home/urbanjs/venus/V600/github/M_framework/candidates/M_units/docs/atomnum2symbol.3m_units.html:45:<h5><a href="index.html">[UP]</a></h5>
AFTER:  /home/urbanjs/venus/V600/github/M_framework/candidates/M_units/docs/atomnum2symbol.3m_units.html:45:<h5><a href="https://github.com/urbanjost/M_units">[UP]</a></h5>
+ gzip -f /home/urbanjs/venus/V600/github/M_framework/candidates/M_units/man/man3/atomnum2symbol.3m_units
+ for NAME in $(ls *.$NUM.man *.${NUM}${MAN_EXTENSION}.man 2>/dev/null|sort|uniq)
+ echo '>>>> processing manpage and HTML for c2f.3m_units.man'
>>>> processing manpage and HTML for c2f.3m_units.man
++ basename c2f.3m_units.man .man
+ SHORTNAME_MAN=/home/urbanjs/venus/V600/github/M_framework/candidates/M_units/man/man3/c2f.3m_units
++ basename c2f.3m_units.man .3m_units.man
+ SHORTNAME=c2f
+ : SHORTNAME_MAN /home/urbanjs/venus/V600/github/M_framework/candidates/M_units/man/man3/c2f.3m_units SHORTNAME c2f
+ tee /home/urbanjs/venus/V600/github/M_framework/candidates/M_units/man/man3/c2f.3m_units
+ env AUX_FILENAME=c2f man2html
+ txt2man -s 3m_units -t c2f c2f.3m_units.man
/home/urbanjs/venus/V600/github/index/github_scripts/bash/txt2man
man2html fa555beb-a9ba-4bb0-a49c-18b09f4baee8
+ replace index.html https://github.com/urbanjost/M_units -- /home/urbanjs/venus/V600/github/M_framework/candidates/M_units/docs/c2f.3m_units.html
CHANGING FILE /home/urbanjs/venus/V600/github/M_framework/candidates/M_units/docs/c2f.3m_units.html  [index.html][https://github.com/urbanjost/M_units]
BEFORE: /home/urbanjs/venus/V600/github/M_framework/candidates/M_units/docs/c2f.3m_units.html:45:<h5><a href="index.html">[UP]</a></h5>
AFTER:  /home/urbanjs/venus/V600/github/M_framework/candidates/M_units/docs/c2f.3m_units.html:45:<h5><a href="https://github.com/urbanjost/M_units">[UP]</a></h5>
+ gzip -f /home/urbanjs/venus/V600/github/M_framework/candidates/M_units/man/man3/c2f.3m_units
+ for NAME in $(ls *.$NUM.man *.${NUM}${MAN_EXTENSION}.man 2>/dev/null|sort|uniq)
+ echo '>>>> processing manpage and HTML for cartesian_to_polar.3m_units.man'
>>>> processing manpage and HTML for cartesian_to_polar.3m_units.man
++ basename cartesian_to_polar.3m_units.man .man
+ SHORTNAME_MAN=/home/urbanjs/venus/V600/github/M_framework/candidates/M_units/man/man3/cartesian_to_polar.3m_units
++ basename cartesian_to_polar.3m_units.man .3m_units.man
+ SHORTNAME=cartesian_to_polar
+ : SHORTNAME_MAN /home/urbanjs/venus/V600/github/M_framework/candidates/M_units/man/man3/cartesian_to_polar.3m_units SHORTNAME cartesian_to_polar
+ tee /home/urbanjs/venus/V600/github/M_framework/candidates/M_units/man/man3/cartesian_to_polar.3m_units
+ txt2man -s 3m_units -t cartesian_to_polar cartesian_to_polar.3m_units.man
+ env AUX_FILENAME=cartesian_to_polar man2html
/home/urbanjs/venus/V600/github/index/github_scripts/bash/txt2man
man2html b2cf7487-19cf-45ac-9b46-ebb0f7ce8694
+ replace index.html https://github.com/urbanjost/M_units -- /home/urbanjs/venus/V600/github/M_framework/candidates/M_units/docs/cartesian_to_polar.3m_units.html
CHANGING FILE /home/urbanjs/venus/V600/github/M_framework/candidates/M_units/docs/cartesian_to_polar.3m_units.html  [index.html][https://github.com/urbanjost/M_units]
BEFORE: /home/urbanjs/venus/V600/github/M_framework/candidates/M_units/docs/cartesian_to_polar.3m_units.html:45:<h5><a href="index.html">[UP]</a></h5>
AFTER:  /home/urbanjs/venus/V600/github/M_framework/candidates/M_units/docs/cartesian_to_polar.3m_units.html:45:<h5><a href="https://github.com/urbanjost/M_units">[UP]</a></h5>
+ gzip -f /home/urbanjs/venus/V600/github/M_framework/candidates/M_units/man/man3/cartesian_to_polar.3m_units
+ for NAME in $(ls *.$NUM.man *.${NUM}${MAN_EXTENSION}.man 2>/dev/null|sort|uniq)
+ echo '>>>> processing manpage and HTML for cartesian_to_spherical.3m_units.man'
>>>> processing manpage and HTML for cartesian_to_spherical.3m_units.man
++ basename cartesian_to_spherical.3m_units.man .man
+ SHORTNAME_MAN=/home/urbanjs/venus/V600/github/M_framework/candidates/M_units/man/man3/cartesian_to_spherical.3m_units
++ basename cartesian_to_spherical.3m_units.man .3m_units.man
+ SHORTNAME=cartesian_to_spherical
+ : SHORTNAME_MAN /home/urbanjs/venus/V600/github/M_framework/candidates/M_units/man/man3/cartesian_to_spherical.3m_units SHORTNAME cartesian_to_spherical
+ txt2man -s 3m_units -t cartesian_to_spherical cartesian_to_spherical.3m_units.man
+ tee /home/urbanjs/venus/V600/github/M_framework/candidates/M_units/man/man3/cartesian_to_spherical.3m_units
+ env AUX_FILENAME=cartesian_to_spherical man2html
/home/urbanjs/venus/V600/github/index/github_scripts/bash/txt2man
man2html 5127c465-ffb2-4e93-a347-d8cfa67d80ff
+ replace index.html https://github.com/urbanjost/M_units -- /home/urbanjs/venus/V600/github/M_framework/candidates/M_units/docs/cartesian_to_spherical.3m_units.html
CHANGING FILE /home/urbanjs/venus/V600/github/M_framework/candidates/M_units/docs/cartesian_to_spherical.3m_units.html  [index.html][https://github.com/urbanjost/M_units]
BEFORE: /home/urbanjs/venus/V600/github/M_framework/candidates/M_units/docs/cartesian_to_spherical.3m_units.html:45:<h5><a href="index.html">[UP]</a></h5>
AFTER:  /home/urbanjs/venus/V600/github/M_framework/candidates/M_units/docs/cartesian_to_spherical.3m_units.html:45:<h5><a href="https://github.com/urbanjost/M_units">[UP]</a></h5>
+ gzip -f /home/urbanjs/venus/V600/github/M_framework/candidates/M_units/man/man3/cartesian_to_spherical.3m_units
+ for NAME in $(ls *.$NUM.man *.${NUM}${MAN_EXTENSION}.man 2>/dev/null|sort|uniq)
+ echo '>>>> processing manpage and HTML for cosd.3m_units.man'
>>>> processing manpage and HTML for cosd.3m_units.man
++ basename cosd.3m_units.man .man
+ SHORTNAME_MAN=/home/urbanjs/venus/V600/github/M_framework/candidates/M_units/man/man3/cosd.3m_units
++ basename cosd.3m_units.man .3m_units.man
+ SHORTNAME=cosd
+ : SHORTNAME_MAN /home/urbanjs/venus/V600/github/M_framework/candidates/M_units/man/man3/cosd.3m_units SHORTNAME cosd
+ tee /home/urbanjs/venus/V600/github/M_framework/candidates/M_units/man/man3/cosd.3m_units
+ txt2man -s 3m_units -t cosd cosd.3m_units.man
+ env AUX_FILENAME=cosd man2html
/home/urbanjs/venus/V600/github/index/github_scripts/bash/txt2man
man2html 298311d0-a74e-4101-8928-62e0c164545a
+ replace index.html https://github.com/urbanjost/M_units -- /home/urbanjs/venus/V600/github/M_framework/candidates/M_units/docs/cosd.3m_units.html
CHANGING FILE /home/urbanjs/venus/V600/github/M_framework/candidates/M_units/docs/cosd.3m_units.html  [index.html][https://github.com/urbanjost/M_units]
BEFORE: /home/urbanjs/venus/V600/github/M_framework/candidates/M_units/docs/cosd.3m_units.html:45:<h5><a href="index.html">[UP]</a></h5>
AFTER:  /home/urbanjs/venus/V600/github/M_framework/candidates/M_units/docs/cosd.3m_units.html:45:<h5><a href="https://github.com/urbanjost/M_units">[UP]</a></h5>
+ gzip -f /home/urbanjs/venus/V600/github/M_framework/candidates/M_units/man/man3/cosd.3m_units
+ for NAME in $(ls *.$NUM.man *.${NUM}${MAN_EXTENSION}.man 2>/dev/null|sort|uniq)
+ echo '>>>> processing manpage and HTML for d2r.3m_units.man'
>>>> processing manpage and HTML for d2r.3m_units.man
++ basename d2r.3m_units.man .man
+ SHORTNAME_MAN=/home/urbanjs/venus/V600/github/M_framework/candidates/M_units/man/man3/d2r.3m_units
++ basename d2r.3m_units.man .3m_units.man
+ SHORTNAME=d2r
+ : SHORTNAME_MAN /home/urbanjs/venus/V600/github/M_framework/candidates/M_units/man/man3/d2r.3m_units SHORTNAME d2r
+ txt2man -s 3m_units -t d2r d2r.3m_units.man
+ env AUX_FILENAME=d2r man2html
+ tee /home/urbanjs/venus/V600/github/M_framework/candidates/M_units/man/man3/d2r.3m_units
/home/urbanjs/venus/V600/github/index/github_scripts/bash/txt2man
man2html 216cd239-dbd3-4e31-b857-9dcf74649a34
+ replace index.html https://github.com/urbanjost/M_units -- /home/urbanjs/venus/V600/github/M_framework/candidates/M_units/docs/d2r.3m_units.html
CHANGING FILE /home/urbanjs/venus/V600/github/M_framework/candidates/M_units/docs/d2r.3m_units.html  [index.html][https://github.com/urbanjost/M_units]
BEFORE: /home/urbanjs/venus/V600/github/M_framework/candidates/M_units/docs/d2r.3m_units.html:45:<h5><a href="index.html">[UP]</a></h5>
AFTER:  /home/urbanjs/venus/V600/github/M_framework/candidates/M_units/docs/d2r.3m_units.html:45:<h5><a href="https://github.com/urbanjost/M_units">[UP]</a></h5>
+ gzip -f /home/urbanjs/venus/V600/github/M_framework/candidates/M_units/man/man3/d2r.3m_units
+ for NAME in $(ls *.$NUM.man *.${NUM}${MAN_EXTENSION}.man 2>/dev/null|sort|uniq)
+ echo '>>>> processing manpage and HTML for f2c.3m_units.man'
>>>> processing manpage and HTML for f2c.3m_units.man
++ basename f2c.3m_units.man .man
+ SHORTNAME_MAN=/home/urbanjs/venus/V600/github/M_framework/candidates/M_units/man/man3/f2c.3m_units
++ basename f2c.3m_units.man .3m_units.man
+ SHORTNAME=f2c
+ : SHORTNAME_MAN /home/urbanjs/venus/V600/github/M_framework/candidates/M_units/man/man3/f2c.3m_units SHORTNAME f2c
+ txt2man -s 3m_units -t f2c f2c.3m_units.man
+ tee /home/urbanjs/venus/V600/github/M_framework/candidates/M_units/man/man3/f2c.3m_units
+ env AUX_FILENAME=f2c man2html
/home/urbanjs/venus/V600/github/index/github_scripts/bash/txt2man
man2html b88dbb44-00f4-48b4-aa16-aa487f96bc33
+ replace index.html https://github.com/urbanjost/M_units -- /home/urbanjs/venus/V600/github/M_framework/candidates/M_units/docs/f2c.3m_units.html
CHANGING FILE /home/urbanjs/venus/V600/github/M_framework/candidates/M_units/docs/f2c.3m_units.html  [index.html][https://github.com/urbanjost/M_units]
BEFORE: /home/urbanjs/venus/V600/github/M_framework/candidates/M_units/docs/f2c.3m_units.html:45:<h5><a href="index.html">[UP]</a></h5>
AFTER:  /home/urbanjs/venus/V600/github/M_framework/candidates/M_units/docs/f2c.3m_units.html:45:<h5><a href="https://github.com/urbanjost/M_units">[UP]</a></h5>
+ gzip -f /home/urbanjs/venus/V600/github/M_framework/candidates/M_units/man/man3/f2c.3m_units
+ for NAME in $(ls *.$NUM.man *.${NUM}${MAN_EXTENSION}.man 2>/dev/null|sort|uniq)
+ echo '>>>> processing manpage and HTML for feet_to_meters.3m_units.man'
>>>> processing manpage and HTML for feet_to_meters.3m_units.man
++ basename feet_to_meters.3m_units.man .man
+ SHORTNAME_MAN=/home/urbanjs/venus/V600/github/M_framework/candidates/M_units/man/man3/feet_to_meters.3m_units
++ basename feet_to_meters.3m_units.man .3m_units.man
+ SHORTNAME=feet_to_meters
+ : SHORTNAME_MAN /home/urbanjs/venus/V600/github/M_framework/candidates/M_units/man/man3/feet_to_meters.3m_units SHORTNAME feet_to_meters
+ tee /home/urbanjs/venus/V600/github/M_framework/candidates/M_units/man/man3/feet_to_meters.3m_units
+ txt2man -s 3m_units -t feet_to_meters feet_to_meters.3m_units.man
+ env AUX_FILENAME=feet_to_meters man2html
/home/urbanjs/venus/V600/github/index/github_scripts/bash/txt2man
man2html 996ad02c-712c-413d-8df4-93562045c29b
+ replace index.html https://github.com/urbanjost/M_units -- /home/urbanjs/venus/V600/github/M_framework/candidates/M_units/docs/feet_to_meters.3m_units.html
CHANGING FILE /home/urbanjs/venus/V600/github/M_framework/candidates/M_units/docs/feet_to_meters.3m_units.html  [index.html][https://github.com/urbanjost/M_units]
BEFORE: /home/urbanjs/venus/V600/github/M_framework/candidates/M_units/docs/feet_to_meters.3m_units.html:45:<h5><a href="index.html">[UP]</a></h5>
AFTER:  /home/urbanjs/venus/V600/github/M_framework/candidates/M_units/docs/feet_to_meters.3m_units.html:45:<h5><a href="https://github.com/urbanjost/M_units">[UP]</a></h5>
+ gzip -f /home/urbanjs/venus/V600/github/M_framework/candidates/M_units/man/man3/feet_to_meters.3m_units
+ for NAME in $(ls *.$NUM.man *.${NUM}${MAN_EXTENSION}.man 2>/dev/null|sort|uniq)
+ echo '>>>> processing manpage and HTML for inf.3m_units.man'
>>>> processing manpage and HTML for inf.3m_units.man
++ basename inf.3m_units.man .man
+ SHORTNAME_MAN=/home/urbanjs/venus/V600/github/M_framework/candidates/M_units/man/man3/inf.3m_units
++ basename inf.3m_units.man .3m_units.man
+ SHORTNAME=inf
+ : SHORTNAME_MAN /home/urbanjs/venus/V600/github/M_framework/candidates/M_units/man/man3/inf.3m_units SHORTNAME inf
+ txt2man -s 3m_units -t inf inf.3m_units.man
+ env AUX_FILENAME=inf man2html
+ tee /home/urbanjs/venus/V600/github/M_framework/candidates/M_units/man/man3/inf.3m_units
/home/urbanjs/venus/V600/github/index/github_scripts/bash/txt2man
man2html 599dd9c5-ca61-4ad7-a75a-a41c6b36f840
+ replace index.html https://github.com/urbanjost/M_units -- /home/urbanjs/venus/V600/github/M_framework/candidates/M_units/docs/inf.3m_units.html
CHANGING FILE /home/urbanjs/venus/V600/github/M_framework/candidates/M_units/docs/inf.3m_units.html  [index.html][https://github.com/urbanjost/M_units]
BEFORE: /home/urbanjs/venus/V600/github/M_framework/candidates/M_units/docs/inf.3m_units.html:45:<h5><a href="index.html">[UP]</a></h5>
AFTER:  /home/urbanjs/venus/V600/github/M_framework/candidates/M_units/docs/inf.3m_units.html:45:<h5><a href="https://github.com/urbanjost/M_units">[UP]</a></h5>
+ gzip -f /home/urbanjs/venus/V600/github/M_framework/candidates/M_units/man/man3/inf.3m_units
+ for NAME in $(ls *.$NUM.man *.${NUM}${MAN_EXTENSION}.man 2>/dev/null|sort|uniq)
+ echo '>>>> processing manpage and HTML for is_even.3m_units.man'
>>>> processing manpage and HTML for is_even.3m_units.man
++ basename is_even.3m_units.man .man
+ SHORTNAME_MAN=/home/urbanjs/venus/V600/github/M_framework/candidates/M_units/man/man3/is_even.3m_units
++ basename is_even.3m_units.man .3m_units.man
+ SHORTNAME=is_even
+ : SHORTNAME_MAN /home/urbanjs/venus/V600/github/M_framework/candidates/M_units/man/man3/is_even.3m_units SHORTNAME is_even
+ tee /home/urbanjs/venus/V600/github/M_framework/candidates/M_units/man/man3/is_even.3m_units
+ txt2man -s 3m_units -t is_even is_even.3m_units.man
+ env AUX_FILENAME=is_even man2html
/home/urbanjs/venus/V600/github/index/github_scripts/bash/txt2man
man2html c58b7bf8-e9c9-4f81-83f5-dfccb556332c
+ replace index.html https://github.com/urbanjost/M_units -- /home/urbanjs/venus/V600/github/M_framework/candidates/M_units/docs/is_even.3m_units.html
CHANGING FILE /home/urbanjs/venus/V600/github/M_framework/candidates/M_units/docs/is_even.3m_units.html  [index.html][https://github.com/urbanjost/M_units]
BEFORE: /home/urbanjs/venus/V600/github/M_framework/candidates/M_units/docs/is_even.3m_units.html:45:<h5><a href="index.html">[UP]</a></h5>
AFTER:  /home/urbanjs/venus/V600/github/M_framework/candidates/M_units/docs/is_even.3m_units.html:45:<h5><a href="https://github.com/urbanjost/M_units">[UP]</a></h5>
+ gzip -f /home/urbanjs/venus/V600/github/M_framework/candidates/M_units/man/man3/is_even.3m_units
+ for NAME in $(ls *.$NUM.man *.${NUM}${MAN_EXTENSION}.man 2>/dev/null|sort|uniq)
+ echo '>>>> processing manpage and HTML for is_nan.3m_units.man'
>>>> processing manpage and HTML for is_nan.3m_units.man
++ basename is_nan.3m_units.man .man
+ SHORTNAME_MAN=/home/urbanjs/venus/V600/github/M_framework/candidates/M_units/man/man3/is_nan.3m_units
++ basename is_nan.3m_units.man .3m_units.man
+ SHORTNAME=is_nan
+ : SHORTNAME_MAN /home/urbanjs/venus/V600/github/M_framework/candidates/M_units/man/man3/is_nan.3m_units SHORTNAME is_nan
+ txt2man -s 3m_units -t is_nan is_nan.3m_units.man
+ tee /home/urbanjs/venus/V600/github/M_framework/candidates/M_units/man/man3/is_nan.3m_units
+ env AUX_FILENAME=is_nan man2html
/home/urbanjs/venus/V600/github/index/github_scripts/bash/txt2man
man2html 524d81f5-11ed-4335-8e53-d242a0305d0e
+ replace index.html https://github.com/urbanjost/M_units -- /home/urbanjs/venus/V600/github/M_framework/candidates/M_units/docs/is_nan.3m_units.html
CHANGING FILE /home/urbanjs/venus/V600/github/M_framework/candidates/M_units/docs/is_nan.3m_units.html  [index.html][https://github.com/urbanjost/M_units]
BEFORE: /home/urbanjs/venus/V600/github/M_framework/candidates/M_units/docs/is_nan.3m_units.html:45:<h5><a href="index.html">[UP]</a></h5>
AFTER:  /home/urbanjs/venus/V600/github/M_framework/candidates/M_units/docs/is_nan.3m_units.html:45:<h5><a href="https://github.com/urbanjost/M_units">[UP]</a></h5>
+ gzip -f /home/urbanjs/venus/V600/github/M_framework/candidates/M_units/man/man3/is_nan.3m_units
+ for NAME in $(ls *.$NUM.man *.${NUM}${MAN_EXTENSION}.man 2>/dev/null|sort|uniq)
+ echo '>>>> processing manpage and HTML for meters_to_feet.3m_units.man'
>>>> processing manpage and HTML for meters_to_feet.3m_units.man
++ basename meters_to_feet.3m_units.man .man
+ SHORTNAME_MAN=/home/urbanjs/venus/V600/github/M_framework/candidates/M_units/man/man3/meters_to_feet.3m_units
++ basename meters_to_feet.3m_units.man .3m_units.man
+ SHORTNAME=meters_to_feet
+ : SHORTNAME_MAN /home/urbanjs/venus/V600/github/M_framework/candidates/M_units/man/man3/meters_to_feet.3m_units SHORTNAME meters_to_feet
+ txt2man -s 3m_units -t meters_to_feet meters_to_feet.3m_units.man
+ tee /home/urbanjs/venus/V600/github/M_framework/candidates/M_units/man/man3/meters_to_feet.3m_units
+ env AUX_FILENAME=meters_to_feet man2html
/home/urbanjs/venus/V600/github/index/github_scripts/bash/txt2man
man2html b44fcb8b-c1a8-4883-abc4-12563d41a032
+ replace index.html https://github.com/urbanjost/M_units -- /home/urbanjs/venus/V600/github/M_framework/candidates/M_units/docs/meters_to_feet.3m_units.html
CHANGING FILE /home/urbanjs/venus/V600/github/M_framework/candidates/M_units/docs/meters_to_feet.3m_units.html  [index.html][https://github.com/urbanjost/M_units]
BEFORE: /home/urbanjs/venus/V600/github/M_framework/candidates/M_units/docs/meters_to_feet.3m_units.html:45:<h5><a href="index.html">[UP]</a></h5>
AFTER:  /home/urbanjs/venus/V600/github/M_framework/candidates/M_units/docs/meters_to_feet.3m_units.html:45:<h5><a href="https://github.com/urbanjost/M_units">[UP]</a></h5>
+ gzip -f /home/urbanjs/venus/V600/github/M_framework/candidates/M_units/man/man3/meters_to_feet.3m_units
+ for NAME in $(ls *.$NUM.man *.${NUM}${MAN_EXTENSION}.man 2>/dev/null|sort|uniq)
+ echo '>>>> processing manpage and HTML for M_units.3m_units.man'
>>>> processing manpage and HTML for M_units.3m_units.man
++ basename M_units.3m_units.man .man
+ SHORTNAME_MAN=/home/urbanjs/venus/V600/github/M_framework/candidates/M_units/man/man3/M_units.3m_units
++ basename M_units.3m_units.man .3m_units.man
+ SHORTNAME=M_units
+ : SHORTNAME_MAN /home/urbanjs/venus/V600/github/M_framework/candidates/M_units/man/man3/M_units.3m_units SHORTNAME M_units
+ tee /home/urbanjs/venus/V600/github/M_framework/candidates/M_units/man/man3/M_units.3m_units
+ txt2man -s 3m_units -t M_units M_units.3m_units.man
+ env AUX_FILENAME=M_units man2html
/home/urbanjs/venus/V600/github/index/github_scripts/bash/txt2man
man2html e530babe-acd1-44cf-b27f-f10b44e5e9d4
+ replace index.html https://github.com/urbanjost/M_units -- /home/urbanjs/venus/V600/github/M_framework/candidates/M_units/docs/M_units.3m_units.html
CHANGING FILE /home/urbanjs/venus/V600/github/M_framework/candidates/M_units/docs/M_units.3m_units.html  [index.html][https://github.com/urbanjost/M_units]
BEFORE: /home/urbanjs/venus/V600/github/M_framework/candidates/M_units/docs/M_units.3m_units.html:45:<h5><a href="index.html">[UP]</a></h5>
AFTER:  /home/urbanjs/venus/V600/github/M_framework/candidates/M_units/docs/M_units.3m_units.html:45:<h5><a href="https://github.com/urbanjost/M_units">[UP]</a></h5>
+ gzip -f /home/urbanjs/venus/V600/github/M_framework/candidates/M_units/man/man3/M_units.3m_units
+ for NAME in $(ls *.$NUM.man *.${NUM}${MAN_EXTENSION}.man 2>/dev/null|sort|uniq)
+ echo '>>>> processing manpage and HTML for nan.3m_units.man'
>>>> processing manpage and HTML for nan.3m_units.man
++ basename nan.3m_units.man .man
+ SHORTNAME_MAN=/home/urbanjs/venus/V600/github/M_framework/candidates/M_units/man/man3/nan.3m_units
++ basename nan.3m_units.man .3m_units.man
+ SHORTNAME=nan
+ : SHORTNAME_MAN /home/urbanjs/venus/V600/github/M_framework/candidates/M_units/man/man3/nan.3m_units SHORTNAME nan
+ txt2man -s 3m_units -t nan nan.3m_units.man
+ env AUX_FILENAME=nan man2html
+ tee /home/urbanjs/venus/V600/github/M_framework/candidates/M_units/man/man3/nan.3m_units
/home/urbanjs/venus/V600/github/index/github_scripts/bash/txt2man
man2html 7ce3d5d8-0ea5-4b51-98bf-e61caf97e1ac
+ replace index.html https://github.com/urbanjost/M_units -- /home/urbanjs/venus/V600/github/M_framework/candidates/M_units/docs/nan.3m_units.html
CHANGING FILE /home/urbanjs/venus/V600/github/M_framework/candidates/M_units/docs/nan.3m_units.html  [index.html][https://github.com/urbanjost/M_units]
BEFORE: /home/urbanjs/venus/V600/github/M_framework/candidates/M_units/docs/nan.3m_units.html:45:<h5><a href="index.html">[UP]</a></h5>
AFTER:  /home/urbanjs/venus/V600/github/M_framework/candidates/M_units/docs/nan.3m_units.html:45:<h5><a href="https://github.com/urbanjost/M_units">[UP]</a></h5>
+ gzip -f /home/urbanjs/venus/V600/github/M_framework/candidates/M_units/man/man3/nan.3m_units
+ for NAME in $(ls *.$NUM.man *.${NUM}${MAN_EXTENSION}.man 2>/dev/null|sort|uniq)
+ echo '>>>> processing manpage and HTML for norm_angle_deg.3m_units.man'
>>>> processing manpage and HTML for norm_angle_deg.3m_units.man
++ basename norm_angle_deg.3m_units.man .man
+ SHORTNAME_MAN=/home/urbanjs/venus/V600/github/M_framework/candidates/M_units/man/man3/norm_angle_deg.3m_units
++ basename norm_angle_deg.3m_units.man .3m_units.man
+ SHORTNAME=norm_angle_deg
+ : SHORTNAME_MAN /home/urbanjs/venus/V600/github/M_framework/candidates/M_units/man/man3/norm_angle_deg.3m_units SHORTNAME norm_angle_deg
+ txt2man -s 3m_units -t norm_angle_deg norm_angle_deg.3m_units.man
+ tee /home/urbanjs/venus/V600/github/M_framework/candidates/M_units/man/man3/norm_angle_deg.3m_units
+ env AUX_FILENAME=norm_angle_deg man2html
/home/urbanjs/venus/V600/github/index/github_scripts/bash/txt2man
man2html 3014cb7b-def4-42c7-bccf-8920b72c7ca9
+ replace index.html https://github.com/urbanjost/M_units -- /home/urbanjs/venus/V600/github/M_framework/candidates/M_units/docs/norm_angle_deg.3m_units.html
CHANGING FILE /home/urbanjs/venus/V600/github/M_framework/candidates/M_units/docs/norm_angle_deg.3m_units.html  [index.html][https://github.com/urbanjost/M_units]
BEFORE: /home/urbanjs/venus/V600/github/M_framework/candidates/M_units/docs/norm_angle_deg.3m_units.html:45:<h5><a href="index.html">[UP]</a></h5>
AFTER:  /home/urbanjs/venus/V600/github/M_framework/candidates/M_units/docs/norm_angle_deg.3m_units.html:45:<h5><a href="https://github.com/urbanjost/M_units">[UP]</a></h5>
+ gzip -f /home/urbanjs/venus/V600/github/M_framework/candidates/M_units/man/man3/norm_angle_deg.3m_units
+ for NAME in $(ls *.$NUM.man *.${NUM}${MAN_EXTENSION}.man 2>/dev/null|sort|uniq)
+ echo '>>>> processing manpage and HTML for norm_angle_rad.3m_units.man'
>>>> processing manpage and HTML for norm_angle_rad.3m_units.man
++ basename norm_angle_rad.3m_units.man .man
+ SHORTNAME_MAN=/home/urbanjs/venus/V600/github/M_framework/candidates/M_units/man/man3/norm_angle_rad.3m_units
++ basename norm_angle_rad.3m_units.man .3m_units.man
+ SHORTNAME=norm_angle_rad
+ : SHORTNAME_MAN /home/urbanjs/venus/V600/github/M_framework/candidates/M_units/man/man3/norm_angle_rad.3m_units SHORTNAME norm_angle_rad
+ tee /home/urbanjs/venus/V600/github/M_framework/candidates/M_units/man/man3/norm_angle_rad.3m_units
+ env AUX_FILENAME=norm_angle_rad man2html
+ txt2man -s 3m_units -t norm_angle_rad norm_angle_rad.3m_units.man
/home/urbanjs/venus/V600/github/index/github_scripts/bash/txt2man
man2html d8c55574-4bca-493e-9d1e-9eb5f2cd80b0
+ replace index.html https://github.com/urbanjost/M_units -- /home/urbanjs/venus/V600/github/M_framework/candidates/M_units/docs/norm_angle_rad.3m_units.html
CHANGING FILE /home/urbanjs/venus/V600/github/M_framework/candidates/M_units/docs/norm_angle_rad.3m_units.html  [index.html][https://github.com/urbanjost/M_units]
BEFORE: /home/urbanjs/venus/V600/github/M_framework/candidates/M_units/docs/norm_angle_rad.3m_units.html:45:<h5><a href="index.html">[UP]</a></h5>
AFTER:  /home/urbanjs/venus/V600/github/M_framework/candidates/M_units/docs/norm_angle_rad.3m_units.html:45:<h5><a href="https://github.com/urbanjost/M_units">[UP]</a></h5>
+ gzip -f /home/urbanjs/venus/V600/github/M_framework/candidates/M_units/man/man3/norm_angle_rad.3m_units
+ for NAME in $(ls *.$NUM.man *.${NUM}${MAN_EXTENSION}.man 2>/dev/null|sort|uniq)
+ echo '>>>> processing manpage and HTML for polar_to_cartesian.3m_units.man'
>>>> processing manpage and HTML for polar_to_cartesian.3m_units.man
++ basename polar_to_cartesian.3m_units.man .man
+ SHORTNAME_MAN=/home/urbanjs/venus/V600/github/M_framework/candidates/M_units/man/man3/polar_to_cartesian.3m_units
++ basename polar_to_cartesian.3m_units.man .3m_units.man
+ SHORTNAME=polar_to_cartesian
+ : SHORTNAME_MAN /home/urbanjs/venus/V600/github/M_framework/candidates/M_units/man/man3/polar_to_cartesian.3m_units SHORTNAME polar_to_cartesian
+ tee /home/urbanjs/venus/V600/github/M_framework/candidates/M_units/man/man3/polar_to_cartesian.3m_units
+ txt2man -s 3m_units -t polar_to_cartesian polar_to_cartesian.3m_units.man
+ env AUX_FILENAME=polar_to_cartesian man2html
/home/urbanjs/venus/V600/github/index/github_scripts/bash/txt2man
man2html 98807714-def0-41c3-8634-7046ff7d4dd0
+ replace index.html https://github.com/urbanjost/M_units -- /home/urbanjs/venus/V600/github/M_framework/candidates/M_units/docs/polar_to_cartesian.3m_units.html
CHANGING FILE /home/urbanjs/venus/V600/github/M_framework/candidates/M_units/docs/polar_to_cartesian.3m_units.html  [index.html][https://github.com/urbanjost/M_units]
BEFORE: /home/urbanjs/venus/V600/github/M_framework/candidates/M_units/docs/polar_to_cartesian.3m_units.html:45:<h5><a href="index.html">[UP]</a></h5>
AFTER:  /home/urbanjs/venus/V600/github/M_framework/candidates/M_units/docs/polar_to_cartesian.3m_units.html:45:<h5><a href="https://github.com/urbanjost/M_units">[UP]</a></h5>
+ gzip -f /home/urbanjs/venus/V600/github/M_framework/candidates/M_units/man/man3/polar_to_cartesian.3m_units
+ for NAME in $(ls *.$NUM.man *.${NUM}${MAN_EXTENSION}.man 2>/dev/null|sort|uniq)
+ echo '>>>> processing manpage and HTML for pounds_to_kilograms.3m_units.man'
>>>> processing manpage and HTML for pounds_to_kilograms.3m_units.man
++ basename pounds_to_kilograms.3m_units.man .man
+ SHORTNAME_MAN=/home/urbanjs/venus/V600/github/M_framework/candidates/M_units/man/man3/pounds_to_kilograms.3m_units
++ basename pounds_to_kilograms.3m_units.man .3m_units.man
+ SHORTNAME=pounds_to_kilograms
+ : SHORTNAME_MAN /home/urbanjs/venus/V600/github/M_framework/candidates/M_units/man/man3/pounds_to_kilograms.3m_units SHORTNAME pounds_to_kilograms
+ tee /home/urbanjs/venus/V600/github/M_framework/candidates/M_units/man/man3/pounds_to_kilograms.3m_units
+ txt2man -s 3m_units -t pounds_to_kilograms pounds_to_kilograms.3m_units.man
+ env AUX_FILENAME=pounds_to_kilograms man2html
/home/urbanjs/venus/V600/github/index/github_scripts/bash/txt2man
man2html 3900e348-916f-47cd-9519-29c9ba9e3f31
+ replace index.html https://github.com/urbanjost/M_units -- /home/urbanjs/venus/V600/github/M_framework/candidates/M_units/docs/pounds_to_kilograms.3m_units.html
CHANGING FILE /home/urbanjs/venus/V600/github/M_framework/candidates/M_units/docs/pounds_to_kilograms.3m_units.html  [index.html][https://github.com/urbanjost/M_units]
BEFORE: /home/urbanjs/venus/V600/github/M_framework/candidates/M_units/docs/pounds_to_kilograms.3m_units.html:45:<h5><a href="index.html">[UP]</a></h5>
AFTER:  /home/urbanjs/venus/V600/github/M_framework/candidates/M_units/docs/pounds_to_kilograms.3m_units.html:45:<h5><a href="https://github.com/urbanjost/M_units">[UP]</a></h5>
+ gzip -f /home/urbanjs/venus/V600/github/M_framework/candidates/M_units/man/man3/pounds_to_kilograms.3m_units
+ for NAME in $(ls *.$NUM.man *.${NUM}${MAN_EXTENSION}.man 2>/dev/null|sort|uniq)
+ echo '>>>> processing manpage and HTML for r2d.3m_units.man'
>>>> processing manpage and HTML for r2d.3m_units.man
++ basename r2d.3m_units.man .man
+ SHORTNAME_MAN=/home/urbanjs/venus/V600/github/M_framework/candidates/M_units/man/man3/r2d.3m_units
++ basename r2d.3m_units.man .3m_units.man
+ SHORTNAME=r2d
+ : SHORTNAME_MAN /home/urbanjs/venus/V600/github/M_framework/candidates/M_units/man/man3/r2d.3m_units SHORTNAME r2d
+ txt2man -s 3m_units -t r2d r2d.3m_units.man
+ tee /home/urbanjs/venus/V600/github/M_framework/candidates/M_units/man/man3/r2d.3m_units
+ env AUX_FILENAME=r2d man2html
/home/urbanjs/venus/V600/github/index/github_scripts/bash/txt2man
man2html efe94768-582b-4370-a7b5-946c405d4416
+ replace index.html https://github.com/urbanjost/M_units -- /home/urbanjs/venus/V600/github/M_framework/candidates/M_units/docs/r2d.3m_units.html
CHANGING FILE /home/urbanjs/venus/V600/github/M_framework/candidates/M_units/docs/r2d.3m_units.html  [index.html][https://github.com/urbanjost/M_units]
BEFORE: /home/urbanjs/venus/V600/github/M_framework/candidates/M_units/docs/r2d.3m_units.html:45:<h5><a href="index.html">[UP]</a></h5>
AFTER:  /home/urbanjs/venus/V600/github/M_framework/candidates/M_units/docs/r2d.3m_units.html:45:<h5><a href="https://github.com/urbanjost/M_units">[UP]</a></h5>
+ gzip -f /home/urbanjs/venus/V600/github/M_framework/candidates/M_units/man/man3/r2d.3m_units
+ for NAME in $(ls *.$NUM.man *.${NUM}${MAN_EXTENSION}.man 2>/dev/null|sort|uniq)
+ echo '>>>> processing manpage and HTML for sind.3m_units.man'
>>>> processing manpage and HTML for sind.3m_units.man
++ basename sind.3m_units.man .man
+ SHORTNAME_MAN=/home/urbanjs/venus/V600/github/M_framework/candidates/M_units/man/man3/sind.3m_units
++ basename sind.3m_units.man .3m_units.man
+ SHORTNAME=sind
+ : SHORTNAME_MAN /home/urbanjs/venus/V600/github/M_framework/candidates/M_units/man/man3/sind.3m_units SHORTNAME sind
+ env AUX_FILENAME=sind man2html
+ txt2man -s 3m_units -t sind sind.3m_units.man
+ tee /home/urbanjs/venus/V600/github/M_framework/candidates/M_units/man/man3/sind.3m_units
/home/urbanjs/venus/V600/github/index/github_scripts/bash/txt2man
man2html 99b24e66-3278-4cfe-9179-15258b7301b5
+ replace index.html https://github.com/urbanjost/M_units -- /home/urbanjs/venus/V600/github/M_framework/candidates/M_units/docs/sind.3m_units.html
CHANGING FILE /home/urbanjs/venus/V600/github/M_framework/candidates/M_units/docs/sind.3m_units.html  [index.html][https://github.com/urbanjost/M_units]
BEFORE: /home/urbanjs/venus/V600/github/M_framework/candidates/M_units/docs/sind.3m_units.html:45:<h5><a href="index.html">[UP]</a></h5>
AFTER:  /home/urbanjs/venus/V600/github/M_framework/candidates/M_units/docs/sind.3m_units.html:45:<h5><a href="https://github.com/urbanjost/M_units">[UP]</a></h5>
+ gzip -f /home/urbanjs/venus/V600/github/M_framework/candidates/M_units/man/man3/sind.3m_units
+ for NAME in $(ls *.$NUM.man *.${NUM}${MAN_EXTENSION}.man 2>/dev/null|sort|uniq)
+ echo '>>>> processing manpage and HTML for spherical_to_cartesian.3m_units.man'
>>>> processing manpage and HTML for spherical_to_cartesian.3m_units.man
++ basename spherical_to_cartesian.3m_units.man .man
+ SHORTNAME_MAN=/home/urbanjs/venus/V600/github/M_framework/candidates/M_units/man/man3/spherical_to_cartesian.3m_units
++ basename spherical_to_cartesian.3m_units.man .3m_units.man
+ SHORTNAME=spherical_to_cartesian
+ : SHORTNAME_MAN /home/urbanjs/venus/V600/github/M_framework/candidates/M_units/man/man3/spherical_to_cartesian.3m_units SHORTNAME spherical_to_cartesian
+ tee /home/urbanjs/venus/V600/github/M_framework/candidates/M_units/man/man3/spherical_to_cartesian.3m_units
+ txt2man -s 3m_units -t spherical_to_cartesian spherical_to_cartesian.3m_units.man
+ env AUX_FILENAME=spherical_to_cartesian man2html
/home/urbanjs/venus/V600/github/index/github_scripts/bash/txt2man
man2html f47edd1b-13ab-4fac-af45-ec93620c82c0
+ replace index.html https://github.com/urbanjost/M_units -- /home/urbanjs/venus/V600/github/M_framework/candidates/M_units/docs/spherical_to_cartesian.3m_units.html
CHANGING FILE /home/urbanjs/venus/V600/github/M_framework/candidates/M_units/docs/spherical_to_cartesian.3m_units.html  [index.html][https://github.com/urbanjost/M_units]
BEFORE: /home/urbanjs/venus/V600/github/M_framework/candidates/M_units/docs/spherical_to_cartesian.3m_units.html:45:<h5><a href="index.html">[UP]</a></h5>
AFTER:  /home/urbanjs/venus/V600/github/M_framework/candidates/M_units/docs/spherical_to_cartesian.3m_units.html:45:<h5><a href="https://github.com/urbanjost/M_units">[UP]</a></h5>
+ gzip -f /home/urbanjs/venus/V600/github/M_framework/candidates/M_units/man/man3/spherical_to_cartesian.3m_units
+ for NAME in $(ls *.$NUM.man *.${NUM}${MAN_EXTENSION}.man 2>/dev/null|sort|uniq)
+ echo '>>>> processing manpage and HTML for symbol2atomnum.3m_units.man'
>>>> processing manpage and HTML for symbol2atomnum.3m_units.man
++ basename symbol2atomnum.3m_units.man .man
+ SHORTNAME_MAN=/home/urbanjs/venus/V600/github/M_framework/candidates/M_units/man/man3/symbol2atomnum.3m_units
++ basename symbol2atomnum.3m_units.man .3m_units.man
+ SHORTNAME=symbol2atomnum
+ : SHORTNAME_MAN /home/urbanjs/venus/V600/github/M_framework/candidates/M_units/man/man3/symbol2atomnum.3m_units SHORTNAME symbol2atomnum
+ txt2man -s 3m_units -t symbol2atomnum symbol2atomnum.3m_units.man
+ env AUX_FILENAME=symbol2atomnum man2html
+ tee /home/urbanjs/venus/V600/github/M_framework/candidates/M_units/man/man3/symbol2atomnum.3m_units
/home/urbanjs/venus/V600/github/index/github_scripts/bash/txt2man
man2html e7f885ea-a4f7-401c-b9a3-7d2702bd0ecd
+ replace index.html https://github.com/urbanjost/M_units -- /home/urbanjs/venus/V600/github/M_framework/candidates/M_units/docs/symbol2atomnum.3m_units.html
CHANGING FILE /home/urbanjs/venus/V600/github/M_framework/candidates/M_units/docs/symbol2atomnum.3m_units.html  [index.html][https://github.com/urbanjost/M_units]
BEFORE: /home/urbanjs/venus/V600/github/M_framework/candidates/M_units/docs/symbol2atomnum.3m_units.html:45:<h5><a href="index.html">[UP]</a></h5>
AFTER:  /home/urbanjs/venus/V600/github/M_framework/candidates/M_units/docs/symbol2atomnum.3m_units.html:45:<h5><a href="https://github.com/urbanjost/M_units">[UP]</a></h5>
+ gzip -f /home/urbanjs/venus/V600/github/M_framework/candidates/M_units/man/man3/symbol2atomnum.3m_units
+ for NAME in $(ls *.$NUM.man *.${NUM}${MAN_EXTENSION}.man 2>/dev/null|sort|uniq)
+ echo '>>>> processing manpage and HTML for tand.3m_units.man'
>>>> processing manpage and HTML for tand.3m_units.man
++ basename tand.3m_units.man .man
+ SHORTNAME_MAN=/home/urbanjs/venus/V600/github/M_framework/candidates/M_units/man/man3/tand.3m_units
++ basename tand.3m_units.man .3m_units.man
+ SHORTNAME=tand
+ : SHORTNAME_MAN /home/urbanjs/venus/V600/github/M_framework/candidates/M_units/man/man3/tand.3m_units SHORTNAME tand
+ txt2man -s 3m_units -t tand tand.3m_units.man
+ tee /home/urbanjs/venus/V600/github/M_framework/candidates/M_units/man/man3/tand.3m_units
+ env AUX_FILENAME=tand man2html
/home/urbanjs/venus/V600/github/index/github_scripts/bash/txt2man
man2html 236f7a1b-9845-4f43-9a34-51146ab35fa8
+ replace index.html https://github.com/urbanjost/M_units -- /home/urbanjs/venus/V600/github/M_framework/candidates/M_units/docs/tand.3m_units.html
CHANGING FILE /home/urbanjs/venus/V600/github/M_framework/candidates/M_units/docs/tand.3m_units.html  [index.html][https://github.com/urbanjost/M_units]
BEFORE: /home/urbanjs/venus/V600/github/M_framework/candidates/M_units/docs/tand.3m_units.html:45:<h5><a href="index.html">[UP]</a></h5>
AFTER:  /home/urbanjs/venus/V600/github/M_framework/candidates/M_units/docs/tand.3m_units.html:45:<h5><a href="https://github.com/urbanjost/M_units">[UP]</a></h5>
+ gzip -f /home/urbanjs/venus/V600/github/M_framework/candidates/M_units/man/man3/tand.3m_units
+ for NUM in 1 2 3 4 5 6 7 8
+ mkdir -p /home/urbanjs/venus/V600/github/M_framework/candidates/M_units/man/man4
++ ls '*.4.man' '*.4m_units.man'
++ sort
++ uniq
+ for NUM in 1 2 3 4 5 6 7 8
+ mkdir -p /home/urbanjs/venus/V600/github/M_framework/candidates/M_units/man/man5
++ uniq
++ ls '*.5.man' '*.5m_units.man'
++ sort
+ for NUM in 1 2 3 4 5 6 7 8
+ mkdir -p /home/urbanjs/venus/V600/github/M_framework/candidates/M_units/man/man6
++ ls '*.6.man' '*.6m_units.man'
++ uniq
++ sort
+ for NUM in 1 2 3 4 5 6 7 8
+ mkdir -p /home/urbanjs/venus/V600/github/M_framework/candidates/M_units/man/man7
++ sort
++ uniq
++ ls '*.7.man' '*.7m_units.man'
+ for NUM in 1 2 3 4 5 6 7 8
+ mkdir -p /home/urbanjs/venus/V600/github/M_framework/candidates/M_units/man/man8
++ ls '*.8.man' '*.8m_units.man'
++ uniq
++ sort
+ cat
>>>> .txt files to MAN DIRECTORY
>>>> MANOUT        => /home/urbanjs/venus/V600/github/M_framework/candidates/M_units/man
>>>> MAN_EXTENSION => 
+ cd doc
+ for NUM in 1 2 3 4 5 6 7 8
+ mkdir -p /home/urbanjs/venus/V600/github/M_framework/candidates/M_units/man/man1
++ ls '*.1.txt' '*.1m_units.txt'
++ uniq
++ sort
+ for NUM in 1 2 3 4 5 6 7 8
+ mkdir -p /home/urbanjs/venus/V600/github/M_framework/candidates/M_units/man/man2
++ ls '*.2.txt' '*.2m_units.txt'
++ uniq
++ sort
+ for NUM in 1 2 3 4 5 6 7 8
+ mkdir -p /home/urbanjs/venus/V600/github/M_framework/candidates/M_units/man/man3
++ ls '*.3.txt' '*.3m_units.txt'
++ sort
++ uniq
+ for NUM in 1 2 3 4 5 6 7 8
+ mkdir -p /home/urbanjs/venus/V600/github/M_framework/candidates/M_units/man/man4
++ uniq
++ sort
++ ls '*.4.txt' '*.4m_units.txt'
+ for NUM in 1 2 3 4 5 6 7 8
+ mkdir -p /home/urbanjs/venus/V600/github/M_framework/candidates/M_units/man/man5
++ uniq
++ sort
++ ls '*.5.txt' '*.5m_units.txt'
+ for NUM in 1 2 3 4 5 6 7 8
+ mkdir -p /home/urbanjs/venus/V600/github/M_framework/candidates/M_units/man/man6
++ sort
++ uniq
++ ls '*.6.txt' '*.6m_units.txt'
+ for NUM in 1 2 3 4 5 6 7 8
+ mkdir -p /home/urbanjs/venus/V600/github/M_framework/candidates/M_units/man/man7
++ sort
++ ls '*.7.txt' '*.7m_units.txt'
++ uniq
+ for NUM in 1 2 3 4 5 6 7 8
+ mkdir -p /home/urbanjs/venus/V600/github/M_framework/candidates/M_units/man/man8
++ ls '*.8.txt' '*.8m_units.txt'
++ sort
++ uniq
+ echo '>>>> *.htm files to HTML and ROFF'
>>>> *.htm files to HTML and ROFF
+ cd doc
+ for NUM in 1 2 3 4 5 6 7 8
++ ls '*.htm'
+ for NUM in 1 2 3 4 5 6 7 8
++ ls '*.htm'
+ for NUM in 1 2 3 4 5 6 7 8
++ ls '*.htm'
+ for NUM in 1 2 3 4 5 6 7 8
++ ls '*.htm'
+ for NUM in 1 2 3 4 5 6 7 8
++ ls '*.htm'
+ for NUM in 1 2 3 4 5 6 7 8
++ ls '*.htm'
+ for NUM in 1 2 3 4 5 6 7 8
++ ls '*.htm'
+ for NUM in 1 2 3 4 5 6 7 8
++ ls '*.htm'
+ echo '>>>> *.html files to DOC DIRECTORY'
>>>> *.html files to DOC DIRECTORY
+ cd doc
+ for NUM in 1 2 3 4 5 6 7 8
++ ls '*.1m_units.html'
+ for NUM in 1 2 3 4 5 6 7 8
++ ls '*.2m_units.html'
+ for NUM in 1 2 3 4 5 6 7 8
++ ls '*.3m_units.html'
+ for NUM in 1 2 3 4 5 6 7 8
++ ls '*.4m_units.html'
+ for NUM in 1 2 3 4 5 6 7 8
++ ls '*.5m_units.html'
+ for NUM in 1 2 3 4 5 6 7 8
++ ls '*.6m_units.html'
+ for NUM in 1 2 3 4 5 6 7 8
++ ls '*.7m_units.html'
+ for NUM in 1 2 3 4 5 6 7 8
++ ls '*.8m_units.html'
+ echo '>>>> Build manpage index'
>>>> Build manpage index
+ cd ../../man
+ mandb -c .
mandb: warning: $MANPATH set, inserting /etc/manpath.config
Updating index cache for path `/home/urbanjs/venus/V600/github/M_framework/candidates/M_units/man/./man1'. Wait...
Updating index cache for path `/home/urbanjs/venus/V600/github/M_framework/candidates/M_units/man/./man3'. Wait...
Processing manual pages under /home/urbanjs/venus/V600/github/M_framework/candidates/M_units/man/....
Updating index cache for path `/home/urbanjs/venus/V600/github/M_framework/candidates/M_units/man/./man2'. Wait...
Updating index cache for path `/home/urbanjs/venus/V600/github/M_framework/candidates/M_units/man/./man4'. Wait...
Updating index cache for path `/home/urbanjs/venus/V600/github/M_framework/candidates/M_units/man/./man6'. Wait...
Updating index cache for path `/home/urbanjs/venus/V600/github/M_framework/candidates/M_units/man/./man7'. Wait...
Updating index cache for path `/home/urbanjs/venus/V600/github/M_framework/candidates/M_units/man/./man8'. Wait...
Updating index cache for path `/home/urbanjs/venus/V600/github/M_framework/candidates/M_units/man/./man5'. Wait...
done.
Checking for stray cats under /home/urbanjs/venus/V600/github/M_framework/candidates/M_units/man/....
Processing manual pages under /home/urbanjs/venus/V600/github/M_framework/candidates/M_units/man/./cat8...
Processing manual pages under /home/urbanjs/venus/V600/github/M_framework/candidates/M_units/man/./cat1...
Processing manual pages under /home/urbanjs/venus/V600/github/M_framework/candidates/M_units/man/./cat3...
Processing manual pages under /home/urbanjs/venus/V600/github/M_framework/candidates/M_units/man/./cat4...
Processing manual pages under /home/urbanjs/venus/V600/github/M_framework/candidates/M_units/man/./cat6...
Processing manual pages under /home/urbanjs/venus/V600/github/M_framework/candidates/M_units/man/./cat2...
Processing manual pages under /home/urbanjs/venus/V600/github/M_framework/candidates/M_units/man/./cat5...
Processing manual pages under /home/urbanjs/venus/V600/github/M_framework/candidates/M_units/man/./cat7...
8 man subdirectories contained newer manual pages.
28 manual pages were added.
0 stray cats were added.
++ pwd
+ env MANPATH=/home/urbanjs/venus/V600/github/M_framework/candidates/M_units/man man -k .
acosd (3m_units)     - [M_units:TRIGONOMETRY] calculate arccosine of value in...
asind (3m_units)     - [M_units:TRIGONOMETRY] calculate arcsine of value in d...
atan2d (3m_units)    - [M_units:TRIGONOMETRY] calculate arctangent of the com...
atand (3m_units)     - [M_units:TRIGONOMETRY] calculate arctangent of value i...
atomnum2symbol (3m_units) - [M_units:SYMBOLS] return element symbol given ato...
c2f (3m_units)       - [M_units:TEMPERATURE] convert Celsius to Fahrenheit (L...
cartesian_to_polar (3m_units) - [M_units:TRIGONOMETRY] convert Cartesian coor...
cartesian_to_spherical (3m_units) - [M_units:TRIGONOMETRY] convert Cartesian ...
cosd (3m_units)      - [M_units:TRIGONOMETRY] calculate cosine of value in de...
d2r (3m_units)       - [M_units:TRIGONOMETRY] convert degrees to radians (LIC...
f2c (3m_units)       - [M_units:TEMPERATURE] convert Fahrenheit to Celsius (L...
feet_to_meters (3m_units) - [M_units:LENGTH] converts a measurement in feet t...
inf (3m_units)       - [M_units] return an inf (Infinity) (LICENSE:PD)
is_even (3m_units)   - [M_units] determine if integer is even (LICENSE:PD)
is_nan (3m_units)    - [M_units] determine if integer is a Nan (Not a Number)...
M_constants (3m_constants) - [M_constants:INTRO] Useful constants
M_units (3m_units)   - [M_units::INTRO] convert between various physical unit...
meters_to_feet (3m_units) - [M_units:LENGTH] converts a measurement in meters...
nan (3m_units)       - [M_units] return a NaN (Not a number) (LICENSE:PD)
norm_angle_deg (3m_units) - [M_units:TRIGONOMETRY] Return input angle given i...
norm_angle_rad (3m_units) - [M_units:TRIGONOMETRY] Return input angle given i...
polar_to_cartesian (3m_units) - [M_units:TRIGONOMETRY] convert polar coordina...
pounds_to_kilograms (3m_units) - [M_units:MASS] - converts a measurement in p...
r2d (3m_units)       - [M_units:TRIGONOMETRY] convert radians to degrees (LIC...
sind (3m_units)      - [M_units:TRIGONOMETRY] calculate sine of value in degr...
spherical_to_cartesian (3m_units) - [M_units:TRIGONOMETRY] convert ISO polar ...
symbol2atomnum (3m_units) - [M_units:SYMBOLS] return atomic number given elem...
tand (3m_units)      - [M_units:TRIGONOMETRY] calculate tangent of value in d...
+ echo '>>>> make easily distributed archive files of manpages'
>>>> make easily distributed archive files of manpages
+ mkdir -p ../../docs
+ cd ../../man
+ gzip man3/acosd.3m_units.gz man3/asind.3m_units.gz man3/atan2d.3m_units.gz man3/atand.3m_units.gz man3/atomnum2symbol.3m_units.gz man3/c2f.3m_units.gz man3/cartesian_to_polar.3m_units.gz man3/cartesian_to_spherical.3m_units.gz man3/cosd.3m_units.gz man3/d2r.3m_units.gz man3/f2c.3m_units.gz man3/feet_to_meters.3m_units.gz man3/inf.3m_units.gz man3/is_even.3m_units.gz man3/is_nan.3m_units.gz man3/meters_to_feet.3m_units.gz man3/M_units.3m_units.gz man3/nan.3m_units.gz man3/norm_angle_deg.3m_units.gz man3/norm_angle_rad.3m_units.gz man3/polar_to_cartesian.3m_units.gz man3/pounds_to_kilograms.3m_units.gz man3/r2d.3m_units.gz man3/sind.3m_units.gz man3/spherical_to_cartesian.3m_units.gz man3/symbol2atomnum.3m_units.gz man3/tand.3m_units.gz
gzip: man3/acosd.3m_units.gz already has .gz suffix -- unchanged
gzip: man3/asind.3m_units.gz already has .gz suffix -- unchanged
gzip: man3/atan2d.3m_units.gz already has .gz suffix -- unchanged
gzip: man3/atand.3m_units.gz already has .gz suffix -- unchanged
gzip: man3/atomnum2symbol.3m_units.gz already has .gz suffix -- unchanged
gzip: man3/c2f.3m_units.gz already has .gz suffix -- unchanged
gzip: man3/cartesian_to_polar.3m_units.gz already has .gz suffix -- unchanged
gzip: man3/cartesian_to_spherical.3m_units.gz already has .gz suffix -- unchanged
gzip: man3/cosd.3m_units.gz already has .gz suffix -- unchanged
gzip: man3/d2r.3m_units.gz already has .gz suffix -- unchanged
gzip: man3/f2c.3m_units.gz already has .gz suffix -- unchanged
gzip: man3/feet_to_meters.3m_units.gz already has .gz suffix -- unchanged
gzip: man3/inf.3m_units.gz already has .gz suffix -- unchanged
gzip: man3/is_even.3m_units.gz already has .gz suffix -- unchanged
gzip: man3/is_nan.3m_units.gz already has .gz suffix -- unchanged
gzip: man3/meters_to_feet.3m_units.gz already has .gz suffix -- unchanged
gzip: man3/M_units.3m_units.gz already has .gz suffix -- unchanged
gzip: man3/nan.3m_units.gz already has .gz suffix -- unchanged
gzip: man3/norm_angle_deg.3m_units.gz already has .gz suffix -- unchanged
gzip: man3/norm_angle_rad.3m_units.gz already has .gz suffix -- unchanged
gzip: man3/polar_to_cartesian.3m_units.gz already has .gz suffix -- unchanged
gzip: man3/pounds_to_kilograms.3m_units.gz already has .gz suffix -- unchanged
gzip: man3/r2d.3m_units.gz already has .gz suffix -- unchanged
gzip: man3/sind.3m_units.gz already has .gz suffix -- unchanged
gzip: man3/spherical_to_cartesian.3m_units.gz already has .gz suffix -- unchanged
gzip: man3/symbol2atomnum.3m_units.gz already has .gz suffix -- unchanged
gzip: man3/tand.3m_units.gz already has .gz suffix -- unchanged
+ zip -r ../docs/manpages.zip man3/acosd.3m_units.gz man3/asind.3m_units.gz man3/atan2d.3m_units.gz man3/atand.3m_units.gz man3/atomnum2symbol.3m_units.gz man3/c2f.3m_units.gz man3/cartesian_to_polar.3m_units.gz man3/cartesian_to_spherical.3m_units.gz man3/cosd.3m_units.gz man3/d2r.3m_units.gz man3/f2c.3m_units.gz man3/feet_to_meters.3m_units.gz man3/inf.3m_units.gz man3/is_even.3m_units.gz man3/is_nan.3m_units.gz man3/meters_to_feet.3m_units.gz man3/M_units.3m_units.gz man3/nan.3m_units.gz man3/norm_angle_deg.3m_units.gz man3/norm_angle_rad.3m_units.gz man3/polar_to_cartesian.3m_units.gz man3/pounds_to_kilograms.3m_units.gz man3/r2d.3m_units.gz man3/sind.3m_units.gz man3/spherical_to_cartesian.3m_units.gz man3/symbol2atomnum.3m_units.gz man3/tand.3m_units.gz
updating: man3/acosd.3m_units.gz (stored 0%)
updating: man3/asind.3m_units.gz (stored 0%)
updating: man3/atan2d.3m_units.gz (stored 0%)
updating: man3/atand.3m_units.gz (stored 0%)
updating: man3/atomnum2symbol.3m_units.gz (stored 0%)
updating: man3/c2f.3m_units.gz (stored 0%)
updating: man3/cartesian_to_polar.3m_units.gz (stored 0%)
updating: man3/cartesian_to_spherical.3m_units.gz (stored 0%)
updating: man3/cosd.3m_units.gz (stored 0%)
updating: man3/d2r.3m_units.gz (stored 0%)
updating: man3/f2c.3m_units.gz (stored 0%)
updating: man3/feet_to_meters.3m_units.gz (stored 0%)
updating: man3/inf.3m_units.gz (stored 0%)
updating: man3/is_even.3m_units.gz (stored 0%)
updating: man3/is_nan.3m_units.gz (stored 0%)
updating: man3/meters_to_feet.3m_units.gz (stored 0%)
updating: man3/M_units.3m_units.gz (stored 0%)
updating: man3/nan.3m_units.gz (stored 0%)
updating: man3/norm_angle_deg.3m_units.gz (stored 0%)
updating: man3/norm_angle_rad.3m_units.gz (stored 0%)
updating: man3/polar_to_cartesian.3m_units.gz (stored 0%)
updating: man3/pounds_to_kilograms.3m_units.gz (stored 0%)
updating: man3/r2d.3m_units.gz (stored 0%)
updating: man3/sind.3m_units.gz (stored 0%)
updating: man3/spherical_to_cartesian.3m_units.gz (stored 0%)
updating: man3/symbol2atomnum.3m_units.gz (stored 0%)
updating: man3/tand.3m_units.gz (stored 0%)
+ tar cvfz ../docs/manpages.tgz man3/acosd.3m_units.gz man3/asind.3m_units.gz man3/atan2d.3m_units.gz man3/atand.3m_units.gz man3/atomnum2symbol.3m_units.gz man3/c2f.3m_units.gz man3/cartesian_to_polar.3m_units.gz man3/cartesian_to_spherical.3m_units.gz man3/cosd.3m_units.gz man3/d2r.3m_units.gz man3/f2c.3m_units.gz man3/feet_to_meters.3m_units.gz man3/inf.3m_units.gz man3/is_even.3m_units.gz man3/is_nan.3m_units.gz man3/meters_to_feet.3m_units.gz man3/M_units.3m_units.gz man3/nan.3m_units.gz man3/norm_angle_deg.3m_units.gz man3/norm_angle_rad.3m_units.gz man3/polar_to_cartesian.3m_units.gz man3/pounds_to_kilograms.3m_units.gz man3/r2d.3m_units.gz man3/sind.3m_units.gz man3/spherical_to_cartesian.3m_units.gz man3/symbol2atomnum.3m_units.gz man3/tand.3m_units.gz
man3/acosd.3m_units.gz
man3/asind.3m_units.gz
man3/atan2d.3m_units.gz
man3/atand.3m_units.gz
man3/atomnum2symbol.3m_units.gz
man3/c2f.3m_units.gz
man3/cartesian_to_polar.3m_units.gz
man3/cartesian_to_spherical.3m_units.gz
man3/cosd.3m_units.gz
man3/d2r.3m_units.gz
man3/f2c.3m_units.gz
man3/feet_to_meters.3m_units.gz
man3/inf.3m_units.gz
man3/is_even.3m_units.gz
man3/is_nan.3m_units.gz
man3/meters_to_feet.3m_units.gz
man3/M_units.3m_units.gz
man3/nan.3m_units.gz
man3/norm_angle_deg.3m_units.gz
man3/norm_angle_rad.3m_units.gz
man3/polar_to_cartesian.3m_units.gz
man3/pounds_to_kilograms.3m_units.gz
man3/r2d.3m_units.gz
man3/sind.3m_units.gz
man3/spherical_to_cartesian.3m_units.gz
man3/symbol2atomnum.3m_units.gz
man3/tand.3m_units.gz
+ gunzip man3/acosd.3m_units.gz man3/asind.3m_units.gz man3/atan2d.3m_units.gz man3/atand.3m_units.gz man3/atomnum2symbol.3m_units.gz man3/c2f.3m_units.gz man3/cartesian_to_polar.3m_units.gz man3/cartesian_to_spherical.3m_units.gz man3/cosd.3m_units.gz man3/d2r.3m_units.gz man3/f2c.3m_units.gz man3/feet_to_meters.3m_units.gz man3/inf.3m_units.gz man3/is_even.3m_units.gz man3/is_nan.3m_units.gz man3/meters_to_feet.3m_units.gz man3/M_units.3m_units.gz man3/nan.3m_units.gz man3/norm_angle_deg.3m_units.gz man3/norm_angle_rad.3m_units.gz man3/polar_to_cartesian.3m_units.gz man3/pounds_to_kilograms.3m_units.gz man3/r2d.3m_units.gz man3/sind.3m_units.gz man3/spherical_to_cartesian.3m_units.gz man3/symbol2atomnum.3m_units.gz man3/tand.3m_units.gz
+ echo '>>>> extract demo pages from manpages'
>>>> extract demo pages from manpages
+ cd /home/urbanjs/venus/V600/github/M_framework/candidates/M_units/man
++ pwd
+ MANPATH=/home/urbanjs/venus/V600/github/M_framework/candidates/M_units/man
+ SECTION=3m_units
+ DEMO_OUTDIR=../../example/
+ GPF_extract_manpage_demos /home/urbanjs/venus/V600/github/M_framework/candidates/M_units/man 3m_units ../../example/
>>>> Extract demo program from manpages with
     MANPATH=/home/urbanjs/venus/V600/github/M_framework/candidates/M_units/man
     SECTION=3m_units
     DEMO_OUTDIR=../../example/
     DEMO_SUBDIR=FALSE
     1	acosd (3m_units)     - [M_units:TRIGONOMETRY] calculate arccosine of value in...
     2	asind (3m_units)     - [M_units:TRIGONOMETRY] calculate arcsine of value in d...
     3	atan2d (3m_units)    - [M_units:TRIGONOMETRY] calculate arctangent of the com...
     4	atand (3m_units)     - [M_units:TRIGONOMETRY] calculate arctangent of value i...
     5	atomnum2symbol (3m_units) - [M_units:SYMBOLS] return element symbol given ato...
     6	c2f (3m_units)       - [M_units:TEMPERATURE] convert Celsius to Fahrenheit (L...
     7	cartesian_to_polar (3m_units) - [M_units:TRIGONOMETRY] convert Cartesian coor...
     8	cartesian_to_spherical (3m_units) - [M_units:TRIGONOMETRY] convert Cartesian ...
     9	cosd (3m_units)      - [M_units:TRIGONOMETRY] calculate cosine of value in de...
    10	d2r (3m_units)       - [M_units:TRIGONOMETRY] convert degrees to radians (LIC...
    11	f2c (3m_units)       - [M_units:TEMPERATURE] convert Fahrenheit to Celsius (L...
    12	feet_to_meters (3m_units) - [M_units:LENGTH] converts a measurement in feet t...
    13	inf (3m_units)       - [M_units] return an inf (Infinity) (LICENSE:PD)
    14	is_even (3m_units)   - [M_units] determine if integer is even (LICENSE:PD)
    15	is_nan (3m_units)    - [M_units] determine if integer is a Nan (Not a Number)...
    16	M_constants (3m_constants) - [M_constants:INTRO] Useful constants
    17	M_units (3m_units)   - [M_units::INTRO] convert between various physical unit...
    18	meters_to_feet (3m_units) - [M_units:LENGTH] converts a measurement in meters...
    19	nan (3m_units)       - [M_units] return a NaN (Not a number) (LICENSE:PD)
    20	norm_angle_deg (3m_units) - [M_units:TRIGONOMETRY] Return input angle given i...
    21	norm_angle_rad (3m_units) - [M_units:TRIGONOMETRY] Return input angle given i...
    22	polar_to_cartesian (3m_units) - [M_units:TRIGONOMETRY] convert polar coordina...
    23	pounds_to_kilograms (3m_units) - [M_units:MASS] - converts a measurement in p...
    24	r2d (3m_units)       - [M_units:TRIGONOMETRY] convert radians to degrees (LIC...
    25	sind (3m_units)      - [M_units:TRIGONOMETRY] calculate sine of value in degr...
    26	spherical_to_cartesian (3m_units) - [M_units:TRIGONOMETRY] convert ISO polar ...
    27	symbol2atomnum (3m_units) - [M_units:SYMBOLS] return atomic number given elem...
    28	tand (3m_units)      - [M_units:TRIGONOMETRY] calculate tangent of value in d...
>>>> acosd.3m_units
>>>> asind.3m_units
>>>> atan2d.3m_units
>>>> atand.3m_units
>>>> atomnum2symbol.3m_units
>>>> c2f.3m_units
>>>> cartesian_to_polar.3m_units
>>>> cartesian_to_spherical.3m_units
>>>> cosd.3m_units
>>>> d2r.3m_units
>>>> f2c.3m_units
>>>> feet_to_meters.3m_units
>>>> inf.3m_units
>>>> is_even.3m_units
>>>> is_nan.3m_units
>>>> meters_to_feet.3m_units
>>>> M_units.3m_units
>>>> nan.3m_units
>>>> norm_angle_deg.3m_units
>>>> norm_angle_rad.3m_units
>>>> polar_to_cartesian.3m_units
>>>> pounds_to_kilograms.3m_units
>>>> r2d.3m_units
>>>> sind.3m_units
>>>> spherical_to_cartesian.3m_units
>>>> symbol2atomnum.3m_units
>>>> tand.3m_units
M_constants(3m_constants)			     M_constants(3m_constants)



NAME
  M_constants(3f) - [M_constants:INTRO] Useful constants


SYNOPSIS
  use M_constants,
    only : uc

	! real128 constants
	uc%qp%pi
	uc%qp%gamma
	uc%qp%e
	uc%qp%golden_ratio
	uc%qp%euler

	! real64 constants
	uc%dp%pi
	uc%dp%gamma
	uc%dp%e
	uc%dp%golden_ratio
	uc%dp%euler

	! real32 constants
	uc%sp%pi
	uc%sp%gamma
	uc%sp%e
	uc%sp%golden_ratio
	uc%sp%euler


  use M_constants,
    only : f ! formats

    f%all

DESCRIPTION
  Useful universal constants, physical constants, formats, ...

   UNIVERSAL CONSTANTS
  e The base of the natural logarithm system. "e" was named in honor of Euler,
    but is known as Napier's constant.	"euler"

  gamma
    The Euler-Mascheroni constant is often denoted by a lower-case Gamma.

  golden_ratio
    In mathematics, two quantities are in the golden ratio if their ratio is
    the same as the ratio of their sum to the larger of the two quantities. so
    for a > b > 0, (a + b)/ a = a/b where the Greek letter phi often denotes
    the golden ratio.

  pi
    The ratio of the circumference of a circle to the diameter of the circle

   PHYSICAL CONSTANTS
  "deg_per_rad" "rad_per_deg"

  c__m_per_sec
    Speed of light in a vacuum

  c__ft_per_sec
    Speed of light in a vacuum

NOTES
  Gamma is defined as

     Gamma = limit ( M -> Infinity ) ( Sum ( 1 <= N <= M ) 1 / N ) - Log ( M )


EXAMPLE
  Sample program:

      program test_universal_constants
      use M_constants, only : uc, f
      ! give a local name to a constant
      real,parameter :: e=uc%sp%e ! universal constant, single-precision, e
      character(len=*),parameter :: all=f%all

      ! just use it
      print f%all, 'gamma=',uc%qp%gamma    ! universal constant, quad-precision, gamma
      print all, 'e=',e

      ! or rename it with ASSOCIATE
      associate (gamma => uc%dp%gamma)
	 print all,'gamma=',gamma
      end associate

      end program test_universal_constants




				April 14, 2023	     M_constants(3m_constants)
asind(3m_units) 					       asind(3m_units)



NAME
  asind(3f) - [M_units:TRIGONOMETRY] calculate arcsine of value in degrees
  (LICENSE:PD)

SYNOPSIS
  elemental real function asind(value)

      class(*),intent(in) :: value

DESCRIPTION
  Calculate arcsine of input value in degrees. It converts the input value to
  radians from degrees and calls asin(3f).

OPTIONS
  value
    any standard scalar value supported by anyscalar_to_double(3f)

EXAMPLE
  Sample program

     program demo_asind
     use M_units, only :  asind
     implicit none
	write(*, *)asind([ 0.0, 0.258819044, 0.5, 0.707106829, 0.866025448,  &
			& 0.965925813, 1.0, -8.74227766E-08, -1.0 ])
     end program demo_asind

  Results

	0.0 15.0  30.0 45.0000038  60.00 75.0 90.0 -5.00895612E-06  -90.0


AUTHOR
  John S. Urban

LICENSE
  Public Domain



				 May 26, 2023		       asind(3m_units)
atand(3m_units) 					       atand(3m_units)



NAME
  atand(3f) - [M_units:TRIGONOMETRY] calculate arctangent of value in degrees
  (LICENSE:PD)

SYNOPSIS
  elemental real function atand(value)

      class(*),intent(in) :: value

DESCRIPTION
  Calculate arctangent of input value in degrees. It calls atan(3f) and
  converts the output to degrees from radians.

OPTIONS
  value
    any standard scalar value supported by anyscalar_to_double(3f)

EXAMPLE
  Sample program:

     program demo_atand
     use M_units, only :  atand, tand
     implicit none
	write(*, *)	  tand(0.0),tand(45.0),tand(120.0),tand(180.0),tand(720.0)
	write(*, *)atand([tand(0.0),tand(45.0),tand(120.0),tand(180.0),tand(720.0) ])
     end program demo_atand

  Results:

	0.00000000	 1.00000000	 -1.73205078	  -1.22464685E-16  -4.89858741E-16
	0.00000000	 45.0000000	 -60.0000000	  -7.01670955E-15  -2.80668382E-14


AUTHOR
  John S. Urban

LICENSE
  Public Domain



				 May 26, 2023		       atand(3m_units)
atomnum2symbol(3m_units)			      atomnum2symbol(3m_units)



NAME
  atomnum2symbol(3f) - [M_units:SYMBOLS] return element symbol given atomic
  number (LICENSE:PD)

SYNOPSIS
  subroutine atomnum2symbol(atomnum,symbol)

     integer,intent(in) 	  :: atomnum
     character(len=2),intent(out) :: symbol


DESCRIPTION
  Given an atomic number in the range of 1 to 109 return the corresponding
  element symbol name

OPTIONS
  atomnum
    an atomic number from 1 to 109

RETURNS
  symbol
    two-character symbol name corresponding to atomic number ATOMNUM

EXAMPLE
  Sample program

     program demo_atomnum2symbol
     use M_units, only :  atomnum2symbol
     implicit none
     character(len=2)  :: name
     integer	       :: i
     do i=1,109
	call atomnum2symbol(i,name)
	write(*,*)i,name
     enddo
     end program demo_atomnum2symbol

  Results:

	 >   1 H
	 >   2 He
	 >   3 Li
	 >   4 Be
	 >   5 B
	 >   6 C
	 >   7 N
	 >   8 O
	 >   9 F
	 >  10 Ne
	 >  11 Na
	 >  12 Mg
	 >  13 Al
	 >  14 Si
	 >  15 P
	 >  16 S
	 >  17 Cl
	 >  18 Ar
	 >  19 K
	 >  20 Ca
	 >  21 Sc
	 >  22 Ti
	 >  23 V
	 >  24 Cr
	 >  25 Mn
	 >  26 Fe
	 >  27 Co
	 >  28 Ni
	 >  29 Cu
	 >  30 Zn
	 >  31 Ga
	 >  32 Ge
	 >  33 As
	 >  34 Se
	 >  35 Br
	 >  36 Kr
	 >  37 Rb
	 >  38 Sr
	 >  39 Y
	 >  40 Zr
	 >  41 Nb
	 >  42 Mo
	 >  43 Tc
	 >  44 Ru
	 >  45 Rh
	 >  46 Pd
	 >  47 Ag
	 >  48 Cd
	 >  49 In
	 >  50 Sn
	 >  51 Sb
	 >  52 Te
	 >  53 I
	 >  54 Xe
	 >  55 Cs
	 >  56 Ba
	 >  57 La
	 >  58 Ce
	 >  59 Pr
	 >  60 Nd
	 >  61 Pm
	 >  62 Sm
	 >  63 Eu
	 >  64 Gd
	 >  65 Tb
	 >  66 Dy
	 >  67 Ho
	 >  68 Er
	 >  69 Tm
	 >  70 Yb
	 >  71 Lu
	 >  72 Hf
	 >  73 Ta
	 >  74 W
	 >  75 Re
	 >  76 Os
	 >  77 Ir
	 >  78 Pt
	 >  79 Au
	 >  80 Hg
	 >  81 Tl
	 >  82 Pb
	 >  83 Bi
	 >  84 Po
	 >  85 At
	 >  86 Rn
	 >  87 Fr
	 >  88 Ra
	 >  89 Ac
	 >  90 Th
	 >  91 Pa
	 >  92 U
	 >  93 Np
	 >  94 Pu
	 >  95 Am
	 >  96 Cm
	 >  97 Bk
	 >  98 Cf
	 >  99 Es
	 > 100 Fm
	 > 101 Md
	 > 102 No
	 > 103 Lr
	 > 104 Rf
	 > 105 Db
	 > 106 Sg
	 > 107 Bh
	 > 108 Hs
	 > 109 Mt


AUTHOR
  John S. Urban

LICENSE
  Public Domain



				 May 26, 2023	      atomnum2symbol(3m_units)
cosd(3m_units)							cosd(3m_units)



NAME
  cosd(3f) - [M_units:TRIGONOMETRY] calculate cosine of value in degrees
  (LICENSE:PD)

SYNOPSIS
  elemental real function cosd(degrees)

      class(*),intent(in) :: degrees

DESCRIPTION
  Calculate cosine of input value in degrees

OPTIONS
  degrees
    any standard scalar value supported by anyscalar_to_double(3f).

EXAMPLE
  Sample program

     program demo_cosd
     use M_units, only :  cosd
     implicit none
	write(*,*)'With REAL array input    ', &
	& cosd([ 0.0, 15.0, 30.0, 45.0, 60.0, 75.0, 90.0, 180.0, 270.0 ])
	write(*,*)'With INTEGER array input ',	&
	& cosd([0,15,30,45,60,75,90,180,270])
	write(*,*)'With DOUBLEPRECISION     ',	      &
	& cosd(0.0d0),cosd(15.0d0),cosd(90.0/3.0d0),  &
	& cosd(90.0/2.0d0),cosd(60.0d0),cosd(75.0d0), &
	& cosd(90.0d0),cosd(180.0d0),cosd(270.0d0)
     end program demo_cosd

  Results

      With REAL array input	 1.00000000	  0.965925813	0.866025448
				 0.707106769	  0.499999970	0.258819073
				-4.37113883E-08  -1.00000000	1.19248806E-08
      With INTEGER array input	 1.00000000	  0.965925813	0.866025448
				 0.707106769	  0.499999970	0.258819073
				-4.37113883E-08  -1.00000000	1.19248806E-08
      With DOUBLEPRECISION	 1.00000000	  0.965925813	0.866025448
				 0.707106769	  0.499999970	0.258819073
				-4.37113883E-08  -1.00000000	1.19248806E-08


AUTHOR
  John S. Urban

LICENSE
  Public Domain



				 May 26, 2023			cosd(3m_units)
d2r(3m_units)							 d2r(3m_units)



NAME
  d2r(3f) - [M_units:TRIGONOMETRY] convert degrees to radians (LICENSE:PD)

SYNOPSIS
  elemental real function d2r(degrees)

      class(*),intent(in) :: radians

DESCRIPTION
  Converts degrees to radians using the formula:

      radians=real(degrees*acos(-1.0d0)/180.d0)

OPTIONS
  degrees
    any standard scalar value supported by anyscalar_to_real(3f).  This
    includes REAL, INTEGER, DOUBLEPRECISION, ... .

EXAMPLE
  Sample program

     program demo_d2r
     use M_units, only :  d2r
     implicit none
	write(*,*)'With REAL array input    ', d2r([0.0,45.0,90.0,135.0,180.0])
	write(*,*)'With INTEGER array input ', d2r([0,	45,  90,  135,	180  ])
	write(*,*)'With DOUBLEPRECISION     ', &
	& d2r(0.0d0),d2r(45.0d0),d2r(90.0d0),d2r(135.0d0),d2r(180.0d0)
     end program demo_d2r

  Results

     With REAL array input    0.00000 0.785398185 1.57079637 2.35619450 3.14159274
     With INTEGER array input 0.00000 0.785398185 1.57079637 2.35619450 3.14159274
     With DOUBLEPRECISION     0.00000 0.785398185 1.57079637 2.35619450 3.14159274


AUTHOR
  John S. Urban

LICENSE
  Public Domain



				 May 26, 2023			 d2r(3m_units)
f2c(3m_units)							 f2c(3m_units)



NAME
  f2c(3f) - [M_units:TEMPERATURE] convert Fahrenheit to Celsius (LICENSE:PD)

SYNOPSIS
  elemental real function f2c(fahrenheit)

      class(*),intent(in) :: fahrenheit

DESCRIPTION
  Converts Fahrenheit temperatures to Celsius using the formula:

      celsius=(fahrenheit+40.0)*5.0/9.0 - 40.0

OPTIONS
  fahrenheit
    any standard scalar value supported by anyscalar_to_real(3f).

EXAMPLE
  Sample program

     program demo_f2c
     use M_units, only :  f2c
     implicit none
	write(*,*)'With REAL array input    ', f2c([ -40.0,32.0, 212.0 ])
	write(*,*)'With INTEGER array input ', f2c([ -40,  32,	 212   ])
	write(*,*)'With DOUBLEPRECISION     ', f2c(-40.0d0),f2c(32.0d0),f2c(212.0d0)
     end program demo_f2c

  Results

     With REAL array input	-40.0000000	  0.00000000	   100.000000
     With INTEGER array input	-40.0000000	  0.00000000	   100.000000
     With DOUBLEPRECISION	-40.0000000	  0.00000000	   100.000000


AUTHOR
  John S. Urban

LICENSE
  Public Domain



				 May 26, 2023			 f2c(3m_units)
feet_to_meters(3m_units)			      feet_to_meters(3m_units)



NAME
  feet_to_meters(3f) - [M_units:LENGTH] converts a measurement in feet to
  meters (LICENSE:PD)

SYNOPSIS
  elemental doubleprecision function feet_to_meters(feet)

      class(*),intent(in) :: feet

DESCRIPTION
  Converts feet to meters using the formula:

      meters = 0.0254 * 12.0 * feet

OPTIONS
  feet
    any standard scalar value supported by anyscalar_to_real(3f).  This at
    least includes REAL, INTEGER, and DOUBLEPRECISION.

EXAMPLE
  Sample program

     program demo_feet_to_meters
     use M_units, only : feet_to_meters
     implicit none
	write(*,*)'With REAL array input    ', &
		& feet_to_meters([ -1.0, 0.0, 1.0 ,1.0/12.0])
	write(*,*)'With INTEGER array input ', &
		& feet_to_meters([ -1,	 0,   1   ])
	write(*,*)'With DOUBLEPRECISION     ', &
		& feet_to_meters(-1.0d0), &
		& feet_to_meters(0.0d0), &
		& feet_to_meters(1.0d0)
     end program demo_feet_to_meters

  Results

      With REAL array input	-0.304800004   0.00000000  0.304800004	2.54000016E-02
      With INTEGER array input	-0.304800004   0.00000000  0.304800004
      With DOUBLEPRECISION	-0.304800004   0.00000000  0.304800004


AUTHOR
  John S. Urban

LICENSE
  Public Domain



				 May 26, 2023	      feet_to_meters(3m_units)
norm_angle_rad(3m_units)			      norm_angle_rad(3m_units)



NAME
  norm_angle_rad(3f) - [M_units:TRIGONOMETRY] Return input angle given in
  radians as angle between 0 and 2pi (LICENSE:PD)

SYNOPSIS
  elemental function norm_angle_rad(ang) result(rev)

  class(*), intent(in) :: ang

  doubleprecision
    :: rev

DESCRIPTION
  Given an input angle specified in radians, normalize the value to fall in
  the range 0 to 2*pi radians.

OPTIONS
  ang
    Input angle (radians). May be INTEGER, REAL, or DOUBLEPRECISION

RESULTS
  rev
    Return input angle (radians) normalized to range 0>= REV <=2*pi radians

EXAMPLE
  Sample program:

     program demo_norm_angle_rad
     use M_units, only : norm_angle_rad
     implicit none
     real,parameter :: PI=4*atan(1.0)
     real	    :: val
     integer	    :: i
     do i=-2,2
	val=i*2*pi;   write(*,*)val,norm_angle_rad(val)
	val=i*pi;     write(*,*)val,norm_angle_rad(val)
	write(*,*)
     enddo
     write(*,*)norm_angle_rad([-PI/8.0,-PI/4.0,-PI/2.0,-PI,-0.0,PI/8.0,PI/4.0,PI/2.0,PI,0.0])
     end program demo_norm_angle_rad

  Results:

AUTHOR
  John S. Urban

LICENSE
  Public Domain



				 May 26, 2023	      norm_angle_rad(3m_units)
polar_to_cartesian(3m_units)			  polar_to_cartesian(3m_units)



NAME
  polar_to_cartesian(3f) - [M_units:TRIGONOMETRY] convert polar coordinates to
  Cartesian coordinates (LICENSE:PD)

SYNOPSIS
  subroutine polar_to_cartesian(radius,inclination,x,y)

      real,intent(in) :: radius,inclination
      real,intent(out)	:: x,y


DESCRIPTION
  Convert polar coordinate <radius, inclination > with angles in radians to
  cartesian point <X,Y> using the formulas

	x=radius*cos(inclination)
	y=radius*sin(inclination)


OPTIONS
  RADIUS
    The radial distance from the origin (O) to the point (P)

  INCLINATION
    The INCLINATION angle in radians between the inclination reference
    direction (x-axis) and the orthogonal projection of the line OP of the
    reference plane (x-y plane).

RESULTS
  X The distance along the x-axis

  Y The distance along the y-axis

EXAMPLES
  examples of usage

     program demo_polar_to_cartesian
     use M_units, only : polar_to_cartesian
     implicit none
     real    :: x,y
     real    :: r,i
     integer :: ios
     INFINITE: do
	write(*,'(g0)',advance='no')'Enter radius and inclination(in radians):'
	read(*,*,iostat=ios) r, i
	if(ios.ne.0)exit INFINITE
	call polar_to_cartesian(r,i,x,y)
	write(*,*)'x=',x,' y=',y,'radius=',r,'inclination=',i
     enddo INFINITE
     end program demo_polar_to_cartesian

AUTHOR
  John S. Urban

LICENSE
  Public Domain



				 May 26, 2023	  polar_to_cartesian(3m_units)
pounds_to_kilograms(3m_units)			 pounds_to_kilograms(3m_units)



NAME
  pounds_to_kilograms(3f) - [M_units:MASS] - converts a measurement in pounds-
  mass to kilograms.  (LICENSE:PD)


SYNOPSIS
  elemental function pounds_to_kilograms ( pounds )

      class(*),intent(in) ::  pounds
      doubleprecision	  :: pounds_to_kilograms


DESCRIPTION
  Converts pounds-mass to kilograms using the formula:

	kilograms = 0.45359237 * pounds

  The pound (or more properly pound-mass) is a unit of mass used in the
  Imperial, United States Customary, and other systems of measurement. A
  number of different definitions have been used; the most common today is the
  international avoirdupois pound, which is legally defined as exactly
  0.45359237 kilograms. The international standard symbol for the avoirdupois
  pound is lb (from the Roman "libra"); an alternative symbol is lbm).

OPTIONS
  POUNDS
    The weight in pounds.  POUNDS may be any standard scalar value supported
    by anyscalar_to_double(3f).  This at least includes REAL, INTEGER, and
    DOUBLEPRECISION.

RETURN
  POUNDS_TO_KILOGRAMS
    the corresponding weight in kilograms.

EXAMPLE
  Sample program

     program demo_pounds_to_kilograms
     use M_units, only : pounds_to_kilograms
     implicit none
	write(*,*)'REAL 	   ', pounds_to_kilograms(1.0)
	write(*,*)'INTEGER array   ', pounds_to_kilograms([ 0, 1, 100, 200 ])
	write(*,*)'DOUBLEPRECISION ', pounds_to_kilograms(1.0d0)
     end program demo_pounds_to_kilograms

  Typical Results

      REAL		0.45359237000000002
      INTEGER array	0.0000000000000000    0.45359237000000002
		       45.359237000000000    90.718474000000001
      DOUBLEPRECISION	0.45359237000000002


AUTHOR
  John S. Urban

LICENSE
  Public Domain



				 May 26, 2023	 pounds_to_kilograms(3m_units)
r2d(3m_units)							 r2d(3m_units)



NAME
  r2d(3f) - [M_units:TRIGONOMETRY] convert radians to degrees (LICENSE:PD)

SYNOPSIS
  elemental real function r2d(radians)

      class(*),intent(in) :: degrees

DESCRIPTION
  Converts radians to degrees using the formula:

      degrees=real(radians * 180.d0 / acos(-1.0d0))

OPTIONS
  radians
    any standard scalar value supported by anyscalar_to_real(3f).

EXAMPLE
  Sample program

     program demo_r2d
     use M_units, only :  r2d
     use M_units, only : pi8=>pi
     implicit none
     real :: pi=real(pi8)
	write(*,*)'With REAL array input    ', r2d([ 0.0, PI/4.0, PI/2.0, 3.0*PI/2.0, PI ])
	write(*,*)'With INTEGER array input ', r2d([0,1,2,3,4])
	write(*,*)'With DOUBLEPRECISION     ', r2d(0.0d0),r2d(PI/4.0d0),r2d(PI/2.0d0),r2d(3.0d0*PI/2.0d0),r2d(PI)
     end program demo_r2d

  Results

      With REAL array input	  0.00000000	   45.0000000	    90.0000000	     270.000000       180.000000
      With INTEGER array input	  0.00000000	   57.2957802	    114.591560	     171.887344       229.183121
      With DOUBLEPRECISION	  0.00000000	   45.0000000	    90.0000000	     270.000000       180.000000

AUTHOR
  John S. Urban

LICENSE
  Public Domain



				 May 26, 2023			 r2d(3m_units)
sind(3m_units)							sind(3m_units)



NAME
  sind(3f) - [M_units:TRIGONOMETRY] calculate sine of value in degrees
  (LICENSE:PD)

SYNOPSIS
  elemental real function sind(degrees)

      class(*),intent(in) :: degrees

DESCRIPTION
  Calculate sine of input value in degrees

OPTIONS
  degrees
    any standard scalar value supported by anyscalar_to_double(3f)

EXAMPLE
  Sample program

     program demo_sind
     use M_units, only :  sind
     implicit none
	write(*,*)'With REAL array input    ', sind([ 0.0, 15.0, 30.0, 45.0, &
					     & 60.0, 75.0, 90.0, 180.0, 270.0 ])
	write(*,*)'With INTEGER array input ', sind([0,15,30,45,60,75,90,180,270])
	write(*,*)'With DOUBLEPRECISION     ',		 &
	   & sind(0.0d0),sind(15.0d0),sind(90.0/3.0d0),  &
	   & sind(90.0/2.0d0),sind(60.0d0),sind(75.0d0), &
	   & sind(90.0d0),sind(180.0d0),sind(270.0d0)
     end program demo_sind

  Results

     With REAL array input	0.00000000	0.258819044	 0.500000000
				0.707106829	0.866025448	 0.965925813
				1.00000000     -8.74227766E-08	-1.00000000
     With INTEGER array input	0.00000000	0.258819044	 0.500000000
				0.707106829	0.866025448	 0.965925813
				1.00000000	-8.74227766E-08  -1.00000000
     With DOUBLEPRECISION	0.00000000	0.258819044	 0.500000000
				0.707106829	0.866025448	 0.965925813
				1.00000000	-8.74227766E-08  -1.00000000


AUTHOR
  John S. Urban

LICENSE
  Public Domain



				 May 26, 2023			sind(3m_units)
spherical_to_cartesian(3m_units)	      spherical_to_cartesian(3m_units)



NAME
  spherical_to_cartesian(3f) - [M_units:TRIGONOMETRY] convert ISO polar
  coordinates to Cartesian coordinates (LICENSE:PD)

SYNOPSIS
  subroutine spherical_to_cartesian(radius,inclination,azimuth,x,y,z)

      real,intent(in) :: radius,inclination,azimuth
      real,intent(out)	:: x,y,z


DESCRIPTION
  Convert ISO 8000-2:2009 polar coordinate <radius, inclination, azimuth> with
  angles in radians to cartesian point <X,Y,Z> using the formulas

	x=radius*sin(inclination)*cos(azimuth)
	y=radius*sin(inclination)*sin(azimuth)
	z=radius*cos(inclination)


OPTIONS
  RADIUS
    The radial distance from the origin (O) to the point (P)

  INCLINATION
    The zenith angle in radians between the zenith reference direction (z-
    axis) and the line OP

  AZIMUTH
    The azimuth angle in radians between the azimuth reference direction (x-
    axis) and the orthogonal projection of the line OP of the reference plane
    (x-y plane).

RESULTS
  X The distance along the x-axis

  Y The distance along the y-axis

  Z The distance along the z-axis

EXAMPLES
  examples of usage

     program demo_spherical_to_cartesian
     use M_units, only : spherical_to_cartesian
     implicit none
     real    :: x,y,z
     real    :: r,i,a
     integer :: ios
     INFINITE: do
	read(*,*,iostat=ios) x, y, z
	if(ios.ne.0)exit INFINITE
	call spherical_to_cartesian(r,i,a,x,y,z)
	write(*,*)'x=',x,' y=',y,' z=',z,'radius=',r,'inclination=',i,'azimuth=',a
     enddo INFINITE
     end program demo_spherical_to_cartesian

AUTHOR
  John S. Urban

LICENSE
  Public Domain



				 May 26, 2023 spherical_to_cartesian(3m_units)
symbol2atomnum(3m_units)			      symbol2atomnum(3m_units)



NAME
  symbol2atomnum(3f) - [M_units:SYMBOLS] return atomic number given element
  symbol name (LICENSE:PD)

SYNOPSIS
  subroutine symbol2atomnum(symbol,atomnum)

     character(len=2),intent(in) :: symbol
     integer,intent(out)	 :: atomnum


DESCRIPTION
  Given a two-character element symbol name return the corresponding atomic
  number

OPTIONS
  symbol
    two-character symbol name corresponding to atomic number ATOMNUM

RETURNS
  atomnum
    an atomic number from 1 to 109

EXAMPLE
  Sample program

     program demo_symbol2atomnum
     use M_units, only :  symbol2atomnum
     implicit none
     integer	       :: atomnum
     character(len=2)  :: name
     name='Ne'
     call symbol2atomnum(name,atomnum)
     write(*,*)atomnum,name
     end program demo_symbol2atomnum

  Results:

     10 Ne


AUTHOR
  John S. Urban

LICENSE
  Public Domain



				 May 26, 2023	      symbol2atomnum(3m_units)
tand(3m_units)							tand(3m_units)



NAME
  tand(3f) - [M_units:TRIGONOMETRY] calculate tangent of value in degrees
  (LICENSE:PD)

SYNOPSIS
  elemental real function tand(degrees)

      class(*),intent(in) :: degrees

DESCRIPTION
  Calculate tangent of input value in degrees

OPTIONS
  degrees
    any standard scalar value supported by anyscalar_to_double(3f).

EXAMPLE
  Sample program

     program demo_tand
     use M_units, only :  tand
     implicit none
	write(*,*)'With REAL array input    ', &
	  & tand([ 0.0, 15.0, 30.0, 45.0, 60.0, 75.0, 90.0, 180.0, 270.0 ])
	write(*,*)'With INTEGER array input ', &
	  & tand([0,15,30,45,60,75,90,180,270])
	write(*,*)'With DOUBLEPRECISION     ', &
	  & tand(0.0d0),tand(15.0d0),tand(90.0/3.0d0),tand(90.0/2.0d0),&
	  & tand(60.0d0),tand(75.0d0),&
	  & tand(90.0d0),tand(180.0d0),tand(270.0d0)
     end program demo_tand
  Results:

     With REAL array input    0.00000000   0.267949194	 0.577350259
     1.00000000    1.73205078	 3.73205090    1.63312395E+16
     -1.22464685E-16  5.44374649E+15
     With INTEGER array input  0.00000000   0.267949194   0.577350259
     1.00000000    1.73205078	 3.73205090    1.63312395E+16
     -1.22464685E-16  5.44374649E+15
     With DOUBLEPRECISION    0.00000000   0.267949194	0.577350259
     1.00000000    1.73205078	 3.73205090    1.63312395E+16
     -1.22464685E-16  5.44374649E+15

  Results

AUTHOR
  John S. Urban

LICENSE
  Public Domain



				 May 26, 2023			tand(3m_units)
inf(3m_units)							 inf(3m_units)



NAME
  inf(3f) - [M_units] return an inf (Infinity) (LICENSE:PD)

SYNOPSIS
  function inf(value) use,intrinsic :: iso_fortran_env, only: real32, real64,
  real128 real(kind=real32|real64|real128) :: inf
  real(kind=real32|real64|real128) :: value

DESCRIPTION
  Return an inf (Infinity) value. The type returned will be the same kind as
  the passed value.

OPTIONS
  value
    A real value whose kind is used to define the kind of the returned value.

RETURNS
  inf
    returns an inf value ("Infinity") on platforms that support inf values.
    The kind is determined by the kind of the input value.

EXAMPLE
  Sample program

       program demo_inf
       use,intrinsic :: iso_fortran_env, only: real32, real64, real128
       use M_units, only : inf
       implicit none
       real(kind=real32)  :: r32
       real(kind=real64)  :: r64
       real(kind=real128) :: r128
       character(len=256) :: message
       integer		  :: ios
	  r32=inf(0.0_real32)
	  r64=inf(0.0_real64)
	  r128=inf(0.0_real128)
	  write(*,*,iomsg=message,iostat=ios)r32,r64,r128
	  if(ios.ne.0)write(*,*)trim(message)
	  write(*,'(z0)',iomsg=message,iostat=ios)r32,r64,r128
	  if(ios.ne.0)write(*,*)trim(message)
	  write(*,'(g0)',iomsg=message,iostat=ios)r32,r64,r128
	  if(ios.ne.0)write(*,*)trim(message)
	  write(*,'(f3.1)',iomsg=message,iostat=ios)r32,r64,r128
	  if(ios.ne.0)write(*,*)trim(message)
	  write(*,'(f2.1)',iomsg=message,iostat=ios)r32,r64,r128
	  if(ios.ne.0)write(*,*)trim(message)
       end program demo_inf
  Results:

      Infinity Infinity Infinity
  7F800000 7FF0000000000000 7FFF0000000000000000000000000000 Inf Inf Inf Inf
  Inf Inf ** ** **

AUTHOR
  John S. Urban

LICENSE
  Public Domain



				 May 26, 2023			 inf(3m_units)
is_even(3m_units)					     is_even(3m_units)



NAME
  is_even(3f) - [M_units] determine if integer is even (LICENSE:PD)

SYNOPSIS
  elemental pure logical is_even(int)

      integer(kind=int8|int16|int32|int64) :: int

DESCRIPTION
  Determine if an integer is even or not.

OPTIONS
  int
    The integer to test

RETURNS
  is_even
    logical value is .true. if the input value INT is even

EXAMPLE
  simple example

      program demo_is_even
      use M_units, only : is_even
      implicit none
      integer :: i
	 write(*,*)is_even(0)
	 write(*,*)is_even(-1)
	 write(*,*)is_even(-2)
	 write(*,*)is_even(+1)
	 write(*,*)is_even(+2)
	 write(*,*)is_even([10,11,17,19,22])
	 write(*,*)(is_even(i),i=-10,10)
      end program demo_is_even
  Expected output

   T
   F
   T
   F
   T
   T F F F T
   T F T F T F T F T F T F T F T F T F T F T
LICENSE
  Public Domain



				 May 26, 2023		     is_even(3m_units)
is_nan(3m_units)					      is_nan(3m_units)



NAME
  is_nan(3f) - [M_units] determine if integer is a Nan (Not a Number) value
  (LICENSE:PD)

SYNOPSIS
  elemental pure logical is_nan(value)

      integer(kind=real32|real64|real128|complex) :: value

DESCRIPTION
  Determine if a real or complex value is a NaN (Not a Number) value

OPTIONS
  value
    The value to test

EXAMPLE
  simple example

      program demo_is_nan
      use M_units, only : is_nan
      real :: x
      character(len=*),parameter   :: linei='Infinity'
      character(len=*),parameter   :: line='NaN'
      character(len=:),allocatable :: readable
      real,parameter :: arr(*)=[-100.0,100.0,huge(0.0)]
	 readable=linei
	 read(readable,*)x
	 write(*,*)is_nan(x),x	 ! note Infinity is not a Nan
	 write(*,*)is_nan(-x),-x
	 readable=line
	 read(readable,*)x
	 write(*,*)is_nan(x),x
	 write(*,*)x==x,x  ! note Nan is never equal to another value
	 write(*,*)is_nan(arr),arr
      end program demo_is_nan

  Expected results

      F 	Infinity
      F        -Infinity
      T 	     NaN
      F 	     NaN
      F F F  -100.000000       100.000000	3.40282347E+38

AUTHOR
  John S. Urban

LICENSE
  Public Domain



				 May 26, 2023		      is_nan(3m_units)
M_units(3m_units)					     M_units(3m_units)



NAME
  M_units(3fm) - [M_units::INTRO] convert between various physical units
  (LICENSE:MIT)


SYNOPSIS
  procedure definitions:

	elemental real function c2f(celsius)
	elemental real function f2c(fahrenheit)

	elemental real|double function r2d(radians)
	elemental real|double function d2r(degrees)

	elemental real function feet_to_meters(feet)
	elemental real function meters_to_feet(meters)

	elemental real function sind(angle_in_degrees)
	elemental real function cosd(angle_in_degrees)
	elemental real function tand(angle_in_degrees)
	elemental real function asind(x)
	elemental real function acosd(x)
	elemental real function atand(x)
	elemental real function atan2d(x,y)

	elemental double function norm_angle_rad(radians)
	elemental real|double function norm_angle_deg(radians)

	subroutine cartesian_to_spherical(x,y,z,radius,inclination,azimuth)
	subroutine spherical_to_cartesian(radius,inclination,azimuth,x,y,z)
	subroutine cartesian_to_polar(x,y,radius,inclination)
	subroutine polar_to_cartesian(radius,inclination,x,y)


CONSTANTS SYNOPSIS
  function nan() function inf() function is_nan() function is_even()

  Simple constants:

      e,gamma,euler,golden_ratio,pi
      deg_per_rad, rad_per_deg
      c__m_per_sec, c__ft_per_sec


DESCRIPTION
  M_units(3fm) is a Fortran module that collects together basic procedures
  that are used to convert between various physical units and common named
  constants.

  The input values may be any standard scalar value supported by the
  anyscalar_to_real(3f) function (real,integer,doubleprecision) within the
  range allowed by the function.

PROCEDURES
  Angular Units

    •  d2r: Convert degrees to radians

    •  r2d: Convert radians to degrees

  Temperature

    •  c2f: Convert Celsius to Fahrenheit

    •  f2c: Convert Fahrenheit to Celsius

  Distance

    •  feet_to_meters: Convert feet to meters

    •  meters_to_feet: Convert meters to feet

  REAL trig functions where input is in angular degrees instead of radians

    •  elemental real function sind(angle_in_degrees)

    •  elemental real function cosd(angle_in_degrees)

    •  elemental real function tand(angle_in_degrees)

    •  elemental real function asind(x)

    •  elemental real function acosd(x)

    •  elemental real function atand(x)

    •  elemental real function atan2d(x,y)

  Normalize angles into specific ranges

    •  elemental double function norm_angle_rad(angle_in_radians)

    •  elemental real|double function norm_angle_deg(angle_in_degrees)

  Coordinates

    •  cartesian_to_spherical: Convert cartesian coordinates to spherical

    •  spherical: Convert spherical coordinates to cartesian

    •  cartesian_to_polar: Convert cartesian coordinates to polar

    •  polar: Convert polar coordinates to cartesian

  Note that your compiler is less likely to inline small procedures in a
  module than it would statement functions or CONTAINED functions.

CONSTANTS
  c__m_per_sec
    Speed of light in a vacuum

  c__ft_per_sec
    Speed of light in a vacuum "deg_per_rad" "rad_per_deg"

  e The base of the natural logarithm system. "e" was named in honor of Euler,
    but is known as Napier's constant.	"euler"

  gamma
    The Euler-Mascheroni constant is often denoted by a lower-case Gamma.
    "golden_ratio"

  pi
    The ratio of the circumference of a circle to the diameter of the circle

NOTES
  Gamma is defined as

     Gamma = limit ( M -> Infinity ) ( Sum ( 1 <= N <= M ) 1 / N ) - Log ( M )


EXAMPLES
  Simple usage example:

     program demo_M_units
     use M_units, only : r2d, d2r
     use M_units, only : f2c, c2f
     use M_units, only : sind, cosd, tand
     use M_units, only : asind, acosd, atand, atan2d
     !!
     use M_units, only : pi8=>pi
     use M_units, only : e,euler,golden_ratio,deg_per_rad,rad_per_deg
     use M_units, only : c__m_per_sec, c__ft_per_sec
     !!
     implicit none
     real pi
     pi=pi8
     write(*,*)r2d([0.0,PI/4.0,PI/2.0,3.0*PI/2.0,PI])
     write(*,*)d2r([0.0,45.0,90.0,135.0,180.0])
     write(*,*)f2c([-40.0,32.0,212.0])
     write(*,*)c2f([-40.0,0.0,100.0])
     write(*,*)PI
     write(*,*)E
     !!
     write(*,101) "Napier's constant (e) is about ",e
     write(*,101) "The Euler-Mascheroni constant (euler or gamma) is about ",euler
     write(*,101) "pi (pi) is about ",pi8
     write(*,101) "The Golden Ratio (golden_ratio) is about ",golden_ratio
     write(*,101) "Deg_Per_Rad is about ",Deg_Per_Rad
     write(*,101) "Rad_Per_Deg is about ",Rad_Per_Deg
     !!
     write(*,101) "Speed of light in a vacuum (m/sec)	    ", c__m_per_sec
     write(*,101) "Speed of light in a vacuum (ft/sec)	    ", c__ft_per_sec
     !!
     101 format(a,t57,g0)
     !!
     end program demo_M_units

  Results:

     >	 0.00000000	  45.0000000	   90.0000000	    270.000000	     180.000000
     >	 0.00000000	 0.785398185	   1.57079637	    2.35619450	     3.14159274
     >	-40.0000000	  0.00000000	   100.000000
     >	-40.0000000	  32.0000000	   212.000000
     >	 3.14159274
     >	 2.7182818284590451
     >Napier's constant (e) is about			      2.7182818284590451
     >The Euler-Mascheroni constant (euler or gamma) is about 0.57721566490153287
     >pi (pi) is about					      3.1415926535897931
     >The Golden Ratio (golden_ratio) is about		      1.6180339887498949
     >Deg_Per_Rad is about				      57.295779513082323
     >Rad_Per_Deg is about				      0.17453292519943295E-001
     >Speed of light in a vacuum (m/sec)		      299792458.00000000
     >Speed of light in a vacuum (ft/sec)		      983571056.00000000




				 May 26, 2023		     M_units(3m_units)
meters_to_feet(3m_units)			      meters_to_feet(3m_units)



NAME
  meters_to_feet(3f) - [M_units:LENGTH] converts a measurement in meters to
  feet (LICENSE:PD)

SYNOPSIS
  elemental real function meters_to_feet(meters)

      class(*),intent(in) :: meters

DESCRIPTION
  Converts feet to meters using the formula:

      feet= meters/12.0/0.0254

OPTIONS
  feet
    any standard scalar value supported by anyscalar_to_real(3f).  This at
    least includes REAL, INTEGER, and DOUBLEPRECISION.

EXAMPLE
  Sample program

     program demo_meters_to_feet
     use M_units, only : meters_to_feet
     implicit none
	write(*,*)'With REAL array input    ', meters_to_feet([ -1.0, 0.0, 1.0 ])
	write(*,*)'With INTEGER array input ', meters_to_feet([ -1,   0,   1   ])
	write(*,*)'With DOUBLEPRECISION     ', meters_to_feet(-1.0d0),meters_to_feet(0.0d0),meters_to_feet(1.0d0)
     end program demo_meters_to_feet

  Results

      With REAL array input	 -3.28083992	   0.00000000	    3.28083992
      With INTEGER array input	 -3.28083992	   0.00000000	    3.28083992
      With DOUBLEPRECISION	 -3.28083992	   0.00000000	    3.28083992


AUTHOR
  John S. Urban

LICENSE
  Public Domain



				 May 26, 2023	      meters_to_feet(3m_units)
nan(3m_units)							 nan(3m_units)



NAME
  nan(3f) - [M_units] return a NaN (Not a number) (LICENSE:PD)

SYNOPSIS
  function nan(value) use,intrinsic :: iso_fortran_env, only: real32, real64,
  real128 real(kind=real32|real64|real128) :: nan
  real(kind=real32|real64|real128) :: value

DESCRIPTION
  Return a NaN (Not a number) value. The type returned will be the same kind
  as the passed value.

  At some point, the IEEE interface should work, with something like

      use,intrinsic :: ieee_arithmetic, only : ieee_value, ieee_quiet_nan
      use,intrinsic :: ieee_arithmetic, only : ieee_support_nan

      if(IEEE_SUPPORT_NAN(x))then	 ! Are IEEE NaNs supported?
	 x=IEEE_VALUE(x,ieee_quiet_nan)  ! Generate an IEEE value.
      endif


OPTIONS
  value
    A real value whose kind is used to define the kind of the returned value.

RETURNS
  nan
    returns a Nan value ("Not a number") on platforms that support NaN values.
    The kind is determined by the kind of the input value.

EXAMPLE
  Sample program

     program demo_nan
     use,intrinsic :: iso_fortran_env, only: real32, real64, real128
     use M_units, only : nan
     implicit none
     real(kind=real32)	:: r32
     real(kind=real64)	:: r64
     real(kind=real128) :: r128
     character(len=256) :: message
     integer		:: ios

	r32=nan(0.0_real32)
	r64=nan(0.0_real64)
	r128=nan(0.0_real128)

	! examples printing the NaN values
	! list directed format
	write(*,*,iomsg=message,iostat=ios)r32,r64,r128
	if(ios.ne.0)write(*,*)trim(message)
	! hexadecimal format to show different kinds
	write(*,'(*(z0,1x))',iomsg=message,iostat=ios)r32,r64,r128
	if(ios.ne.0)write(*,*)trim(message)
	! G0 format
	write(*,'(*(g0,1x))',iomsg=message,iostat=ios)r32,r64,r128
	if(ios.ne.0)write(*,*)trim(message)
	! if a specific numeric field is used
	write(*,'(*(f3.1,1x))',iomsg=message,iostat=ios)r32,r64,r128
	if(ios.ne.0)write(*,*)trim(message)
	! if format is less than three characters
	write(*,'(*(f2.1,1x))',iomsg=message,iostat=ios)r32,r64,r128
	if(ios.ne.0)write(*,*)trim(message)

	! an option to terminate a program when a NaN is encountered
	! (if X is NaN the comparison with 0. is always false.)
	if (.not.(r32<=0.0) .and. .not.(r32>=0.0))then
	   write(*,*)'found nan'
	   stop
	endif

	ALT1: block
	   integer :: x = 2143289344
	   print *, transfer(x, 1.0)	! prints "nan" on i686
	endblock ALT1

     end program demo_nan

  Results:

     NaN      NaN	       NaN
     7FC00000 7FF8000000000000 7FFF8000000000000000000000000000
     NaN NaN NaN
     NaN NaN NaN
     ** ** **
      found nan


SEE ALSO
  IS_NAN(3f)

AUTHOR
  John S. Urban

LICENSE
  Public Domain



				 May 26, 2023			 nan(3m_units)
norm_angle_deg(3m_units)			      norm_angle_deg(3m_units)



NAME
  norm_angle_deg(3f) - [M_units:TRIGONOMETRY] Return input angle given in
  degrees as angle between 0 and 360 (LICENSE:PD)


SYNOPSIS
  elemental function norm_angle_deg(ang) result(rev)

      doubleprecision, intent(in) :: ang
      doubleprecision		  :: rev
	 or
      real, intent(in) :: ang
      real	       :: rev
	 or
      integer, intent(in) :: ang
      integer		  :: rev


DESCRIPTION
  Given an input angle in degrees, normalize the value to fall in the range 0
  to 360 degrees.

OPTIONS
  ang
    Input angle (degrees)

RESULTS
  rev
    Return input angle (degrees) normalized to range 0 to 360 degrees

EXAMPLE
  Sample program:

     program demo_norm_angle_deg
     use M_units, only : norm_angle_deg
     implicit none
     real,parameter :: PI=360
     real	    :: val
     integer	    :: i
     do i=-2,2
	val=i*2*pi;   write(*,*)val,norm_angle_deg(val)
	val=i*pi;     write(*,*)val,norm_angle_deg(val)
	val=i*pi/2;   write(*,*)val,norm_angle_deg(val)
	write(*,*)
     enddo
     end program demo_norm_angle_deg

  Results:

       -1440.00000	 0.00000000
       -720.000000	 0.00000000
       -360.000000	 0.00000000

       -720.000000	 0.00000000
       -360.000000	 0.00000000
       -180.000000	 180.000000

	0.00000000	 0.00000000
	0.00000000	 0.00000000
	0.00000000	 0.00000000

	720.000000	 0.00000000
	360.000000	 0.00000000
	180.000000	 180.000000

	1440.00000	 0.00000000
	720.000000	 0.00000000
	360.000000	 0.00000000


LICENSE
  MIT License



				 May 26, 2023	      norm_angle_deg(3m_units)
c2f(3m_units)							 c2f(3m_units)



NAME
  c2f(3f) - [M_units:TEMPERATURE] convert Celsius to Fahrenheit (LICENSE:PD)

SYNOPSIS
  elemental real function c2f(celsius)

      class(*),intent(in) :: celsius

DESCRIPTION
  Converts Celsius temperatures to Fahrenheit using the formula:

      fahrenheit=(celsius+40.0)*9.0/5.0 - 40.0

OPTIONS
  celsius
    any standard scalar value supported by anyscalar_to_real(3f).

EXAMPLE
  Sample program

     program demo_c2f
     use M_units, only : c2f
     implicit none
	write(*,*)'With REAL array input    ', c2f([ -40.0, 0.0, 100.0 ])
	write(*,*)'With INTEGER array input ', c2f([ -40,   0,	 100   ])
	write(*,*)'With DOUBLEPRECISION     ', c2f(-40.0d0),c2f(0.0d0),c2f(100.0d0)
     end program demo_c2f

  Results

     With REAL array input	-40.0000000	  32.0000000	   212.000000
     With INTEGER array input	-40.0000000	  32.0000000	   212.000000
     With DOUBLEPRECISION	-40.0000000	  32.0000000	   212.000000

AUTHOR
  John S. Urban

LICENSE
  Public Domain



				 May 26, 2023			 c2f(3m_units)
cartesian_to_polar(3m_units)			  cartesian_to_polar(3m_units)



NAME
  cartesian_to_polar(3f) - [M_units:TRIGONOMETRY] convert Cartesian
  coordinates to polar coordinates (LICENSE:PD)

SYNOPSIS
  subroutine cartesian_to_polar(x,y,radius,inclination)

      real,intent(in)  :: y,z
      real,intent(out) :: radius,inclination


DESCRIPTION
  Convert a cartesian point <X,Y,Z> to polar coordinates <radius, inclination>
  with angles in radians using the formulas

	radius=sqrt(x**2+y**2)
	inclination=atan2(y,x)


OPTIONS
  X The distance along the x-axis

  Y The distance along the y-axis

RESULTS
  RADIUS
    The radial distance from the origin (O) to the point (P)

  INCLINATION
    The inclination angle in radians between the inclination reference
    direction (x-axis) and the orthogonal projection of the line OP of the
    reference plane (x-y plane).

EXAMPLES
  examples of usage

     program demo_cartesian_to_polar
     use M_units, only : cartesian_to_polar
     implicit none
     real    :: x,y
     real    :: r,i
     integer :: ios
     INFINITE: do
	read(*,*,iostat=ios) x, y
	if(ios.ne.0)exit INFINITE
	call cartesian_to_polar(x,y,r,i)
	write(*,*)'x=',x,' y=',y,'radius=',r,'inclination=',i
     enddo INFINITE
     end program demo_cartesian_to_polar

AUTHOR
  John S. Urban

LICENSE
  Public Domain



				 May 26, 2023	  cartesian_to_polar(3m_units)
cartesian_to_spherical(3m_units)	      cartesian_to_spherical(3m_units)



NAME
  cartesian_to_spherical(3f) - [M_units:TRIGONOMETRY] convert Cartesian
  coordinates to ISO polar coordinates (LICENSE:PD)

SYNOPSIS
  subroutine cartesian_to_spherical(x,y,z,radius,inclination,azimuth)

      real,intent(in)  :: x,y,z
      real,intent(out) :: radius,inclination,azimuth


DESCRIPTION
  Convert a cartesian point <X,Y,Z> to ISO 8000-2:2009 polar coordinates
  <radius, inclination, azimuth> with angles in radians using the formulas

	radius=sqrt(x**2+y**2+z**2)
	inclination=acos(z/radius)
	azimuth=atan2(y,x)


OPTIONS
  X The distance along the x-axis

  Y The distance along the y-axis

  Z The distance along the z-axis

RESULTS
  RADIUS
    The radial distance from the origin (O) to the point (P)

  INCLINATION
    The zenith angle in radians between the zenith reference direction (z-
    axis) and the line OP

  AZIMUTH
    The azimuth angle in radians between the azimuth reference direction (x-
    axis) and the orthogonal projection of the line OP of the reference plane
    (x-y plane).

EXAMPLES
  examples of usage

     program demo_cartesian_to_spherical
     use M_units, only : cartesian_to_spherical
     implicit none
     real    :: x,y,z
     real    :: r,i,a
     integer :: ios
     INFINITE: do
	read(*,*,iostat=ios) x, y, z
	if(ios.ne.0)exit INFINITE
	call cartesian_to_spherical(x,y,z,r,i,a)
	write(*,*)'x=',x,' y=',y,' z=',z,'radius=',r,'inclination=',i,'azimuth=',a
     enddo INFINITE
     end program demo_cartesian_to_spherical

AUTHOR
  John S. Urban

LICENSE
  Public Domain



				 May 26, 2023 cartesian_to_spherical(3m_units)
atan2d(3m_units)					      atan2d(3m_units)



NAME
  atan2d(3f) - [M_units:TRIGONOMETRY] calculate arctangent of the complex
  number X + i Y (LICENSE:PD)

SYNOPSIS
  elemental real function atan2d(x,y)

      class(*),intent(in) :: x
      class(*),intent(in) :: y

DESCRIPTION
  Calculate arctangent of arctangent of the complex number

	X + i Y.

  in degrees. It calls atan2(3f) and converts the output from radians to
  degrees.

OPTIONS
  X any standard scalar value supported by anyscalar_to_double(3f)

  Y any standard scalar value supported by anyscalar_to_double(3f)

EXAMPLE
  Sample program:

	    program demo_atan2d
	    use M_units, only : atan2d
	    real(4) :: x = 1.e0_4, y = 0.5e0_4
	      write(*,*)atan2d(y,x)
	    end program demo_atan2d
  Results:

	26.5650501


AUTHOR
  John S. Urban

LICENSE
  Public Domain



				 May 26, 2023		      atan2d(3m_units)
acosd(3m_units) 					       acosd(3m_units)



NAME
  acosd(3f) - [M_units:TRIGONOMETRY] calculate arccosine of value in degrees
  (LICENSE:PD)

SYNOPSIS
  elemental real function acosd(value)

      class(*),intent(in) :: value

DESCRIPTION
  Calculate arcsine of input value in degrees. It converts the input value
  from degrees to radians and calls acos(3f).

OPTIONS
  value
    any standard scalar value supported by anyscalar_to_double(3f)

EXAMPLE
  Sample program

     program demo_acosd
     use M_units, only :  acosd, cosd
     implicit none
	write(*, *)	  cosd(0.0),cosd(45.0),cosd(120.0),cosd(180.0),cosd(720.0)
	write(*, *)acosd([cosd(0.0),cosd(45.0),cosd(120.0),cosd(180.0),cosd(720.0) ])
     end program demo_acosd

  Results

	1.00000000	0.707106769	-0.500000000	  -1.00000000	    1.00000000
	0.00000000	 45.0000000	  120.000000	   180.000000	    0.00000000


AUTHOR
  John S. Urban

LICENSE
  Public Domain



				 May 26, 2023		       acosd(3m_units)
+ echo '>>>> run make'
>>>> run make
+ cd ..
+ make clean
make: *** No rule to make target 'clean'.  Stop.
+ make F90=gfortran gfortran
make: *** No rule to make target 'gfortran'.  Stop.
+ make doxygen
make: *** No rule to make target 'doxygen'.  Stop.
+ make man
make: *** No rule to make target 'man'.  Stop.
+ make ship
make: *** No rule to make target 'ship'.  Stop.
+ make help
make: *** No rule to make target 'help'.  Stop.
+ make clean
make: *** No rule to make target 'clean'.  Stop.
+ echo '>>>> fpm test'
>>>> fpm test
+ cd ../..
+ fpm test
 + mkdir -p build/dependencies
Initialized empty Git repository in /home/urbanjs/venus/V600/github/M_framework/candidates/M_units/build/dependencies/M_anything/.git/
From https://github.com/urbanjost/M_anything
 * branch            HEAD       -> FETCH_HEAD
Initialized empty Git repository in /home/urbanjs/venus/V600/github/M_framework/candidates/M_units/build/dependencies/M_framework/.git/
From https://github.com/urbanjost/M_framework
 * branch            HEAD       -> FETCH_HEAD
[  0%]                    C-M_units.c
[  1%]                    C-M_units.c  done.
[  1%]                       main.f90
[  2%]                       main.f90  done.
[  2%]                      check.f90
[  4%]                      check.f90  done.
[  4%]                 M_anything.F90
[  5%]                 M_anything.F90  done.
[  5%]           M_framework__msg.F90
[  7%]           M_framework__msg.F90  done.
[  7%]       M_framework__utility.f90
[  8%]       M_framework__utility.f90  done.
[  8%]                    M_units.F90
[  9%]                    M_units.F90  done.
[  9%]        M_framework__verify.F90
[ 11%]        M_framework__verify.F90  done.
[ 11%]       M_framework__journal.f90
[ 12%]       M_framework__journal.f90  done.
[ 12%]                 demo_asind.f90
[ 14%]                 demo_asind.f90  done.
[ 14%]                   demo_r2d.f90
[ 15%]                   demo_r2d.f90  done.
[ 15%]                   demo_inf.f90
[ 16%]                   demo_inf.f90  done.
[ 16%] demo_cartesian_to_spherical.f9
[ 18%] demo_cartesian_to_spherical.f9  done.
[ 18%]                  demo_sind.f90
[ 19%]                  demo_sind.f90  done.
[ 19%]                   demo_d2r.f90
[ 21%]                   demo_d2r.f90  done.
[ 21%]                demo_is_nan.f90
[ 22%]                demo_is_nan.f90  done.
[ 22%]               demo_is_even.f90
[ 23%]               demo_is_even.f90  done.
[ 23%]    demo_polar_to_cartesian.f90
[ 25%]    demo_polar_to_cartesian.f90  done.
[ 25%]                demo_atan2d.f90
[ 26%]                demo_atan2d.f90  done.
[ 26%]        demo_symbol2atomnum.f90
[ 28%]        demo_symbol2atomnum.f90  done.
[ 28%]                   demo_nan.f90
[ 29%]                   demo_nan.f90  done.
[ 29%]        demo_feet_to_meters.f90
[ 30%]        demo_feet_to_meters.f90  done.
[ 30%]    demo_cartesian_to_polar.f90
[ 32%]    demo_cartesian_to_polar.f90  done.
[ 32%]   demo_pounds_to_kilograms.f90
[ 33%]   demo_pounds_to_kilograms.f90  done.
[ 33%]                 demo_acosd.f90
[ 35%]                 demo_acosd.f90  done.
[ 35%]                   demo_f2c.f90
[ 36%]                   demo_f2c.f90  done.
[ 36%]        demo_norm_angle_deg.f90
[ 38%]        demo_norm_angle_deg.f90  done.
[ 38%]                  demo_cosd.f90
[ 39%]                  demo_cosd.f90  done.
[ 39%]                  demo_tand.f90
[ 40%]                  demo_tand.f90  done.
[ 40%] demo_spherical_to_cartesian.f9
[ 42%] demo_spherical_to_cartesian.f9  done.
[ 42%]        demo_norm_angle_rad.f90
[ 43%]        demo_norm_angle_rad.f90  done.
[ 43%]                 demo_atand.f90
[ 45%]                 demo_atand.f90  done.
[ 45%]                   demo_c2f.f90
[ 46%]                   demo_c2f.f90  done.
[ 46%]               demo_M_units.f90
[ 47%]               demo_M_units.f90  done.
[ 47%]        demo_atomnum2symbol.f90
[ 49%]        demo_atomnum2symbol.f90  done.
[ 49%]        demo_meters_to_feet.f90
[ 50%]        demo_meters_to_feet.f90  done.
[ 50%]          M_framework__help.f90
[ 52%]          M_framework__help.f90  done.
[ 52%]        M_framework__approx.F90
[ 53%]        M_framework__approx.F90  done.
[ 53%]    M_Compare_Float_Numbers.f90
[ 54%]    M_Compare_Float_Numbers.f90  done.
[ 54%]                M_framework.f90
[ 56%]                M_framework.f90  done.
[ 56%]                   libM_units.a
[ 57%]                   libM_units.a  done.
[ 57%]         test_suite_M_units.f90
[ 59%]         test_suite_M_units.f90  done.
 
test/test_suite_M_units.f90:180:32:

  180 | use M_framework__verify,  only : accdig
      |                                1
Error: Symbol ‘accdig’ referenced at (1) not found in module ‘m_framework__verify’
test/test_suite_M_units.f90:10:35:

   10 |    call testit_p('pi',      real(PI)      ,  real(3.141592653589793238462643383279500d0)  ,message='')
      |                                   1
Error: Symbol ‘pi’ at (1) has no IMPLICIT type
compilation terminated due to -fmax-errors=1.
<ERROR> Compilation failed for object " test_test_suite_M_units.f90.o "
<ERROR> stopping due to failed compilation
1
+ echo '>>>> make BOOK html document'
>>>> make BOOK html document
+ env MANPATH=../../man mandb -c
mandb: warning: $MANPATH set, ignoring /etc/manpath.config
Updating index cache for path `/home/urbanjs/venus/V600/github/M_framework/candidates/M_units/src/source/../../man/man1'. Wait...
Updating index cache for path `/home/urbanjs/venus/V600/github/M_framework/candidates/M_units/src/source/../../man/man3'. Wait...
Processing manual pages under /home/urbanjs/venus/V600/github/M_framework/candidates/M_units/src/source/../../man...
Updating index cache for path `/home/urbanjs/venus/V600/github/M_framework/candidates/M_units/src/source/../../man/man2'. Wait...
Updating index cache for path `/home/urbanjs/venus/V600/github/M_framework/candidates/M_units/src/source/../../man/man4'. Wait...
Updating index cache for path `/home/urbanjs/venus/V600/github/M_framework/candidates/M_units/src/source/../../man/man6'. Wait...
Updating index cache for path `/home/urbanjs/venus/V600/github/M_framework/candidates/M_units/src/source/../../man/man7'. Wait...
Updating index cache for path `/home/urbanjs/venus/V600/github/M_framework/candidates/M_units/src/source/../../man/man8'. Wait...
Updating index cache for path `/home/urbanjs/venus/V600/github/M_framework/candidates/M_units/src/source/../../man/man5'. Wait...
done.
Checking for stray cats under /home/urbanjs/venus/V600/github/M_framework/candidates/M_units/src/source/../../man...
Processing manual pages under /home/urbanjs/venus/V600/github/M_framework/candidates/M_units/src/source/../../man/cat8...
Processing manual pages under /home/urbanjs/venus/V600/github/M_framework/candidates/M_units/src/source/../../man/cat1...
Processing manual pages under /home/urbanjs/venus/V600/github/M_framework/candidates/M_units/src/source/../../man/cat3...
Processing manual pages under /home/urbanjs/venus/V600/github/M_framework/candidates/M_units/src/source/../../man/cat4...
Processing manual pages under /home/urbanjs/venus/V600/github/M_framework/candidates/M_units/src/source/../../man/cat6...
Processing manual pages under /home/urbanjs/venus/V600/github/M_framework/candidates/M_units/src/source/../../man/cat2...
Processing manual pages under /home/urbanjs/venus/V600/github/M_framework/candidates/M_units/src/source/../../man/cat5...
Processing manual pages under /home/urbanjs/venus/V600/github/M_framework/candidates/M_units/src/source/../../man/cat7...
8 man subdirectories contained newer manual pages.
28 manual pages were added.
0 stray cats were added.
+ env OUTPUT_DIR=../../docs/ MAN_CMD=man MANPATH=../../man GPF_book M_units m_units
Creating book M_units
                                                        
                                                        
 XX   XX                            X                   
  X   X                                    X            
  XX XX                                    X            
  XX XX          XX  XX  XX XX    XXX     XXXX    XXXXX 
  X X X           X   X   XX  X     X      X     X     X
  X X X           X   X   X   X     X      X      XXX   
  X   X           X   X   X   X     X      X         XX 
  X   X           X  XX   X   X     X      X  X  X     X
 XXX XXX           XX XX XXX XXX  XXXXX     XX    XXXXX 
                                                        
        XXXXXXXX                                        
/home/urbanjs/venus/V600/github/github_scripts/bash/GPF_book:
________________________________________________________________________________
   TOPIC      M_units
   SECTION    m_units
   OUTPUT_DIR ../../docs/
   MAN_CMD    man
   MANPATH    ../../man
________________________________________________________________________________
+ HTML
+ cat
+ cat
++ date +%Y-%m-%d
+ cat
+ cat
+ cat
+ echo 'function loadthem(){'
+ uniq
+ read NAME
+ '[' M_units = INDEX ']'
+ echo M_units.3m_units.html
+ awk '{printf "%s.%s.html\n",$1,$2}'
+ tr -d '()'
+ uniq
+ env LC_ALL=C /usr/bin/sort -k 2r,2r -k 1,1
+ man -k '\[M_units\>'
+ grep -i '(3M_units)'
+ man --section 3m_units -k .
+ grep -i '(3M_units)'
+ man -k '\[M_units\>'
+ env LC_ALL=C /usr/bin/sort -k 2r,2r -k 1,1
+ grep -vi '(3M_units)'
+ '[' -r ../../docs//M_units.3m_units.html..html ']'
+ read NAME
+ '[' -r ../../docs//M_units.3m_units.html ']'
+ echo 'append("M_units.3m_units.html");'
+ read NAME
+ '[' -r ../../docs//acosd.3m_units.html ']'
+ echo 'append("acosd.3m_units.html");'
+ read NAME
+ '[' -r ../../docs//asind.3m_units.html ']'
+ echo 'append("asind.3m_units.html");'
+ read NAME
+ '[' -r ../../docs//atan2d.3m_units.html ']'
+ echo 'append("atan2d.3m_units.html");'
+ read NAME
+ '[' -r ../../docs//atand.3m_units.html ']'
+ echo 'append("atand.3m_units.html");'
+ read NAME
+ '[' -r ../../docs//atomnum2symbol.3m_units.html ']'
+ echo 'append("atomnum2symbol.3m_units.html");'
+ read NAME
+ '[' -r ../../docs//c2f.3m_units.html ']'
+ echo 'append("c2f.3m_units.html");'
+ read NAME
+ '[' -r ../../docs//cartesian_to_polar.3m_units.html ']'
+ echo 'append("cartesian_to_polar.3m_units.html");'
+ read NAME
+ '[' -r ../../docs//cartesian_to_spherical.3m_units.html ']'
+ echo 'append("cartesian_to_spherical.3m_units.html");'
+ read NAME
+ '[' -r ../../docs//cosd.3m_units.html ']'
+ echo 'append("cosd.3m_units.html");'
+ read NAME
+ '[' -r ../../docs//d2r.3m_units.html ']'
+ echo 'append("d2r.3m_units.html");'
+ read NAME
+ '[' -r ../../docs//f2c.3m_units.html ']'
+ echo 'append("f2c.3m_units.html");'
+ read NAME
+ '[' -r ../../docs//feet_to_meters.3m_units.html ']'
+ echo 'append("feet_to_meters.3m_units.html");'
+ read NAME
+ '[' -r ../../docs//inf.3m_units.html ']'
+ echo 'append("inf.3m_units.html");'
+ read NAME
+ '[' -r ../../docs//is_even.3m_units.html ']'
+ echo 'append("is_even.3m_units.html");'
+ read NAME
+ '[' -r ../../docs//is_nan.3m_units.html ']'
+ echo 'append("is_nan.3m_units.html");'
+ read NAME
+ '[' -r ../../docs//meters_to_feet.3m_units.html ']'
+ echo 'append("meters_to_feet.3m_units.html");'
+ read NAME
+ '[' -r ../../docs//nan.3m_units.html ']'
+ echo 'append("nan.3m_units.html");'
+ read NAME
+ '[' -r ../../docs//norm_angle_deg.3m_units.html ']'
+ echo 'append("norm_angle_deg.3m_units.html");'
+ read NAME
+ '[' -r ../../docs//norm_angle_rad.3m_units.html ']'
+ echo 'append("norm_angle_rad.3m_units.html");'
+ read NAME
+ '[' -r ../../docs//polar_to_cartesian.3m_units.html ']'
+ echo 'append("polar_to_cartesian.3m_units.html");'
+ read NAME
+ '[' -r ../../docs//pounds_to_kilograms.3m_units.html ']'
+ echo 'append("pounds_to_kilograms.3m_units.html");'
+ read NAME
+ '[' -r ../../docs//r2d.3m_units.html ']'
+ echo 'append("r2d.3m_units.html");'
+ read NAME
+ '[' -r ../../docs//sind.3m_units.html ']'
+ echo 'append("sind.3m_units.html");'
+ read NAME
+ '[' -r ../../docs//spherical_to_cartesian.3m_units.html ']'
+ echo 'append("spherical_to_cartesian.3m_units.html");'
+ read NAME
+ '[' -r ../../docs//symbol2atomnum.3m_units.html ']'
+ echo 'append("symbol2atomnum.3m_units.html");'
+ read NAME
+ '[' -r ../../docs//tand.3m_units.html ']'
+ echo 'append("tand.3m_units.html");'
+ read NAME
+ echo '}'
+ exit
+ echo '>>>> make HTML index to manpages'
>>>> make HTML index to manpages
+ env MANPATH=../../man OUTDIR=../../docs GPF_manpage_index
making HTML index for section 1 in ../../docs/man1.html
FOUND 0 for section 1
making HTML index for section 2 in ../../docs/man2.html
FOUND 0 for section 2
making HTML index for section 3 in ../../docs/man3.html
FOUND 28 for section 3
<GPF_manpage_index><MANPATH>../../man
<GPF_manpage_index><NAME>M_constants<SECT>(3m_constants)<DASH>-
<GPF_manpage_index><NAME>M_units<SECT>(3m_units)<DASH>-
<GPF_manpage_index><NAME>feet_to_meters<SECT>(3m_units)<DASH>-
<GPF_manpage_index><NAME>meters_to_feet<SECT>(3m_units)<DASH>-
<GPF_manpage_index><NAME>pounds_to_kilograms<SECT>(3m_units)<DASH>-
<GPF_manpage_index><NAME>atomnum2symbol<SECT>(3m_units)<DASH>-
<GPF_manpage_index><NAME>symbol2atomnum<SECT>(3m_units)<DASH>-
<GPF_manpage_index><NAME>c2f<SECT>(3m_units)<DASH>-
<GPF_manpage_index><NAME>f2c<SECT>(3m_units)<DASH>-
<GPF_manpage_index><NAME>acosd<SECT>(3m_units)<DASH>-
<GPF_manpage_index><NAME>asind<SECT>(3m_units)<DASH>-
<GPF_manpage_index><NAME>atan2d<SECT>(3m_units)<DASH>-
<GPF_manpage_index><NAME>atand<SECT>(3m_units)<DASH>-
<GPF_manpage_index><NAME>cartesian_to_polar<SECT>(3m_units)<DASH>-
<GPF_manpage_index><NAME>cartesian_to_spherical<SECT>(3m_units)<DASH>-
<GPF_manpage_index><NAME>cosd<SECT>(3m_units)<DASH>-
<GPF_manpage_index><NAME>d2r<SECT>(3m_units)<DASH>-
<GPF_manpage_index><NAME>norm_angle_deg<SECT>(3m_units)<DASH>-
<GPF_manpage_index><NAME>norm_angle_rad<SECT>(3m_units)<DASH>-
<GPF_manpage_index><NAME>polar_to_cartesian<SECT>(3m_units)<DASH>-
<GPF_manpage_index><NAME>r2d<SECT>(3m_units)<DASH>-
<GPF_manpage_index><NAME>sind<SECT>(3m_units)<DASH>-
<GPF_manpage_index><NAME>spherical_to_cartesian<SECT>(3m_units)<DASH>-
<GPF_manpage_index><NAME>tand<SECT>(3m_units)<DASH>-
<GPF_manpage_index><NAME>inf<SECT>(3m_units)<DASH>-
<GPF_manpage_index><NAME>is_even<SECT>(3m_units)<DASH>-
<GPF_manpage_index><NAME>is_nan<SECT>(3m_units)<DASH>-
<GPF_manpage_index><NAME>nan<SECT>(3m_units)<DASH>-
making HTML index for section 4 in ../../docs/man4.html
FOUND 0 for section 4
making HTML index for section 5 in ../../docs/man5.html
FOUND 0 for section 5
making HTML index for section 6 in ../../docs/man6.html
FOUND 0 for section 6
making HTML index for section 7 in ../../docs/man7.html
FOUND 0 for section 7
making HTML index for section 8 in ../../docs/man8.html
FOUND 0 for section 8
making HTML index for Fortran Intrinsics for section 3 in ../../docs/man3i.html
FOUND 0 for section 3
making HTML index for Fortran Intrinsics for section 7 in ../../docs/man7i.html
FOUND 0 for section 7
sed: can't read ../../docs/*.[37]fortran.html: No such file or directory
+ echo '>>>> spell check'
>>>> spell check
+ column -t
+ spell ../../README.md
+ xargs -n 8
+ echo '>>>> update GPF project and documents'
>>>> update GPF project and documents
+ unset GITHUB
+ make.one libGPF
1760781 (process ID) old priority 0, new priority 19
W-A-R-N-I-N-G: no ccheck.c file (required for configured versions)
+ echo '>>>> run test'
>>>> run test
+ cd ../../test
+ ccall test_suite_M_units.f90
*ccall*: MAKING TEMPORARY DIRECTORY /tmp/CCALL_Linux_gfortran_1775299
+ mkdir -m 755 -p /tmp/CCALL_Linux_gfortran_1775299
+ chmod u=xrw,g-xrw,o-xrw /tmp/CCALL_Linux_gfortran_1775299
+ CCALL_DELETE_DIR=TRUE
+ FULLNAME=/tmp/CCALL_Linux_gfortran_1775299/test_suite_M_units.1775299.f90
+ SPLIT
+ sed -e 's/ -/@ -/g'
+ tr @ '\012'
+ cp test_suite_M_units.f90 /tmp/CCALL_Linux_gfortran_1775299/test_suite_M_units.1775299.f90
+ echo NAME test_suite_M_units.f90
NAME test_suite_M_units.f90
+ echo /home/urbanjs/venus/V600/bin/Linux_gfortran/test_suite_M_units
/home/urbanjs/venus/V600/bin/Linux_gfortran/test_suite_M_units
+ ADDOPTIONS /tmp/CCALL_Linux_gfortran_1775299/test_suite_M_units.1775299.f90
+ INPUTFILENAME=/tmp/CCALL_Linux_gfortran_1775299/test_suite_M_units.1775299.f90
+ grep
 -qi '\<use\>  *\<M_readline\>' /tmp/CCALL_Linux_gfortran_1775299/test_suite_M_units.1775299.f90
+ grep
 -qi '\<use\>  *\<M_curl\>' /tmp/CCALL_Linux_gfortran_1775299/test_suite_M_units.1775299.f90
+ set
 -x
+ set
 -v
+ gfortran
 -fbacktrace
 -fdump-core
 -frecord-marker=4
 -I.
 -DTESTPRG
 -DTESTPRG90 /tmp/CCALL_Linux_gfortran_1775299/test_suite_M_units.1775299.f90
 -o /home/urbanjs/venus/V600/bin/Linux_gfortran/test_suite_M_units
 -Wall
 -Wextra
 -Bstatic
 -I/home/urbanjs/venus/V600/lib/Linux_gfortran
 -J/home/urbanjs/venus/V600/lib/Linux_gfortran
 -L/home/urbanjs/venus/V600/lib/Linux_gfortran
 -lkon
 -lDL
 -lMULTI
 -lrandlib
 -lrandlibf90
 -lncarsa
 -lvopl
 -lGPF
 -lGPF_C
 -lncurses
 -lcurl
 -lSTUG
 -lsqlite3
 -lquadmath
 -lm
 -Wunreachable-code
 -Wunused
 -Wuninitialized
 -g
 -O
 -fcoarray=single
 -Bdynamic
 -L/usr/lib/x86_64-linux-gnu
 -lX11
/tmp/CCALL_Linux_gfortran_1775299/test_suite_M_units.1775299.f90:180:32:

  180 | use M_framework__verify,  only : accdig
      |                                1
Error: Symbol ‘accdig’ referenced at (1) not found in module ‘m_framework__verify’
/tmp/CCALL_Linux_gfortran_1775299/test_suite_M_units.1775299.f90:327:28:

  327 | real              :: x=real(PI)
      |                            1
Error: Parameter ‘pi’ at (1) has not been declared or is a variable, which does not reduce to a constant expression
/tmp/CCALL_Linux_gfortran_1775299/test_suite_M_units.1775299.f90:328:23:

  328 | doubleprecision   :: d=PI
      |                       1
Error: Parameter ‘pi’ at (1) has not been declared or is a variable, which does not reduce to a constant expression
/tmp/CCALL_Linux_gfortran_1775299/test_suite_M_units.1775299.f90:364:32:

  364 | use M_framework__verify,  only : accdig
      |                                1
Error: Symbol ‘accdig’ referenced at (1) not found in module ‘m_framework__verify’
/tmp/CCALL_Linux_gfortran_1775299/test_suite_M_units.1775299.f90:116:81:

  116 | call unit_test('is_nan', all(is_nan([x, 0.0,-0.0,-x,-100.0,100.0,huge(0.0)]).eqv.[t,f,f,t,f,f,f]),  &
      |                                                                                 1
Error: Operands of logical operator ‘.eqv.’ at (1) are INTEGER(4)/LOGICAL(4)
/tmp/CCALL_Linux_gfortran_1775299/test_suite_M_units.1775299.f90:105:64:

  105 |    call unit_test('is_even', all(is_even([-10, 0, 1, 2, 3]).eqv.[t,t,f,t,f]), '-10, 0, 1, 2, 3')
      |                                                                1
Error: Operands of logical operator ‘.eqv.’ at (1) are INTEGER(4)/LOGICAL(4)
/tmp/CCALL_Linux_gfortran_1775299/test_suite_M_units.1775299.f90:338:30:

  332 |    call testit_p('r2d', r2d(  0.0)      ,   0.0    ,message='real')
      |                              2
......
  338 |    call testit_p('r2d', r2d(  0.0d0)    ,   0.0d0  ,message='double')
      |                              1
Error: Type mismatch between actual argument at (1) and actual argument at (2) (REAL(8)/REAL(4)).
/tmp/CCALL_Linux_gfortran_1775299/test_suite_M_units.1775299.f90:339:30:

  332 |    call testit_p('r2d', r2d(  0.0)      ,   0.0    ,message='real')
      |                              2
......
  339 |    call testit_p('r2d', r2d(  d/4.0d0)  ,  45.0d0  ,message='double')
      |                              1
Error: Type mismatch between actual argument at (1) and actual argument at (2) (REAL(8)/REAL(4)).
/tmp/CCALL_Linux_gfortran_1775299/test_suite_M_units.1775299.f90:340:29:

  332 |    call testit_p('r2d', r2d(  0.0)      ,   0.0    ,message='real')
      |                              2
......
  340 |    call testit_p('r2d', r2d(
 -d/4.0d0)  ,
 -45.0d0  ,message='double')
      |                             1
Error: Type mismatch between actual argument at (1) and actual argument at (2) (REAL(8)/REAL(4)).
/tmp/CCALL_Linux_gfortran_1775299/test_suite_M_units.1775299.f90:341:30:

  332 |    call testit_p('r2d', r2d(  0.0)      ,   0.0    ,message='real')
      |                              2
......
  341 |    call testit_p('r2d', r2d(  d/2.0d0)  ,  90.0d0  ,message='double')
      |                              1
Error: Type mismatch between actual argument at (1) and actual argument at (2) (REAL(8)/REAL(4)).
/tmp/CCALL_Linux_gfortran_1775299/test_suite_M_units.1775299.f90:344:30:

  332 |    call testit_p('r2d', r2d(  0.0)      ,   0.0    ,message='real')
      |                              2
......
  344 |    call testit_p('r2d', r2d(  0)        ,   0.0    ,message='integer')
      |                              1
Error: Type mismatch between actual argument at (1) and actual argument at (2) (INTEGER(4)/REAL(4)).
/tmp/CCALL_Linux_gfortran_1775299/test_suite_M_units.1775299.f90:319:68:

  318 |    call unit_test('pounds_to_kilograms',abs(pounds_to_kilograms(1.0)-0.45359237).lt.0.00001,'real')
      |                                                                2    
  319 |    call unit_test('pounds_to_kilograms',any(abs(pounds_to_kilograms([ 0, 1, 100, 200 ])-&
      |                                                                    1
Error: Type mismatch between actual argument at (1) and actual argument at (2) (INTEGER(4)/REAL(4)).
/tmp/CCALL_Linux_gfortran_1775299/test_suite_M_units.1775299.f90:321:64:

  318 |    call unit_test('pounds_to_kilograms',abs(pounds_to_kilograms(1.0)-0.45359237).lt.0.00001,'real')
      |                                                                2
......
  321 |    call unit_test('pounds_to_kilograms',abs(pounds_to_kilograms(1.0d0)-0.45359237).lt.0.00001,'double')
      |                                                                1
Error: Type mismatch between actual argument at (1) and actual argument at (2) (REAL(8)/REAL(4)).
/tmp/CCALL_Linux_gfortran_1775299/test_suite_M_units.1775299.f90:273:30:

  271 |      & all(abs(meters_to_feet([
 -1.0, 0.0, 1.0 ])-[-m2f,0.0d0,m2f]).lt.0.00001d0),msg='real')
      |                              2
  272 |    call unit_test('meters_to_feet', &
  273 |      & all(abs(meters_to_feet([
 -1,   0,   1   ])-[-m2f,0.0d0,m2f]).lt.0.00001d0) ,msg='integer')
      |                              1
Error: Type mismatch between actual argument at (1) and actual argument at (2) (INTEGER(4)/REAL(4)).
/tmp/CCALL_Linux_gfortran_1775299/test_suite_M_units.1775299.f90:275:31:

  271 |      & all(abs(meters_to_feet([
 -1.0, 0.0, 1.0 ])-[-m2f,0.0d0,m2f]).lt.0.00001d0),msg='real')
      |                              2 
......
  275 |      & all(abs([meters_to_feet(-1d0),meters_to_feet(0.0d0),meters_to_feet(1.0d0)]-[-m2f,0.0d0,m2f]).lt.0.00001d0),msg='double')
      |                               1
Error: Type mismatch between actual argument at (1) and actual argument at (2) (REAL(8)/REAL(4)).
/tmp/CCALL_Linux_gfortran_1775299/test_suite_M_units.1775299.f90:275:52:

  271 |      & all(abs(meters_to_feet([
 -1.0, 0.0, 1.0 ])-[-m2f,0.0d0,m2f]).lt.0.00001d0),msg='real')
      |                              2                      
......
  275 |      & all(abs([meters_to_feet(-1d0),meters_to_feet(0.0d0),meters_to_feet(1.0d0)]-[-m2f,0.0d0,m2f]).lt.0.00001d0),msg='double')
      |                                                    1
Error: Type mismatch between actual argument at (1) and actual argument at (2) (REAL(8)/REAL(4)).
/tmp/CCALL_Linux_gfortran_1775299/test_suite_M_units.1775299.f90:275:74:

  271 |      & all(abs(meters_to_feet([
 -1.0, 0.0, 1.0 ])-[-m2f,0.0d0,m2f]).lt.0.00001d0),msg='real')
      |                              2                                            
......
  275 |      & all(abs([meters_to_feet(-1d0),meters_to_feet(0.0d0),meters_to_feet(1.0d0)]-[-m2f,0.0d0,m2f]).lt.0.00001d0),msg='double')
      |                                                                          1
Error: Type mismatch between actual argument at (1) and actual argument at (2) (REAL(8)/REAL(4)).
/tmp/CCALL_Linux_gfortran_1775299/test_suite_M_units.1775299.f90:257:31:

  255 |       & all(abs(feet_to_meters([
 -1.0, 0.0, 1.0 ,1.0/12.0])- [-f2m, 0.0d0, f2m, 0.0254d0]).lt.0.00001),'real')
      |                               2
  256 |    call unit_test('feet_to_meters', &
  257 |       & all(abs(feet_to_meters([
 -1,   0,   1   ])- [-f2m, 0.0d0, f2m]).lt.0.00001),'integer')
      |                               1
Error: Type mismatch between actual argument at (1) and actual argument at (2) (INTEGER(4)/REAL(4)).
/tmp/CCALL_Linux_gfortran_1775299/test_suite_M_units.1775299.f90:259:32:

  255 |       & all(abs(feet_to_meters([
 -1.0, 0.0, 1.0 ,1.0/12.0])- [-f2m, 0.0d0, f2m, 0.0254d0]).lt.0.00001),'real')
      |                               2 
......
  259 |       & all(abs([feet_to_meters(-1.0d0),feet_to_meters(0.0d0),feet_to_meters(1.0d0)]-[-f2m, 0.0d0, f2m]).lt.0.00001),'double')
      |                                1
Error: Type mismatch between actual argument at (1) and actual argument at (2) (REAL(8)/REAL(4)).
/tmp/CCALL_Linux_gfortran_1775299/test_suite_M_units.1775299.f90:259:55:

  255 |       & all(abs(feet_to_meters([
 -1.0, 0.0, 1.0 ,1.0/12.0])- [-f2m, 0.0d0, f2m, 0.0254d0]).lt.0.00001),'real')
      |                               2                        
......
  259 |       & all(abs([feet_to_meters(-1.0d0),feet_to_meters(0.0d0),feet_to_meters(1.0d0)]-[-f2m, 0.0d0, f2m]).lt.0.00001),'double')
      |                                                       1
Error: Type mismatch between actual argument at (1) and actual argument at (2) (REAL(8)/REAL(4)).
/tmp/CCALL_Linux_gfortran_1775299/test_suite_M_units.1775299.f90:259:77:

  255 |       & all(abs(feet_to_meters([
 -1.0, 0.0, 1.0 ,1.0/12.0])- [-f2m, 0.0d0, f2m, 0.0254d0]).lt.0.00001),'real')
      |                               2                                              
......
  259 |       & all(abs([feet_to_meters(-1.0d0),feet_to_meters(0.0d0),feet_to_meters(1.0d0)]-[-f2m, 0.0d0, f2m]).lt.0.00001),'double')
      |                                                                             1
Error: Type mismatch between actual argument at (1) and actual argument at (2) (REAL(8)/REAL(4)).
/tmp/CCALL_Linux_gfortran_1775299/test_suite_M_units.1775299.f90:223:30:

  223 |    call testit_p('d2r', d2r(  0.0d0)    , 0.0d0     ,message='double for 0')
      |                              1
......
  398 |       call testit_p('tand', tand(values(i)), tan(d2r(values(i))),message=str('value=',values(i)))
      |                                                     2
Error: Type mismatch between actual argument at (1) and actual argument at (2) (REAL(8)/REAL(4)).
/tmp/CCALL_Linux_gfortran_1775299/test_suite_M_units.1775299.f90:224:30:

  224 |    call testit_p('d2r', d2r(  45.0d0)   , PI/4.0d0  ,message='double for 45')
      |                              1
......
  398 |       call testit_p('tand', tand(values(i)), tan(d2r(values(i))),message=str('value=',values(i)))
      |                                                     2
Error: Type mismatch between actual argument at (1) and actual argument at (2) (REAL(8)/REAL(4)).
/tmp/CCALL_Linux_gfortran_1775299/test_suite_M_units.1775299.f90:225:30:

  225 |    call testit_p('d2r', d2r( 
 -45.0d0)  ,
 -PI/4.0d0 ,message='double for
 -45')
      |                              1
......
  398 |       call testit_p('tand', tand(values(i)), tan(d2r(values(i))),message=str('value=',values(i)))
      |                                                     2
Error: Type mismatch between actual argument at (1) and actual argument at (2) (REAL(8)/REAL(4)).
/tmp/CCALL_Linux_gfortran_1775299/test_suite_M_units.1775299.f90:226:30:

  226 |    call testit_p('d2r', d2r(  90.0d0)   , PI/2d0    ,message='double for 90')
      |                              1
......
  398 |       call testit_p('tand', tand(values(i)), tan(d2r(values(i))),message=str('value=',values(i)))
      |                                                     2
Error: Type mismatch between actual argument at (1) and actual argument at (2) (REAL(8)/REAL(4)).
/tmp/CCALL_Linux_gfortran_1775299/test_suite_M_units.1775299.f90:227:30:

  227 |    call testit_p('d2r', d2r(  180.0d0)  , PI        ,message='double for 180')
      |                              1
......
  398 |       call testit_p('tand', tand(values(i)), tan(d2r(values(i))),message=str('value=',values(i)))
      |                                                     2
Error: Type mismatch between actual argument at (1) and actual argument at (2) (REAL(8)/REAL(4)).
/tmp/CCALL_Linux_gfortran_1775299/test_suite_M_units.1775299.f90:229:32:

  229 |    call testit_p('d2r', d2r(    0)      , 0.0       ,message='integer for 0')
      |                                1
......
  398 |       call testit_p('tand', tand(values(i)), tan(d2r(values(i))),message=str('value=',values(i)))
      |                                                     2
Error: Type mismatch between actual argument at (1) and actual argument at (2) (INTEGER(4)/REAL(4)).
/tmp/CCALL_Linux_gfortran_1775299/test_suite_M_units.1775299.f90:230:31:

  230 |    call testit_p('d2r', d2r(   45)      , PI/4.0    ,message='integer for 45')
      |                               1
......
  398 |       call testit_p('tand', tand(values(i)), tan(d2r(values(i))),message=str('value=',values(i)))
      |                                                     2
Error: Type mismatch between actual argument at (1) and actual argument at (2) (INTEGER(4)/REAL(4)).
/tmp/CCALL_Linux_gfortran_1775299/test_suite_M_units.1775299.f90:231:30:

  231 |    call testit_p('d2r', d2r( 
 -45)      ,
 -PI/4.0   ,message='integer for
 -45')
      |                              1
......
  398 |       call testit_p('tand', tand(values(i)), tan(d2r(values(i))),message=str('value=',values(i)))
      |                                                     2
Error: Type mismatch between actual argument at (1) and actual argument at (2) (INTEGER(4)/REAL(4)).
/tmp/CCALL_Linux_gfortran_1775299/test_suite_M_units.1775299.f90:232:31:

  232 |    call testit_p('d2r', d2r(   90)      , PI/2      ,message='integer for 90')
      |                               1
......
  398 |       call testit_p('tand', tand(values(i)), tan(d2r(values(i))),message=str('value=',values(i)))
      |                                                     2
Error: Type mismatch between actual argument at (1) and actual argument at (2) (INTEGER(4)/REAL(4)).
/tmp/CCALL_Linux_gfortran_1775299/test_suite_M_units.1775299.f90:233:30:

  233 |    call testit_p('d2r', d2r(  180)      , PI        ,message='integer for 180')
      |                              1
......
  398 |       call testit_p('tand', tand(values(i)), tan(d2r(values(i))),message=str('value=',values(i)))
      |                                                     2
Error: Type mismatch between actual argument at (1) and actual argument at (2) (INTEGER(4)/REAL(4)).
/tmp/CCALL_Linux_gfortran_1775299/test_suite_M_units.1775299.f90:92:11:

   89 |    r32=nan(0.0_real32)
      |           2
......
   92 |    r64=nan(0.0_real64)
      |           1
Error: Type mismatch between actual argument at (1) and actual argument at (2) (REAL(8)/REAL(4)).
/tmp/CCALL_Linux_gfortran_1775299/test_suite_M_units.1775299.f90:95:12:

   89 |    r32=nan(0.0_real32)
      |           2 
......
   95 |    r128=nan(0.0_real128)
      |            1
Error: Type mismatch between actual argument at (1) and actual argument at (2) (REAL(16)/REAL(4)).
+ ar rv /home/urbanjs/venus/V600/lib/Linux_gfortran/PROGRAM.a /tmp/CCALL_Linux_gfortran_1775299/test_suite_M_units.1775299.f90
a - /tmp/CCALL_Linux_gfortran_1775299/test_suite_M_units.1775299.f90
+ set +x
/home/urbanjs/venus/V600/LIBRARY/CYGWIN/scripts_regression/goodbad: test_suite_M_units.1 0 test_suite_M_units start --section 1
*ccall*: REMOVING /tmp/CCALL_Linux_gfortran_1775299
+ test_suite_M_units
/home/urbanjs/venus/V600/github/github_scripts/bash/GPF_build_module: line 198: test_suite_M_units: command not found
+ echo '>>>> GPF_fman'
>>>> GPF_fman
+ '[' -d doc/ ']'
+ GPF_fman m_units doc
+++ dirname /home/urbanjs/venus/V600/github/github_scripts/bash/GPF_fman
++ realpath /home/urbanjs/venus/V600/github/github_scripts/bash
+ HERE=/home/urbanjs/venus/V600/github/github_scripts/bash
++ dirname /home/urbanjs/venus/V600/github/github_scripts/bash
+ BASE=/home/urbanjs/venus/V600/github/github_scripts
++ dirname /home/urbanjs/venus/V600/github/github_scripts
+ BASE=/home/urbanjs/venus/V600/github
+ DOCS=/home/urbanjs/venus/V600/github/docs
+ export PACKAGE=m_units
+ PACKAGE=m_units
+ export TEXTDIR=doc
+ TEXTDIR=doc
+ export NAME
+ cd doc
+ WRITE_MODULE
+ cat
+ cat
+ cat
+ cat
+ COUNT=0
+ read NAME
+ ls acosd.3m_units.man asind.3m_units.man atan2d.3m_units.man atand.3m_units.man atomnum2symbol.3m_units.man c2f.3m_units.man cartesian_to_polar.3m_units.man cartesian_to_spherical.3m_units.man cosd.3m_units.man d2r.3m_units.man f2c.3m_units.man feet_to_meters.3m_units.man inf.3m_units.man is_even.3m_units.man is_nan.3m_units.man M_constants.3m_constants.man meters_to_feet.3m_units.man M_units.3m_units.man nan.3m_units.man norm_angle_deg.3m_units.man norm_angle_rad.3m_units.man polar_to_cartesian.3m_units.man pounds_to_kilograms.3m_units.man r2d.3m_units.man sind.3m_units.man spherical_to_cartesian.3m_units.man symbol2atomnum.3m_units.man tand.3m_units.man
+ SHORTNAME=acosd
+ COUNT=1
+ cat
++ TOCHARACTER
++ :
++ cat acosd.3m_units.man
++ sed -e 's/^/'\''/'
++ sed -e 's/$/'\'', \&/'
++ sed -e 's/'\''/'\'''\''/g'
++ cat
+ read NAME
+ SHORTNAME=asind
+ COUNT=2
+ cat
++ TOCHARACTER
++ :
++ cat asind.3m_units.man
++ sed -e 's/'\''/'\'''\''/g'
++ sed -e 's/$/'\'', \&/'
++ cat
++ sed -e 's/^/'\''/'
+ read NAME
+ SHORTNAME=atan2d
+ COUNT=3
+ cat
++ TOCHARACTER
++ :
++ cat atan2d.3m_units.man
++ sed -e 's/'\''/'\'''\''/g'
++ cat
++ sed -e 's/^/'\''/'
++ sed -e 's/$/'\'', \&/'
+ read NAME
+ SHORTNAME=atand
+ COUNT=4
+ cat
++ TOCHARACTER
++ :
++ cat atand.3m_units.man
++ sed -e 's/'\''/'\'''\''/g'
++ cat
++ sed -e 's/$/'\'', \&/'
++ sed -e 's/^/'\''/'
+ read NAME
+ SHORTNAME=atomnum2symbol
+ COUNT=5
+ cat
++ TOCHARACTER
++ :
++ sed -e 's/'\''/'\'''\''/g'
++ cat atomnum2symbol.3m_units.man
++ sed -e 's/^/'\''/'
++ sed -e 's/$/'\'', \&/'
++ cat
+ read NAME
+ SHORTNAME=c2f
+ COUNT=6
+ cat
++ TOCHARACTER
++ :
++ cat c2f.3m_units.man
++ sed -e 's/'\''/'\'''\''/g'
++ cat
++ sed -e 's/$/'\'', \&/'
++ sed -e 's/^/'\''/'
+ read NAME
+ SHORTNAME=cartesian_to_polar
+ COUNT=7
+ cat
++ TOCHARACTER
++ :
++ sed -e 's/'\''/'\'''\''/g'
++ cat cartesian_to_polar.3m_units.man
++ cat
++ sed -e 's/$/'\'', \&/'
++ sed -e 's/^/'\''/'
+ read NAME
+ SHORTNAME=cartesian_to_spherical
+ COUNT=8
+ cat
++ TOCHARACTER
++ :
++ cat cartesian_to_spherical.3m_units.man
++ sed -e 's/^/'\''/'
++ sed -e 's/'\''/'\'''\''/g'
++ sed -e 's/$/'\'', \&/'
++ cat
+ read NAME
+ SHORTNAME=cosd
+ COUNT=9
+ cat
++ TOCHARACTER
++ :
++ cat cosd.3m_units.man
++ cat
++ sed -e 's/'\''/'\'''\''/g'
++ sed -e 's/$/'\'', \&/'
++ sed -e 's/^/'\''/'
+ read NAME
+ SHORTNAME=d2r
+ COUNT=10
+ cat
++ TOCHARACTER
++ :
++ cat d2r.3m_units.man
++ cat
++ sed -e 's/$/'\'', \&/'
++ sed -e 's/'\''/'\'''\''/g'
++ sed -e 's/^/'\''/'
+ read NAME
+ SHORTNAME=f2c
+ COUNT=11
+ cat
++ TOCHARACTER
++ :
++ cat f2c.3m_units.man
++ sed -e 's/'\''/'\'''\''/g'
++ sed -e 's/^/'\''/'
++ cat
++ sed -e 's/$/'\'', \&/'
+ read NAME
+ SHORTNAME=feet_to_meters
+ COUNT=12
+ cat
++ TOCHARACTER
++ :
++ cat feet_to_meters.3m_units.man
++ sed -e 's/^/'\''/'
++ sed -e 's/'\''/'\'''\''/g'
++ sed -e 's/$/'\'', \&/'
++ cat
+ read NAME
+ SHORTNAME=inf
+ COUNT=13
+ cat
++ TOCHARACTER
++ :
++ sed -e 's/^/'\''/'
++ sed -e 's/'\''/'\'''\''/g'
++ cat inf.3m_units.man
++ cat
++ sed -e 's/$/'\'', \&/'
+ read NAME
+ SHORTNAME=is_even
+ COUNT=14
+ cat
++ TOCHARACTER
++ :
++ cat is_even.3m_units.man
++ sed -e 's/^/'\''/'
++ sed -e 's/'\''/'\'''\''/g'
++ sed -e 's/$/'\'', \&/'
++ cat
+ read NAME
+ SHORTNAME=is_nan
+ COUNT=15
+ cat
++ TOCHARACTER
++ :
++ cat is_nan.3m_units.man
++ sed -e 's/'\''/'\'''\''/g'
++ sed -e 's/^/'\''/'
++ sed -e 's/$/'\'', \&/'
++ cat
+ read NAME
+ SHORTNAME=M_constants
+ COUNT=16
+ cat
++ TOCHARACTER
++ :
++ cat M_constants.3m_constants.man
++ sed -e 's/^/'\''/'
++ sed -e 's/'\''/'\'''\''/g'
++ sed -e 's/$/'\'', \&/'
++ cat
+ read NAME
+ SHORTNAME=meters_to_feet
+ COUNT=17
+ cat
++ TOCHARACTER
++ :
++ cat meters_to_feet.3m_units.man
++ sed -e 's/'\''/'\'''\''/g'
++ sed -e 's/^/'\''/'
++ cat
++ sed -e 's/$/'\'', \&/'
+ read NAME
+ SHORTNAME=M_units
+ COUNT=18
+ cat
++ TOCHARACTER
++ :
++ cat M_units.3m_units.man
++ sed -e 's/'\''/'\'''\''/g'
++ sed -e 's/$/'\'', \&/'
++ cat
++ sed -e 's/^/'\''/'
+ read NAME
+ SHORTNAME=nan
+ COUNT=19
+ cat
++ TOCHARACTER
++ :
++ cat nan.3m_units.man
++ sed -e 's/'\''/'\'''\''/g'
++ sed -e 's/^/'\''/'
++ sed -e 's/$/'\'', \&/'
++ cat
+ read NAME
+ SHORTNAME=norm_angle_deg
+ COUNT=20
+ cat
++ TOCHARACTER
++ :
++ cat norm_angle_deg.3m_units.man
++ sed -e 's/'\''/'\'''\''/g'
++ sed -e 's/^/'\''/'
++ cat
++ sed -e 's/$/'\'', \&/'
+ read NAME
+ SHORTNAME=norm_angle_rad
+ COUNT=21
+ cat
++ TOCHARACTER
++ :
++ sed -e 's/'\''/'\'''\''/g'
++ sed -e 's/^/'\''/'
++ cat norm_angle_rad.3m_units.man
++ cat
++ sed -e 's/$/'\'', \&/'
+ read NAME
+ SHORTNAME=polar_to_cartesian
+ COUNT=22
+ cat
++ TOCHARACTER
++ :
++ sed -e 's/'\''/'\'''\''/g'
++ cat polar_to_cartesian.3m_units.man
++ cat
++ sed -e 's/$/'\'', \&/'
++ sed -e 's/^/'\''/'
+ read NAME
+ SHORTNAME=pounds_to_kilograms
+ COUNT=23
+ cat
++ TOCHARACTER
++ :
++ sed -e 's/'\''/'\'''\''/g'
++ sed -e 's/$/'\'', \&/'
++ cat
++ cat pounds_to_kilograms.3m_units.man
++ sed -e 's/^/'\''/'
+ read NAME
+ SHORTNAME=r2d
+ COUNT=24
+ cat
++ TOCHARACTER
++ :
++ cat r2d.3m_units.man
++ cat
++ sed -e 's/$/'\'', \&/'
++ sed -e 's/'\''/'\'''\''/g'
++ sed -e 's/^/'\''/'
+ read NAME
+ SHORTNAME=sind
+ COUNT=25
+ cat
++ TOCHARACTER
++ :
++ sed -e 's/'\''/'\'''\''/g'
++ sed -e 's/$/'\'', \&/'
++ cat
++ sed -e 's/^/'\''/'
++ cat sind.3m_units.man
+ read NAME
+ SHORTNAME=spherical_to_cartesian
+ COUNT=26
+ cat
++ TOCHARACTER
++ :
++ cat spherical_to_cartesian.3m_units.man
++ sed -e 's/'\''/'\'''\''/g'
++ sed -e 's/^/'\''/'
++ cat
++ sed -e 's/$/'\'', \&/'
+ read NAME
+ SHORTNAME=symbol2atomnum
+ COUNT=27
+ cat
++ TOCHARACTER
++ :
++ cat symbol2atomnum.3m_units.man
++ sed -e 's/'\''/'\'''\''/g'
++ sed -e 's/^/'\''/'
++ sed -e 's/$/'\'', \&/'
++ cat
+ read NAME
+ SHORTNAME=tand
+ COUNT=28
+ cat
++ TOCHARACTER
++ :
++ cat tand.3m_units.man
++ sed -e 's/'\''/'\'''\''/g'
++ sed -e 's/$/'\'', \&/'
++ sed -e 's/^/'\''/'
++ cat
+ read NAME
+ END_MODULE
+ cat
+ cat
+ ls -ld /home/urbanjs/venus/V600/github/PLUGINS/fpm-docs/src/m_units_docs.f90
-rw-rw-r-- 1 urbanjs urbanjs 66283 May 26 17:13 /home/urbanjs/venus/V600/github/PLUGINS/fpm-docs/src/m_units_docs.f90
+ cat
>>>> MODULE IS                       M_constants
>>>> DOCUMENT DIRECTORY IS           /home/urbanjs/venus/V600/github/M_framework/candidates/M_units/src/source
>>>> MANPAGES PROCEDURE DIRECTORY IS /home/urbanjs/venus/V600/github/M_framework/candidates/M_units/man
>>>> MAN_EXTENSION IS                m_constants
+ grep -q '^#' M_constants.ff
+ SUFFIX=f90
+ '[' TRUE = '' ']'
+ prep F90 GITHUB --noenv --comment doxygen --verbose -i M_constants.ff -o ../M_constants.f90
+ verbose mode on
+ grep -qi '^$IFDEF  *C *$' M_constants.ff
+ cd doc
+ set -xv
+ cat
>>>> .man files to MAN DIRECTORY as ROFF and HTML
>>>> MANOUT        => /home/urbanjs/venus/V600/github/M_framework/candidates/M_units/man
>>>> MAN_EXTENSION => 
>>>> DOCS          => /home/urbanjs/venus/V600/github/M_framework/candidates/M_units/docs
+ for NUM in 1 2 3 4 5 6 7 8
+ mkdir -p /home/urbanjs/venus/V600/github/M_framework/candidates/M_units/man/man1
++ sort
++ uniq
++ ls '*.1.man' '*.1m_constants.man'
+ for NUM in 1 2 3 4 5 6 7 8
+ mkdir -p /home/urbanjs/venus/V600/github/M_framework/candidates/M_units/man/man2
++ sort
++ ls '*.2.man' '*.2m_constants.man'
++ uniq
+ for NUM in 1 2 3 4 5 6 7 8
+ mkdir -p /home/urbanjs/venus/V600/github/M_framework/candidates/M_units/man/man3
++ sort
++ ls '*.3.man' M_constants.3m_constants.man
++ uniq
+ for NAME in $(ls *.$NUM.man *.${NUM}${MAN_EXTENSION}.man 2>/dev/null|sort|uniq)
+ echo '>>>> processing manpage and HTML for M_constants.3m_constants.man'
>>>> processing manpage and HTML for M_constants.3m_constants.man
++ basename M_constants.3m_constants.man .man
+ SHORTNAME_MAN=/home/urbanjs/venus/V600/github/M_framework/candidates/M_units/man/man3/M_constants.3m_constants
++ basename M_constants.3m_constants.man .3m_constants.man
+ SHORTNAME=M_constants
+ : SHORTNAME_MAN /home/urbanjs/venus/V600/github/M_framework/candidates/M_units/man/man3/M_constants.3m_constants SHORTNAME M_constants
+ tee /home/urbanjs/venus/V600/github/M_framework/candidates/M_units/man/man3/M_constants.3m_constants
+ txt2man -s 3m_constants -t M_constants M_constants.3m_constants.man
+ env AUX_FILENAME=M_constants man2html
/home/urbanjs/venus/V600/github/index/github_scripts/bash/txt2man
man2html 45e5cca9-f986-4b35-986c-3826adee3e4a
+ replace index.html https://github.com/urbanjost/M_constants -- /home/urbanjs/venus/V600/github/M_framework/candidates/M_units/docs/M_constants.3m_constants.html
CHANGING FILE /home/urbanjs/venus/V600/github/M_framework/candidates/M_units/docs/M_constants.3m_constants.html  [index.html][https://github.com/urbanjost/M_constants]
BEFORE: /home/urbanjs/venus/V600/github/M_framework/candidates/M_units/docs/M_constants.3m_constants.html:45:<h5><a href="index.html">[UP]</a></h5>
AFTER:  /home/urbanjs/venus/V600/github/M_framework/candidates/M_units/docs/M_constants.3m_constants.html:45:<h5><a href="https://github.com/urbanjost/M_constants">[UP]</a></h5>
+ gzip -f /home/urbanjs/venus/V600/github/M_framework/candidates/M_units/man/man3/M_constants.3m_constants
+ for NUM in 1 2 3 4 5 6 7 8
+ mkdir -p /home/urbanjs/venus/V600/github/M_framework/candidates/M_units/man/man4
++ ls '*.4.man' '*.4m_constants.man'
++ uniq
++ sort
+ for NUM in 1 2 3 4 5 6 7 8
+ mkdir -p /home/urbanjs/venus/V600/github/M_framework/candidates/M_units/man/man5
++ ls '*.5.man' '*.5m_constants.man'
++ sort
++ uniq
+ for NUM in 1 2 3 4 5 6 7 8
+ mkdir -p /home/urbanjs/venus/V600/github/M_framework/candidates/M_units/man/man6
++ sort
++ ls '*.6.man' '*.6m_constants.man'
++ uniq
+ for NUM in 1 2 3 4 5 6 7 8
+ mkdir -p /home/urbanjs/venus/V600/github/M_framework/candidates/M_units/man/man7
++ sort
++ ls '*.7.man' '*.7m_constants.man'
++ uniq
+ for NUM in 1 2 3 4 5 6 7 8
+ mkdir -p /home/urbanjs/venus/V600/github/M_framework/candidates/M_units/man/man8
++ uniq
++ sort
++ ls '*.8.man' '*.8m_constants.man'
+ cat
>>>> .txt files to MAN DIRECTORY
>>>> MANOUT        => /home/urbanjs/venus/V600/github/M_framework/candidates/M_units/man
>>>> MAN_EXTENSION => 
+ cd doc
+ for NUM in 1 2 3 4 5 6 7 8
+ mkdir -p /home/urbanjs/venus/V600/github/M_framework/candidates/M_units/man/man1
++ sort
++ uniq
++ ls '*.1.txt' '*.1m_constants.txt'
+ for NUM in 1 2 3 4 5 6 7 8
+ mkdir -p /home/urbanjs/venus/V600/github/M_framework/candidates/M_units/man/man2
++ ls '*.2.txt' '*.2m_constants.txt'
++ sort
++ uniq
+ for NUM in 1 2 3 4 5 6 7 8
+ mkdir -p /home/urbanjs/venus/V600/github/M_framework/candidates/M_units/man/man3
++ sort
++ uniq
++ ls '*.3.txt' '*.3m_constants.txt'
+ for NUM in 1 2 3 4 5 6 7 8
+ mkdir -p /home/urbanjs/venus/V600/github/M_framework/candidates/M_units/man/man4
++ sort
++ ls '*.4.txt' '*.4m_constants.txt'
++ uniq
+ for NUM in 1 2 3 4 5 6 7 8
+ mkdir -p /home/urbanjs/venus/V600/github/M_framework/candidates/M_units/man/man5
++ sort
++ ls '*.5.txt' '*.5m_constants.txt'
++ uniq
+ for NUM in 1 2 3 4 5 6 7 8
+ mkdir -p /home/urbanjs/venus/V600/github/M_framework/candidates/M_units/man/man6
++ sort
++ ls '*.6.txt' '*.6m_constants.txt'
++ uniq
+ for NUM in 1 2 3 4 5 6 7 8
+ mkdir -p /home/urbanjs/venus/V600/github/M_framework/candidates/M_units/man/man7
++ uniq
++ sort
++ ls '*.7.txt' '*.7m_constants.txt'
+ for NUM in 1 2 3 4 5 6 7 8
+ mkdir -p /home/urbanjs/venus/V600/github/M_framework/candidates/M_units/man/man8
++ sort
++ uniq
++ ls '*.8.txt' '*.8m_constants.txt'
+ echo '>>>> *.htm files to HTML and ROFF'
>>>> *.htm files to HTML and ROFF
+ cd doc
+ for NUM in 1 2 3 4 5 6 7 8
++ ls '*.htm'
+ for NUM in 1 2 3 4 5 6 7 8
++ ls '*.htm'
+ for NUM in 1 2 3 4 5 6 7 8
++ ls '*.htm'
+ for NUM in 1 2 3 4 5 6 7 8
++ ls '*.htm'
+ for NUM in 1 2 3 4 5 6 7 8
++ ls '*.htm'
+ for NUM in 1 2 3 4 5 6 7 8
++ ls '*.htm'
+ for NUM in 1 2 3 4 5 6 7 8
++ ls '*.htm'
+ for NUM in 1 2 3 4 5 6 7 8
++ ls '*.htm'
+ echo '>>>> *.html files to DOC DIRECTORY'
>>>> *.html files to DOC DIRECTORY
+ cd doc
+ for NUM in 1 2 3 4 5 6 7 8
++ ls '*.1m_constants.html'
+ for NUM in 1 2 3 4 5 6 7 8
++ ls '*.2m_constants.html'
+ for NUM in 1 2 3 4 5 6 7 8
++ ls '*.3m_constants.html'
+ for NUM in 1 2 3 4 5 6 7 8
++ ls '*.4m_constants.html'
+ for NUM in 1 2 3 4 5 6 7 8
++ ls '*.5m_constants.html'
+ for NUM in 1 2 3 4 5 6 7 8
++ ls '*.6m_constants.html'
+ for NUM in 1 2 3 4 5 6 7 8
++ ls '*.7m_constants.html'
+ for NUM in 1 2 3 4 5 6 7 8
++ ls '*.8m_constants.html'
+ echo '>>>> Build manpage index'
>>>> Build manpage index
+ cd ../../man
+ mandb -c .
mandb: warning: $MANPATH set, inserting /etc/manpath.config
Updating index cache for path `/home/urbanjs/venus/V600/github/M_framework/candidates/M_units/man/./man1'. Wait...
Updating index cache for path `/home/urbanjs/venus/V600/github/M_framework/candidates/M_units/man/./man3'. Wait...
Processing manual pages under /home/urbanjs/venus/V600/github/M_framework/candidates/M_units/man/....
Updating index cache for path `/home/urbanjs/venus/V600/github/M_framework/candidates/M_units/man/./man2'. Wait...
Updating index cache for path `/home/urbanjs/venus/V600/github/M_framework/candidates/M_units/man/./man4'. Wait...
Updating index cache for path `/home/urbanjs/venus/V600/github/M_framework/candidates/M_units/man/./man6'. Wait...
Updating index cache for path `/home/urbanjs/venus/V600/github/M_framework/candidates/M_units/man/./man7'. Wait...
Updating index cache for path `/home/urbanjs/venus/V600/github/M_framework/candidates/M_units/man/./man8'. Wait...
Updating index cache for path `/home/urbanjs/venus/V600/github/M_framework/candidates/M_units/man/./man5'. Wait...
done.
Checking for stray cats under /home/urbanjs/venus/V600/github/M_framework/candidates/M_units/man/....
Processing manual pages under /home/urbanjs/venus/V600/github/M_framework/candidates/M_units/man/./cat8...
Processing manual pages under /home/urbanjs/venus/V600/github/M_framework/candidates/M_units/man/./cat1...
Processing manual pages under /home/urbanjs/venus/V600/github/M_framework/candidates/M_units/man/./cat3...
Processing manual pages under /home/urbanjs/venus/V600/github/M_framework/candidates/M_units/man/./cat4...
Processing manual pages under /home/urbanjs/venus/V600/github/M_framework/candidates/M_units/man/./cat6...
Processing manual pages under /home/urbanjs/venus/V600/github/M_framework/candidates/M_units/man/./cat2...
Processing manual pages under /home/urbanjs/venus/V600/github/M_framework/candidates/M_units/man/./cat5...
Processing manual pages under /home/urbanjs/venus/V600/github/M_framework/candidates/M_units/man/./cat7...
8 man subdirectories contained newer manual pages.
28 manual pages were added.
0 stray cats were added.
++ pwd
+ env MANPATH=/home/urbanjs/venus/V600/github/M_framework/candidates/M_units/man man -k .
acosd (3m_units)     - [M_units:TRIGONOMETRY] calculate arccosine of value in...
asind (3m_units)     - [M_units:TRIGONOMETRY] calculate arcsine of value in d...
atan2d (3m_units)    - [M_units:TRIGONOMETRY] calculate arctangent of the com...
atand (3m_units)     - [M_units:TRIGONOMETRY] calculate arctangent of value i...
atomnum2symbol (3m_units) - [M_units:SYMBOLS] return element symbol given ato...
c2f (3m_units)       - [M_units:TEMPERATURE] convert Celsius to Fahrenheit (L...
cartesian_to_polar (3m_units) - [M_units:TRIGONOMETRY] convert Cartesian coor...
cartesian_to_spherical (3m_units) - [M_units:TRIGONOMETRY] convert Cartesian ...
cosd (3m_units)      - [M_units:TRIGONOMETRY] calculate cosine of value in de...
d2r (3m_units)       - [M_units:TRIGONOMETRY] convert degrees to radians (LIC...
f2c (3m_units)       - [M_units:TEMPERATURE] convert Fahrenheit to Celsius (L...
feet_to_meters (3m_units) - [M_units:LENGTH] converts a measurement in feet t...
inf (3m_units)       - [M_units] return an inf (Infinity) (LICENSE:PD)
is_even (3m_units)   - [M_units] determine if integer is even (LICENSE:PD)
is_nan (3m_units)    - [M_units] determine if integer is a Nan (Not a Number)...
M_constants (3m_constants) - [M_constants:INTRO] Useful constants
M_units (3m_units)   - [M_units::INTRO] convert between various physical unit...
meters_to_feet (3m_units) - [M_units:LENGTH] converts a measurement in meters...
nan (3m_units)       - [M_units] return a NaN (Not a number) (LICENSE:PD)
norm_angle_deg (3m_units) - [M_units:TRIGONOMETRY] Return input angle given i...
norm_angle_rad (3m_units) - [M_units:TRIGONOMETRY] Return input angle given i...
polar_to_cartesian (3m_units) - [M_units:TRIGONOMETRY] convert polar coordina...
pounds_to_kilograms (3m_units) - [M_units:MASS] - converts a measurement in p...
r2d (3m_units)       - [M_units:TRIGONOMETRY] convert radians to degrees (LIC...
sind (3m_units)      - [M_units:TRIGONOMETRY] calculate sine of value in degr...
spherical_to_cartesian (3m_units) - [M_units:TRIGONOMETRY] convert ISO polar ...
symbol2atomnum (3m_units) - [M_units:SYMBOLS] return atomic number given elem...
tand (3m_units)      - [M_units:TRIGONOMETRY] calculate tangent of value in d...
+ echo '>>>> make easily distributed archive files of manpages'
>>>> make easily distributed archive files of manpages
+ mkdir -p ../../docs
+ cd ../../man
+ gzip man3/M_constants.3m_constants.gz
gzip: man3/M_constants.3m_constants.gz already has .gz suffix -- unchanged
+ zip -r ../docs/manpages.zip man3/M_constants.3m_constants.gz
updating: man3/M_constants.3m_constants.gz (stored 0%)
+ tar cvfz ../docs/manpages.tgz man3/M_constants.3m_constants.gz
man3/M_constants.3m_constants.gz
+ gunzip man3/M_constants.3m_constants.gz
+ echo '>>>> extract demo pages from manpages'
>>>> extract demo pages from manpages
+ cd /home/urbanjs/venus/V600/github/M_framework/candidates/M_units/man
++ pwd
+ MANPATH=/home/urbanjs/venus/V600/github/M_framework/candidates/M_units/man
+ SECTION=3m_constants
+ DEMO_OUTDIR=../../example/
+ GPF_extract_manpage_demos /home/urbanjs/venus/V600/github/M_framework/candidates/M_units/man 3m_constants ../../example/
>>>> Extract demo program from manpages with
     MANPATH=/home/urbanjs/venus/V600/github/M_framework/candidates/M_units/man
     SECTION=3m_constants
     DEMO_OUTDIR=../../example/
     DEMO_SUBDIR=FALSE
     1	acosd (3m_units)     - [M_units:TRIGONOMETRY] calculate arccosine of value in...
     2	asind (3m_units)     - [M_units:TRIGONOMETRY] calculate arcsine of value in d...
     3	atan2d (3m_units)    - [M_units:TRIGONOMETRY] calculate arctangent of the com...
     4	atand (3m_units)     - [M_units:TRIGONOMETRY] calculate arctangent of value i...
     5	atomnum2symbol (3m_units) - [M_units:SYMBOLS] return element symbol given ato...
     6	c2f (3m_units)       - [M_units:TEMPERATURE] convert Celsius to Fahrenheit (L...
     7	cartesian_to_polar (3m_units) - [M_units:TRIGONOMETRY] convert Cartesian coor...
     8	cartesian_to_spherical (3m_units) - [M_units:TRIGONOMETRY] convert Cartesian ...
     9	cosd (3m_units)      - [M_units:TRIGONOMETRY] calculate cosine of value in de...
    10	d2r (3m_units)       - [M_units:TRIGONOMETRY] convert degrees to radians (LIC...
    11	f2c (3m_units)       - [M_units:TEMPERATURE] convert Fahrenheit to Celsius (L...
    12	feet_to_meters (3m_units) - [M_units:LENGTH] converts a measurement in feet t...
    13	inf (3m_units)       - [M_units] return an inf (Infinity) (LICENSE:PD)
    14	is_even (3m_units)   - [M_units] determine if integer is even (LICENSE:PD)
    15	is_nan (3m_units)    - [M_units] determine if integer is a Nan (Not a Number)...
    16	M_constants (3m_constants) - [M_constants:INTRO] Useful constants
    17	M_units (3m_units)   - [M_units::INTRO] convert between various physical unit...
    18	meters_to_feet (3m_units) - [M_units:LENGTH] converts a measurement in meters...
    19	nan (3m_units)       - [M_units] return a NaN (Not a number) (LICENSE:PD)
    20	norm_angle_deg (3m_units) - [M_units:TRIGONOMETRY] Return input angle given i...
    21	norm_angle_rad (3m_units) - [M_units:TRIGONOMETRY] Return input angle given i...
    22	polar_to_cartesian (3m_units) - [M_units:TRIGONOMETRY] convert polar coordina...
    23	pounds_to_kilograms (3m_units) - [M_units:MASS] - converts a measurement in p...
    24	r2d (3m_units)       - [M_units:TRIGONOMETRY] convert radians to degrees (LIC...
    25	sind (3m_units)      - [M_units:TRIGONOMETRY] calculate sine of value in degr...
    26	spherical_to_cartesian (3m_units) - [M_units:TRIGONOMETRY] convert ISO polar ...
    27	symbol2atomnum (3m_units) - [M_units:SYMBOLS] return atomic number given elem...
    28	tand (3m_units)      - [M_units:TRIGONOMETRY] calculate tangent of value in d...
>>>> M_constants.3m_constants
M_constants(3m_constants)			     M_constants(3m_constants)



NAME
  M_constants(3f) - [M_constants:INTRO] Useful constants


SYNOPSIS
  use M_constants,
    only : uc

	! real128 constants
	uc%qp%pi
	uc%qp%gamma
	uc%qp%e
	uc%qp%golden_ratio
	uc%qp%euler

	! real64 constants
	uc%dp%pi
	uc%dp%gamma
	uc%dp%e
	uc%dp%golden_ratio
	uc%dp%euler

	! real32 constants
	uc%sp%pi
	uc%sp%gamma
	uc%sp%e
	uc%sp%golden_ratio
	uc%sp%euler


  use M_constants,
    only : f ! formats

    f%all

DESCRIPTION
  Useful universal constants, physical constants, formats, ...

   UNIVERSAL CONSTANTS
  e The base of the natural logarithm system. "e" was named in honor of Euler,
    but is known as Napier's constant.	"euler"

  gamma
    The Euler-Mascheroni constant is often denoted by a lower-case Gamma.

  golden_ratio
    In mathematics, two quantities are in the golden ratio if their ratio is
    the same as the ratio of their sum to the larger of the two quantities. so
    for a > b > 0, (a + b)/ a = a/b where the Greek letter phi often denotes
    the golden ratio.

  pi
    The ratio of the circumference of a circle to the diameter of the circle

   PHYSICAL CONSTANTS
  "deg_per_rad" "rad_per_deg"

  c__m_per_sec
    Speed of light in a vacuum

  c__ft_per_sec
    Speed of light in a vacuum

NOTES
  Gamma is defined as

     Gamma = limit ( M -> Infinity ) ( Sum ( 1 <= N <= M ) 1 / N ) - Log ( M )


EXAMPLE
  Sample program:

      program test_universal_constants
      use M_constants, only : uc, f
      ! give a local name to a constant
      real,parameter :: e=uc%sp%e ! universal constant, single-precision, e
      character(len=*),parameter :: all=f%all

      ! just use it
      print f%all, 'gamma=',uc%qp%gamma    ! universal constant, quad-precision, gamma
      print all, 'e=',e

      ! or rename it with ASSOCIATE
      associate (gamma => uc%dp%gamma)
	 print all,'gamma=',gamma
      end associate

      end program test_universal_constants




				 May 26, 2023	     M_constants(3m_constants)
meters_to_feet(3m_units)			      meters_to_feet(3m_units)



NAME
  meters_to_feet(3f) - [M_units:LENGTH] converts a measurement in meters to
  feet (LICENSE:PD)

SYNOPSIS
  elemental real function meters_to_feet(meters)

      class(*),intent(in) :: meters

DESCRIPTION
  Converts feet to meters using the formula:

      feet= meters/12.0/0.0254

OPTIONS
  feet
    any standard scalar value supported by anyscalar_to_real(3f).  This at
    least includes REAL, INTEGER, and DOUBLEPRECISION.

EXAMPLE
  Sample program

     program demo_meters_to_feet
     use M_units, only : meters_to_feet
     implicit none
	write(*,*)'With REAL array input    ', meters_to_feet([ -1.0, 0.0, 1.0 ])
	write(*,*)'With INTEGER array input ', meters_to_feet([ -1,   0,   1   ])
	write(*,*)'With DOUBLEPRECISION     ', meters_to_feet(-1.0d0),meters_to_feet(0.0d0),meters_to_feet(1.0d0)
     end program demo_meters_to_feet

  Results

      With REAL array input	 -3.28083992	   0.00000000	    3.28083992
      With INTEGER array input	 -3.28083992	   0.00000000	    3.28083992
      With DOUBLEPRECISION	 -3.28083992	   0.00000000	    3.28083992


AUTHOR
  John S. Urban

LICENSE
  Public Domain



				 May 26, 2023	      meters_to_feet(3m_units)
nan(3m_units)							 nan(3m_units)



NAME
  nan(3f) - [M_units] return a NaN (Not a number) (LICENSE:PD)

SYNOPSIS
  function nan(value) use,intrinsic :: iso_fortran_env, only: real32, real64,
  real128 real(kind=real32|real64|real128) :: nan
  real(kind=real32|real64|real128) :: value

DESCRIPTION
  Return a NaN (Not a number) value. The type returned will be the same kind
  as the passed value.

  At some point, the IEEE interface should work, with something like

      use,intrinsic :: ieee_arithmetic, only : ieee_value, ieee_quiet_nan
      use,intrinsic :: ieee_arithmetic, only : ieee_support_nan

      if(IEEE_SUPPORT_NAN(x))then	 ! Are IEEE NaNs supported?
	 x=IEEE_VALUE(x,ieee_quiet_nan)  ! Generate an IEEE value.
      endif


OPTIONS
  value
    A real value whose kind is used to define the kind of the returned value.

RETURNS
  nan
    returns a Nan value ("Not a number") on platforms that support NaN values.
    The kind is determined by the kind of the input value.

EXAMPLE
  Sample program

     program demo_nan
     use,intrinsic :: iso_fortran_env, only: real32, real64, real128
     use M_units, only : nan
     implicit none
     real(kind=real32)	:: r32
     real(kind=real64)	:: r64
     real(kind=real128) :: r128
     character(len=256) :: message
     integer		:: ios

	r32=nan(0.0_real32)
	r64=nan(0.0_real64)
	r128=nan(0.0_real128)

	! examples printing the NaN values
	! list directed format
	write(*,*,iomsg=message,iostat=ios)r32,r64,r128
	if(ios.ne.0)write(*,*)trim(message)
	! hexadecimal format to show different kinds
	write(*,'(*(z0,1x))',iomsg=message,iostat=ios)r32,r64,r128
	if(ios.ne.0)write(*,*)trim(message)
	! G0 format
	write(*,'(*(g0,1x))',iomsg=message,iostat=ios)r32,r64,r128
	if(ios.ne.0)write(*,*)trim(message)
	! if a specific numeric field is used
	write(*,'(*(f3.1,1x))',iomsg=message,iostat=ios)r32,r64,r128
	if(ios.ne.0)write(*,*)trim(message)
	! if format is less than three characters
	write(*,'(*(f2.1,1x))',iomsg=message,iostat=ios)r32,r64,r128
	if(ios.ne.0)write(*,*)trim(message)

	! an option to terminate a program when a NaN is encountered
	! (if X is NaN the comparison with 0. is always false.)
	if (.not.(r32<=0.0) .and. .not.(r32>=0.0))then
	   write(*,*)'found nan'
	   stop
	endif

	ALT1: block
	   integer :: x = 2143289344
	   print *, transfer(x, 1.0)	! prints "nan" on i686
	endblock ALT1

     end program demo_nan

  Results:

     NaN      NaN	       NaN
     7FC00000 7FF8000000000000 7FFF8000000000000000000000000000
     NaN NaN NaN
     NaN NaN NaN
     ** ** **
      found nan


SEE ALSO
  IS_NAN(3f)

AUTHOR
  John S. Urban

LICENSE
  Public Domain



				 May 26, 2023			 nan(3m_units)
acosd(3m_units) 					       acosd(3m_units)



NAME
  acosd(3f) - [M_units:TRIGONOMETRY] calculate arccosine of value in degrees
  (LICENSE:PD)

SYNOPSIS
  elemental real function acosd(value)

      class(*),intent(in) :: value

DESCRIPTION
  Calculate arcsine of input value in degrees. It converts the input value
  from degrees to radians and calls acos(3f).

OPTIONS
  value
    any standard scalar value supported by anyscalar_to_double(3f)

EXAMPLE
  Sample program

     program demo_acosd
     use M_units, only :  acosd, cosd
     implicit none
	write(*, *)	  cosd(0.0),cosd(45.0),cosd(120.0),cosd(180.0),cosd(720.0)
	write(*, *)acosd([cosd(0.0),cosd(45.0),cosd(120.0),cosd(180.0),cosd(720.0) ])
     end program demo_acosd

  Results

	1.00000000	0.707106769	-0.500000000	  -1.00000000	    1.00000000
	0.00000000	 45.0000000	  120.000000	   180.000000	    0.00000000


AUTHOR
  John S. Urban

LICENSE
  Public Domain



				 May 26, 2023		       acosd(3m_units)
M_units(3m_units)					     M_units(3m_units)



NAME
  M_units(3fm) - [M_units::INTRO] convert between various physical units
  (LICENSE:MIT)


SYNOPSIS
  procedure definitions:

	elemental real function c2f(celsius)
	elemental real function f2c(fahrenheit)

	elemental real|double function r2d(radians)
	elemental real|double function d2r(degrees)

	elemental real function feet_to_meters(feet)
	elemental real function meters_to_feet(meters)

	elemental real function sind(angle_in_degrees)
	elemental real function cosd(angle_in_degrees)
	elemental real function tand(angle_in_degrees)
	elemental real function asind(x)
	elemental real function acosd(x)
	elemental real function atand(x)
	elemental real function atan2d(x,y)

	elemental double function norm_angle_rad(radians)
	elemental real|double function norm_angle_deg(radians)

	subroutine cartesian_to_spherical(x,y,z,radius,inclination,azimuth)
	subroutine spherical_to_cartesian(radius,inclination,azimuth,x,y,z)
	subroutine cartesian_to_polar(x,y,radius,inclination)
	subroutine polar_to_cartesian(radius,inclination,x,y)


CONSTANTS SYNOPSIS
  function nan() function inf() function is_nan() function is_even()

  Simple constants:

      e,gamma,euler,golden_ratio,pi
      deg_per_rad, rad_per_deg
      c__m_per_sec, c__ft_per_sec


DESCRIPTION
  M_units(3fm) is a Fortran module that collects together basic procedures
  that are used to convert between various physical units and common named
  constants.

  The input values may be any standard scalar value supported by the
  anyscalar_to_real(3f) function (real,integer,doubleprecision) within the
  range allowed by the function.

PROCEDURES
  Angular Units

    •  d2r: Convert degrees to radians

    •  r2d: Convert radians to degrees

  Temperature

    •  c2f: Convert Celsius to Fahrenheit

    •  f2c: Convert Fahrenheit to Celsius

  Distance

    •  feet_to_meters: Convert feet to meters

    •  meters_to_feet: Convert meters to feet

  REAL trig functions where input is in angular degrees instead of radians

    •  elemental real function sind(angle_in_degrees)

    •  elemental real function cosd(angle_in_degrees)

    •  elemental real function tand(angle_in_degrees)

    •  elemental real function asind(x)

    •  elemental real function acosd(x)

    •  elemental real function atand(x)

    •  elemental real function atan2d(x,y)

  Normalize angles into specific ranges

    •  elemental double function norm_angle_rad(angle_in_radians)

    •  elemental real|double function norm_angle_deg(angle_in_degrees)

  Coordinates

    •  cartesian_to_spherical: Convert cartesian coordinates to spherical

    •  spherical: Convert spherical coordinates to cartesian

    •  cartesian_to_polar: Convert cartesian coordinates to polar

    •  polar: Convert polar coordinates to cartesian

  Note that your compiler is less likely to inline small procedures in a
  module than it would statement functions or CONTAINED functions.

CONSTANTS
  c__m_per_sec
    Speed of light in a vacuum

  c__ft_per_sec
    Speed of light in a vacuum "deg_per_rad" "rad_per_deg"

  e The base of the natural logarithm system. "e" was named in honor of Euler,
    but is known as Napier's constant.	"euler"

  gamma
    The Euler-Mascheroni constant is often denoted by a lower-case Gamma.
    "golden_ratio"

  pi
    The ratio of the circumference of a circle to the diameter of the circle

NOTES
  Gamma is defined as

     Gamma = limit ( M -> Infinity ) ( Sum ( 1 <= N <= M ) 1 / N ) - Log ( M )


EXAMPLES
  Simple usage example:

     program demo_M_units
     use M_units, only : r2d, d2r
     use M_units, only : f2c, c2f
     use M_units, only : sind, cosd, tand
     use M_units, only : asind, acosd, atand, atan2d
     !!
     use M_units, only : pi8=>pi
     use M_units, only : e,euler,golden_ratio,deg_per_rad,rad_per_deg
     use M_units, only : c__m_per_sec, c__ft_per_sec
     !!
     implicit none
     real pi
     pi=pi8
     write(*,*)r2d([0.0,PI/4.0,PI/2.0,3.0*PI/2.0,PI])
     write(*,*)d2r([0.0,45.0,90.0,135.0,180.0])
     write(*,*)f2c([-40.0,32.0,212.0])
     write(*,*)c2f([-40.0,0.0,100.0])
     write(*,*)PI
     write(*,*)E
     !!
     write(*,101) "Napier's constant (e) is about ",e
     write(*,101) "The Euler-Mascheroni constant (euler or gamma) is about ",euler
     write(*,101) "pi (pi) is about ",pi8
     write(*,101) "The Golden Ratio (golden_ratio) is about ",golden_ratio
     write(*,101) "Deg_Per_Rad is about ",Deg_Per_Rad
     write(*,101) "Rad_Per_Deg is about ",Rad_Per_Deg
     !!
     write(*,101) "Speed of light in a vacuum (m/sec)	    ", c__m_per_sec
     write(*,101) "Speed of light in a vacuum (ft/sec)	    ", c__ft_per_sec
     !!
     101 format(a,t57,g0)
     !!
     end program demo_M_units

  Results:

     >	 0.00000000	  45.0000000	   90.0000000	    270.000000	     180.000000
     >	 0.00000000	 0.785398185	   1.57079637	    2.35619450	     3.14159274
     >	-40.0000000	  0.00000000	   100.000000
     >	-40.0000000	  32.0000000	   212.000000
     >	 3.14159274
     >	 2.7182818284590451
     >Napier's constant (e) is about			      2.7182818284590451
     >The Euler-Mascheroni constant (euler or gamma) is about 0.57721566490153287
     >pi (pi) is about					      3.1415926535897931
     >The Golden Ratio (golden_ratio) is about		      1.6180339887498949
     >Deg_Per_Rad is about				      57.295779513082323
     >Rad_Per_Deg is about				      0.17453292519943295E-001
     >Speed of light in a vacuum (m/sec)		      299792458.00000000
     >Speed of light in a vacuum (ft/sec)		      983571056.00000000




				 May 26, 2023		     M_units(3m_units)
asind(3m_units) 					       asind(3m_units)



NAME
  asind(3f) - [M_units:TRIGONOMETRY] calculate arcsine of value in degrees
  (LICENSE:PD)

SYNOPSIS
  elemental real function asind(value)

      class(*),intent(in) :: value

DESCRIPTION
  Calculate arcsine of input value in degrees. It converts the input value to
  radians from degrees and calls asin(3f).

OPTIONS
  value
    any standard scalar value supported by anyscalar_to_double(3f)

EXAMPLE
  Sample program

     program demo_asind
     use M_units, only :  asind
     implicit none
	write(*, *)asind([ 0.0, 0.258819044, 0.5, 0.707106829, 0.866025448,  &
			& 0.965925813, 1.0, -8.74227766E-08, -1.0 ])
     end program demo_asind

  Results

	0.0 15.0  30.0 45.0000038  60.00 75.0 90.0 -5.00895612E-06  -90.0


AUTHOR
  John S. Urban

LICENSE
  Public Domain



				 May 26, 2023		       asind(3m_units)
atan2d(3m_units)					      atan2d(3m_units)



NAME
  atan2d(3f) - [M_units:TRIGONOMETRY] calculate arctangent of the complex
  number X + i Y (LICENSE:PD)

SYNOPSIS
  elemental real function atan2d(x,y)

      class(*),intent(in) :: x
      class(*),intent(in) :: y

DESCRIPTION
  Calculate arctangent of arctangent of the complex number

	X + i Y.

  in degrees. It calls atan2(3f) and converts the output from radians to
  degrees.

OPTIONS
  X any standard scalar value supported by anyscalar_to_double(3f)

  Y any standard scalar value supported by anyscalar_to_double(3f)

EXAMPLE
  Sample program:

	    program demo_atan2d
	    use M_units, only : atan2d
	    real(4) :: x = 1.e0_4, y = 0.5e0_4
	      write(*,*)atan2d(y,x)
	    end program demo_atan2d
  Results:

	26.5650501


AUTHOR
  John S. Urban

LICENSE
  Public Domain



				 May 26, 2023		      atan2d(3m_units)
atand(3m_units) 					       atand(3m_units)



NAME
  atand(3f) - [M_units:TRIGONOMETRY] calculate arctangent of value in degrees
  (LICENSE:PD)

SYNOPSIS
  elemental real function atand(value)

      class(*),intent(in) :: value

DESCRIPTION
  Calculate arctangent of input value in degrees. It calls atan(3f) and
  converts the output to degrees from radians.

OPTIONS
  value
    any standard scalar value supported by anyscalar_to_double(3f)

EXAMPLE
  Sample program:

     program demo_atand
     use M_units, only :  atand, tand
     implicit none
	write(*, *)	  tand(0.0),tand(45.0),tand(120.0),tand(180.0),tand(720.0)
	write(*, *)atand([tand(0.0),tand(45.0),tand(120.0),tand(180.0),tand(720.0) ])
     end program demo_atand

  Results:

	0.00000000	 1.00000000	 -1.73205078	  -1.22464685E-16  -4.89858741E-16
	0.00000000	 45.0000000	 -60.0000000	  -7.01670955E-15  -2.80668382E-14


AUTHOR
  John S. Urban

LICENSE
  Public Domain



				 May 26, 2023		       atand(3m_units)
norm_angle_deg(3m_units)			      norm_angle_deg(3m_units)



NAME
  norm_angle_deg(3f) - [M_units:TRIGONOMETRY] Return input angle given in
  degrees as angle between 0 and 360 (LICENSE:PD)


SYNOPSIS
  elemental function norm_angle_deg(ang) result(rev)

      doubleprecision, intent(in) :: ang
      doubleprecision		  :: rev
	 or
      real, intent(in) :: ang
      real	       :: rev
	 or
      integer, intent(in) :: ang
      integer		  :: rev


DESCRIPTION
  Given an input angle in degrees, normalize the value to fall in the range 0
  to 360 degrees.

OPTIONS
  ang
    Input angle (degrees)

RESULTS
  rev
    Return input angle (degrees) normalized to range 0 to 360 degrees

EXAMPLE
  Sample program:

     program demo_norm_angle_deg
     use M_units, only : norm_angle_deg
     implicit none
     real,parameter :: PI=360
     real	    :: val
     integer	    :: i
     do i=-2,2
	val=i*2*pi;   write(*,*)val,norm_angle_deg(val)
	val=i*pi;     write(*,*)val,norm_angle_deg(val)
	val=i*pi/2;   write(*,*)val,norm_angle_deg(val)
	write(*,*)
     enddo
     end program demo_norm_angle_deg

  Results:

       -1440.00000	 0.00000000
       -720.000000	 0.00000000
       -360.000000	 0.00000000

       -720.000000	 0.00000000
       -360.000000	 0.00000000
       -180.000000	 180.000000

	0.00000000	 0.00000000
	0.00000000	 0.00000000
	0.00000000	 0.00000000

	720.000000	 0.00000000
	360.000000	 0.00000000
	180.000000	 180.000000

	1440.00000	 0.00000000
	720.000000	 0.00000000
	360.000000	 0.00000000


LICENSE
  MIT License



				 May 26, 2023	      norm_angle_deg(3m_units)
norm_angle_rad(3m_units)			      norm_angle_rad(3m_units)



NAME
  norm_angle_rad(3f) - [M_units:TRIGONOMETRY] Return input angle given in
  radians as angle between 0 and 2pi (LICENSE:PD)

SYNOPSIS
  elemental function norm_angle_rad(ang) result(rev)

  class(*), intent(in) :: ang

  doubleprecision
    :: rev

DESCRIPTION
  Given an input angle specified in radians, normalize the value to fall in
  the range 0 to 2*pi radians.

OPTIONS
  ang
    Input angle (radians). May be INTEGER, REAL, or DOUBLEPRECISION

RESULTS
  rev
    Return input angle (radians) normalized to range 0>= REV <=2*pi radians

EXAMPLE
  Sample program:

     program demo_norm_angle_rad
     use M_units, only : norm_angle_rad
     implicit none
     real,parameter :: PI=4*atan(1.0)
     real	    :: val
     integer	    :: i
     do i=-2,2
	val=i*2*pi;   write(*,*)val,norm_angle_rad(val)
	val=i*pi;     write(*,*)val,norm_angle_rad(val)
	write(*,*)
     enddo
     write(*,*)norm_angle_rad([-PI/8.0,-PI/4.0,-PI/2.0,-PI,-0.0,PI/8.0,PI/4.0,PI/2.0,PI,0.0])
     end program demo_norm_angle_rad

  Results:

AUTHOR
  John S. Urban

LICENSE
  Public Domain



				 May 26, 2023	      norm_angle_rad(3m_units)
polar_to_cartesian(3m_units)			  polar_to_cartesian(3m_units)



NAME
  polar_to_cartesian(3f) - [M_units:TRIGONOMETRY] convert polar coordinates to
  Cartesian coordinates (LICENSE:PD)

SYNOPSIS
  subroutine polar_to_cartesian(radius,inclination,x,y)

      real,intent(in) :: radius,inclination
      real,intent(out)	:: x,y


DESCRIPTION
  Convert polar coordinate <radius, inclination > with angles in radians to
  cartesian point <X,Y> using the formulas

	x=radius*cos(inclination)
	y=radius*sin(inclination)


OPTIONS
  RADIUS
    The radial distance from the origin (O) to the point (P)

  INCLINATION
    The INCLINATION angle in radians between the inclination reference
    direction (x-axis) and the orthogonal projection of the line OP of the
    reference plane (x-y plane).

RESULTS
  X The distance along the x-axis

  Y The distance along the y-axis

EXAMPLES
  examples of usage

     program demo_polar_to_cartesian
     use M_units, only : polar_to_cartesian
     implicit none
     real    :: x,y
     real    :: r,i
     integer :: ios
     INFINITE: do
	write(*,'(g0)',advance='no')'Enter radius and inclination(in radians):'
	read(*,*,iostat=ios) r, i
	if(ios.ne.0)exit INFINITE
	call polar_to_cartesian(r,i,x,y)
	write(*,*)'x=',x,' y=',y,'radius=',r,'inclination=',i
     enddo INFINITE
     end program demo_polar_to_cartesian

AUTHOR
  John S. Urban

LICENSE
  Public Domain



				 May 26, 2023	  polar_to_cartesian(3m_units)
pounds_to_kilograms(3m_units)			 pounds_to_kilograms(3m_units)



NAME
  pounds_to_kilograms(3f) - [M_units:MASS] - converts a measurement in pounds-
  mass to kilograms.  (LICENSE:PD)


SYNOPSIS
  elemental function pounds_to_kilograms ( pounds )

      class(*),intent(in) ::  pounds
      doubleprecision	  :: pounds_to_kilograms


DESCRIPTION
  Converts pounds-mass to kilograms using the formula:

	kilograms = 0.45359237 * pounds

  The pound (or more properly pound-mass) is a unit of mass used in the
  Imperial, United States Customary, and other systems of measurement. A
  number of different definitions have been used; the most common today is the
  international avoirdupois pound, which is legally defined as exactly
  0.45359237 kilograms. The international standard symbol for the avoirdupois
  pound is lb (from the Roman "libra"); an alternative symbol is lbm).

OPTIONS
  POUNDS
    The weight in pounds.  POUNDS may be any standard scalar value supported
    by anyscalar_to_double(3f).  This at least includes REAL, INTEGER, and
    DOUBLEPRECISION.

RETURN
  POUNDS_TO_KILOGRAMS
    the corresponding weight in kilograms.

EXAMPLE
  Sample program

     program demo_pounds_to_kilograms
     use M_units, only : pounds_to_kilograms
     implicit none
	write(*,*)'REAL 	   ', pounds_to_kilograms(1.0)
	write(*,*)'INTEGER array   ', pounds_to_kilograms([ 0, 1, 100, 200 ])
	write(*,*)'DOUBLEPRECISION ', pounds_to_kilograms(1.0d0)
     end program demo_pounds_to_kilograms

  Typical Results

      REAL		0.45359237000000002
      INTEGER array	0.0000000000000000    0.45359237000000002
		       45.359237000000000    90.718474000000001
      DOUBLEPRECISION	0.45359237000000002


AUTHOR
  John S. Urban

LICENSE
  Public Domain



				 May 26, 2023	 pounds_to_kilograms(3m_units)
r2d(3m_units)							 r2d(3m_units)



NAME
  r2d(3f) - [M_units:TRIGONOMETRY] convert radians to degrees (LICENSE:PD)

SYNOPSIS
  elemental real function r2d(radians)

      class(*),intent(in) :: degrees

DESCRIPTION
  Converts radians to degrees using the formula:

      degrees=real(radians * 180.d0 / acos(-1.0d0))

OPTIONS
  radians
    any standard scalar value supported by anyscalar_to_real(3f).

EXAMPLE
  Sample program

     program demo_r2d
     use M_units, only :  r2d
     use M_units, only : pi8=>pi
     implicit none
     real :: pi=real(pi8)
	write(*,*)'With REAL array input    ', r2d([ 0.0, PI/4.0, PI/2.0, 3.0*PI/2.0, PI ])
	write(*,*)'With INTEGER array input ', r2d([0,1,2,3,4])
	write(*,*)'With DOUBLEPRECISION     ', r2d(0.0d0),r2d(PI/4.0d0),r2d(PI/2.0d0),r2d(3.0d0*PI/2.0d0),r2d(PI)
     end program demo_r2d

  Results

      With REAL array input	  0.00000000	   45.0000000	    90.0000000	     270.000000       180.000000
      With INTEGER array input	  0.00000000	   57.2957802	    114.591560	     171.887344       229.183121
      With DOUBLEPRECISION	  0.00000000	   45.0000000	    90.0000000	     270.000000       180.000000

AUTHOR
  John S. Urban

LICENSE
  Public Domain



				 May 26, 2023			 r2d(3m_units)
sind(3m_units)							sind(3m_units)



NAME
  sind(3f) - [M_units:TRIGONOMETRY] calculate sine of value in degrees
  (LICENSE:PD)

SYNOPSIS
  elemental real function sind(degrees)

      class(*),intent(in) :: degrees

DESCRIPTION
  Calculate sine of input value in degrees

OPTIONS
  degrees
    any standard scalar value supported by anyscalar_to_double(3f)

EXAMPLE
  Sample program

     program demo_sind
     use M_units, only :  sind
     implicit none
	write(*,*)'With REAL array input    ', sind([ 0.0, 15.0, 30.0, 45.0, &
					     & 60.0, 75.0, 90.0, 180.0, 270.0 ])
	write(*,*)'With INTEGER array input ', sind([0,15,30,45,60,75,90,180,270])
	write(*,*)'With DOUBLEPRECISION     ',		 &
	   & sind(0.0d0),sind(15.0d0),sind(90.0/3.0d0),  &
	   & sind(90.0/2.0d0),sind(60.0d0),sind(75.0d0), &
	   & sind(90.0d0),sind(180.0d0),sind(270.0d0)
     end program demo_sind

  Results

     With REAL array input	0.00000000	0.258819044	 0.500000000
				0.707106829	0.866025448	 0.965925813
				1.00000000     -8.74227766E-08	-1.00000000
     With INTEGER array input	0.00000000	0.258819044	 0.500000000
				0.707106829	0.866025448	 0.965925813
				1.00000000	-8.74227766E-08  -1.00000000
     With DOUBLEPRECISION	0.00000000	0.258819044	 0.500000000
				0.707106829	0.866025448	 0.965925813
				1.00000000	-8.74227766E-08  -1.00000000


AUTHOR
  John S. Urban

LICENSE
  Public Domain



				 May 26, 2023			sind(3m_units)
spherical_to_cartesian(3m_units)	      spherical_to_cartesian(3m_units)



NAME
  spherical_to_cartesian(3f) - [M_units:TRIGONOMETRY] convert ISO polar
  coordinates to Cartesian coordinates (LICENSE:PD)

SYNOPSIS
  subroutine spherical_to_cartesian(radius,inclination,azimuth,x,y,z)

      real,intent(in) :: radius,inclination,azimuth
      real,intent(out)	:: x,y,z


DESCRIPTION
  Convert ISO 8000-2:2009 polar coordinate <radius, inclination, azimuth> with
  angles in radians to cartesian point <X,Y,Z> using the formulas

	x=radius*sin(inclination)*cos(azimuth)
	y=radius*sin(inclination)*sin(azimuth)
	z=radius*cos(inclination)


OPTIONS
  RADIUS
    The radial distance from the origin (O) to the point (P)

  INCLINATION
    The zenith angle in radians between the zenith reference direction (z-
    axis) and the line OP

  AZIMUTH
    The azimuth angle in radians between the azimuth reference direction (x-
    axis) and the orthogonal projection of the line OP of the reference plane
    (x-y plane).

RESULTS
  X The distance along the x-axis

  Y The distance along the y-axis

  Z The distance along the z-axis

EXAMPLES
  examples of usage

     program demo_spherical_to_cartesian
     use M_units, only : spherical_to_cartesian
     implicit none
     real    :: x,y,z
     real    :: r,i,a
     integer :: ios
     INFINITE: do
	read(*,*,iostat=ios) x, y, z
	if(ios.ne.0)exit INFINITE
	call spherical_to_cartesian(r,i,a,x,y,z)
	write(*,*)'x=',x,' y=',y,' z=',z,'radius=',r,'inclination=',i,'azimuth=',a
     enddo INFINITE
     end program demo_spherical_to_cartesian

AUTHOR
  John S. Urban

LICENSE
  Public Domain



				 May 26, 2023 spherical_to_cartesian(3m_units)
symbol2atomnum(3m_units)			      symbol2atomnum(3m_units)



NAME
  symbol2atomnum(3f) - [M_units:SYMBOLS] return atomic number given element
  symbol name (LICENSE:PD)

SYNOPSIS
  subroutine symbol2atomnum(symbol,atomnum)

     character(len=2),intent(in) :: symbol
     integer,intent(out)	 :: atomnum


DESCRIPTION
  Given a two-character element symbol name return the corresponding atomic
  number

OPTIONS
  symbol
    two-character symbol name corresponding to atomic number ATOMNUM

RETURNS
  atomnum
    an atomic number from 1 to 109

EXAMPLE
  Sample program

     program demo_symbol2atomnum
     use M_units, only :  symbol2atomnum
     implicit none
     integer	       :: atomnum
     character(len=2)  :: name
     name='Ne'
     call symbol2atomnum(name,atomnum)
     write(*,*)atomnum,name
     end program demo_symbol2atomnum

  Results:

     10 Ne


AUTHOR
  John S. Urban

LICENSE
  Public Domain



				 May 26, 2023	      symbol2atomnum(3m_units)
tand(3m_units)							tand(3m_units)



NAME
  tand(3f) - [M_units:TRIGONOMETRY] calculate tangent of value in degrees
  (LICENSE:PD)

SYNOPSIS
  elemental real function tand(degrees)

      class(*),intent(in) :: degrees

DESCRIPTION
  Calculate tangent of input value in degrees

OPTIONS
  degrees
    any standard scalar value supported by anyscalar_to_double(3f).

EXAMPLE
  Sample program

     program demo_tand
     use M_units, only :  tand
     implicit none
	write(*,*)'With REAL array input    ', &
	  & tand([ 0.0, 15.0, 30.0, 45.0, 60.0, 75.0, 90.0, 180.0, 270.0 ])
	write(*,*)'With INTEGER array input ', &
	  & tand([0,15,30,45,60,75,90,180,270])
	write(*,*)'With DOUBLEPRECISION     ', &
	  & tand(0.0d0),tand(15.0d0),tand(90.0/3.0d0),tand(90.0/2.0d0),&
	  & tand(60.0d0),tand(75.0d0),&
	  & tand(90.0d0),tand(180.0d0),tand(270.0d0)
     end program demo_tand
  Results:

     With REAL array input    0.00000000   0.267949194	 0.577350259
     1.00000000    1.73205078	 3.73205090    1.63312395E+16
     -1.22464685E-16  5.44374649E+15
     With INTEGER array input  0.00000000   0.267949194   0.577350259
     1.00000000    1.73205078	 3.73205090    1.63312395E+16
     -1.22464685E-16  5.44374649E+15
     With DOUBLEPRECISION    0.00000000   0.267949194	0.577350259
     1.00000000    1.73205078	 3.73205090    1.63312395E+16
     -1.22464685E-16  5.44374649E+15

  Results

AUTHOR
  John S. Urban

LICENSE
  Public Domain



				 May 26, 2023			tand(3m_units)
atomnum2symbol(3m_units)			      atomnum2symbol(3m_units)



NAME
  atomnum2symbol(3f) - [M_units:SYMBOLS] return element symbol given atomic
  number (LICENSE:PD)

SYNOPSIS
  subroutine atomnum2symbol(atomnum,symbol)

     integer,intent(in) 	  :: atomnum
     character(len=2),intent(out) :: symbol


DESCRIPTION
  Given an atomic number in the range of 1 to 109 return the corresponding
  element symbol name

OPTIONS
  atomnum
    an atomic number from 1 to 109

RETURNS
  symbol
    two-character symbol name corresponding to atomic number ATOMNUM

EXAMPLE
  Sample program

     program demo_atomnum2symbol
     use M_units, only :  atomnum2symbol
     implicit none
     character(len=2)  :: name
     integer	       :: i
     do i=1,109
	call atomnum2symbol(i,name)
	write(*,*)i,name
     enddo
     end program demo_atomnum2symbol

  Results:

	 >   1 H
	 >   2 He
	 >   3 Li
	 >   4 Be
	 >   5 B
	 >   6 C
	 >   7 N
	 >   8 O
	 >   9 F
	 >  10 Ne
	 >  11 Na
	 >  12 Mg
	 >  13 Al
	 >  14 Si
	 >  15 P
	 >  16 S
	 >  17 Cl
	 >  18 Ar
	 >  19 K
	 >  20 Ca
	 >  21 Sc
	 >  22 Ti
	 >  23 V
	 >  24 Cr
	 >  25 Mn
	 >  26 Fe
	 >  27 Co
	 >  28 Ni
	 >  29 Cu
	 >  30 Zn
	 >  31 Ga
	 >  32 Ge
	 >  33 As
	 >  34 Se
	 >  35 Br
	 >  36 Kr
	 >  37 Rb
	 >  38 Sr
	 >  39 Y
	 >  40 Zr
	 >  41 Nb
	 >  42 Mo
	 >  43 Tc
	 >  44 Ru
	 >  45 Rh
	 >  46 Pd
	 >  47 Ag
	 >  48 Cd
	 >  49 In
	 >  50 Sn
	 >  51 Sb
	 >  52 Te
	 >  53 I
	 >  54 Xe
	 >  55 Cs
	 >  56 Ba
	 >  57 La
	 >  58 Ce
	 >  59 Pr
	 >  60 Nd
	 >  61 Pm
	 >  62 Sm
	 >  63 Eu
	 >  64 Gd
	 >  65 Tb
	 >  66 Dy
	 >  67 Ho
	 >  68 Er
	 >  69 Tm
	 >  70 Yb
	 >  71 Lu
	 >  72 Hf
	 >  73 Ta
	 >  74 W
	 >  75 Re
	 >  76 Os
	 >  77 Ir
	 >  78 Pt
	 >  79 Au
	 >  80 Hg
	 >  81 Tl
	 >  82 Pb
	 >  83 Bi
	 >  84 Po
	 >  85 At
	 >  86 Rn
	 >  87 Fr
	 >  88 Ra
	 >  89 Ac
	 >  90 Th
	 >  91 Pa
	 >  92 U
	 >  93 Np
	 >  94 Pu
	 >  95 Am
	 >  96 Cm
	 >  97 Bk
	 >  98 Cf
	 >  99 Es
	 > 100 Fm
	 > 101 Md
	 > 102 No
	 > 103 Lr
	 > 104 Rf
	 > 105 Db
	 > 106 Sg
	 > 107 Bh
	 > 108 Hs
	 > 109 Mt


AUTHOR
  John S. Urban

LICENSE
  Public Domain



				 May 26, 2023	      atomnum2symbol(3m_units)
c2f(3m_units)							 c2f(3m_units)



NAME
  c2f(3f) - [M_units:TEMPERATURE] convert Celsius to Fahrenheit (LICENSE:PD)

SYNOPSIS
  elemental real function c2f(celsius)

      class(*),intent(in) :: celsius

DESCRIPTION
  Converts Celsius temperatures to Fahrenheit using the formula:

      fahrenheit=(celsius+40.0)*9.0/5.0 - 40.0

OPTIONS
  celsius
    any standard scalar value supported by anyscalar_to_real(3f).

EXAMPLE
  Sample program

     program demo_c2f
     use M_units, only : c2f
     implicit none
	write(*,*)'With REAL array input    ', c2f([ -40.0, 0.0, 100.0 ])
	write(*,*)'With INTEGER array input ', c2f([ -40,   0,	 100   ])
	write(*,*)'With DOUBLEPRECISION     ', c2f(-40.0d0),c2f(0.0d0),c2f(100.0d0)
     end program demo_c2f

  Results

     With REAL array input	-40.0000000	  32.0000000	   212.000000
     With INTEGER array input	-40.0000000	  32.0000000	   212.000000
     With DOUBLEPRECISION	-40.0000000	  32.0000000	   212.000000

AUTHOR
  John S. Urban

LICENSE
  Public Domain



				 May 26, 2023			 c2f(3m_units)
cartesian_to_polar(3m_units)			  cartesian_to_polar(3m_units)



NAME
  cartesian_to_polar(3f) - [M_units:TRIGONOMETRY] convert Cartesian
  coordinates to polar coordinates (LICENSE:PD)

SYNOPSIS
  subroutine cartesian_to_polar(x,y,radius,inclination)

      real,intent(in)  :: y,z
      real,intent(out) :: radius,inclination


DESCRIPTION
  Convert a cartesian point <X,Y,Z> to polar coordinates <radius, inclination>
  with angles in radians using the formulas

	radius=sqrt(x**2+y**2)
	inclination=atan2(y,x)


OPTIONS
  X The distance along the x-axis

  Y The distance along the y-axis

RESULTS
  RADIUS
    The radial distance from the origin (O) to the point (P)

  INCLINATION
    The inclination angle in radians between the inclination reference
    direction (x-axis) and the orthogonal projection of the line OP of the
    reference plane (x-y plane).

EXAMPLES
  examples of usage

     program demo_cartesian_to_polar
     use M_units, only : cartesian_to_polar
     implicit none
     real    :: x,y
     real    :: r,i
     integer :: ios
     INFINITE: do
	read(*,*,iostat=ios) x, y
	if(ios.ne.0)exit INFINITE
	call cartesian_to_polar(x,y,r,i)
	write(*,*)'x=',x,' y=',y,'radius=',r,'inclination=',i
     enddo INFINITE
     end program demo_cartesian_to_polar

AUTHOR
  John S. Urban

LICENSE
  Public Domain



				 May 26, 2023	  cartesian_to_polar(3m_units)
cartesian_to_spherical(3m_units)	      cartesian_to_spherical(3m_units)



NAME
  cartesian_to_spherical(3f) - [M_units:TRIGONOMETRY] convert Cartesian
  coordinates to ISO polar coordinates (LICENSE:PD)

SYNOPSIS
  subroutine cartesian_to_spherical(x,y,z,radius,inclination,azimuth)

      real,intent(in)  :: x,y,z
      real,intent(out) :: radius,inclination,azimuth


DESCRIPTION
  Convert a cartesian point <X,Y,Z> to ISO 8000-2:2009 polar coordinates
  <radius, inclination, azimuth> with angles in radians using the formulas

	radius=sqrt(x**2+y**2+z**2)
	inclination=acos(z/radius)
	azimuth=atan2(y,x)


OPTIONS
  X The distance along the x-axis

  Y The distance along the y-axis

  Z The distance along the z-axis

RESULTS
  RADIUS
    The radial distance from the origin (O) to the point (P)

  INCLINATION
    The zenith angle in radians between the zenith reference direction (z-
    axis) and the line OP

  AZIMUTH
    The azimuth angle in radians between the azimuth reference direction (x-
    axis) and the orthogonal projection of the line OP of the reference plane
    (x-y plane).

EXAMPLES
  examples of usage

     program demo_cartesian_to_spherical
     use M_units, only : cartesian_to_spherical
     implicit none
     real    :: x,y,z
     real    :: r,i,a
     integer :: ios
     INFINITE: do
	read(*,*,iostat=ios) x, y, z
	if(ios.ne.0)exit INFINITE
	call cartesian_to_spherical(x,y,z,r,i,a)
	write(*,*)'x=',x,' y=',y,' z=',z,'radius=',r,'inclination=',i,'azimuth=',a
     enddo INFINITE
     end program demo_cartesian_to_spherical

AUTHOR
  John S. Urban

LICENSE
  Public Domain



				 May 26, 2023 cartesian_to_spherical(3m_units)
cosd(3m_units)							cosd(3m_units)



NAME
  cosd(3f) - [M_units:TRIGONOMETRY] calculate cosine of value in degrees
  (LICENSE:PD)

SYNOPSIS
  elemental real function cosd(degrees)

      class(*),intent(in) :: degrees

DESCRIPTION
  Calculate cosine of input value in degrees

OPTIONS
  degrees
    any standard scalar value supported by anyscalar_to_double(3f).

EXAMPLE
  Sample program

     program demo_cosd
     use M_units, only :  cosd
     implicit none
	write(*,*)'With REAL array input    ', &
	& cosd([ 0.0, 15.0, 30.0, 45.0, 60.0, 75.0, 90.0, 180.0, 270.0 ])
	write(*,*)'With INTEGER array input ',	&
	& cosd([0,15,30,45,60,75,90,180,270])
	write(*,*)'With DOUBLEPRECISION     ',	      &
	& cosd(0.0d0),cosd(15.0d0),cosd(90.0/3.0d0),  &
	& cosd(90.0/2.0d0),cosd(60.0d0),cosd(75.0d0), &
	& cosd(90.0d0),cosd(180.0d0),cosd(270.0d0)
     end program demo_cosd

  Results

      With REAL array input	 1.00000000	  0.965925813	0.866025448
				 0.707106769	  0.499999970	0.258819073
				-4.37113883E-08  -1.00000000	1.19248806E-08
      With INTEGER array input	 1.00000000	  0.965925813	0.866025448
				 0.707106769	  0.499999970	0.258819073
				-4.37113883E-08  -1.00000000	1.19248806E-08
      With DOUBLEPRECISION	 1.00000000	  0.965925813	0.866025448
				 0.707106769	  0.499999970	0.258819073
				-4.37113883E-08  -1.00000000	1.19248806E-08


AUTHOR
  John S. Urban

LICENSE
  Public Domain



				 May 26, 2023			cosd(3m_units)
d2r(3m_units)							 d2r(3m_units)



NAME
  d2r(3f) - [M_units:TRIGONOMETRY] convert degrees to radians (LICENSE:PD)

SYNOPSIS
  elemental real function d2r(degrees)

      class(*),intent(in) :: radians

DESCRIPTION
  Converts degrees to radians using the formula:

      radians=real(degrees*acos(-1.0d0)/180.d0)

OPTIONS
  degrees
    any standard scalar value supported by anyscalar_to_real(3f).  This
    includes REAL, INTEGER, DOUBLEPRECISION, ... .

EXAMPLE
  Sample program

     program demo_d2r
     use M_units, only :  d2r
     implicit none
	write(*,*)'With REAL array input    ', d2r([0.0,45.0,90.0,135.0,180.0])
	write(*,*)'With INTEGER array input ', d2r([0,	45,  90,  135,	180  ])
	write(*,*)'With DOUBLEPRECISION     ', &
	& d2r(0.0d0),d2r(45.0d0),d2r(90.0d0),d2r(135.0d0),d2r(180.0d0)
     end program demo_d2r

  Results

     With REAL array input    0.00000 0.785398185 1.57079637 2.35619450 3.14159274
     With INTEGER array input 0.00000 0.785398185 1.57079637 2.35619450 3.14159274
     With DOUBLEPRECISION     0.00000 0.785398185 1.57079637 2.35619450 3.14159274


AUTHOR
  John S. Urban

LICENSE
  Public Domain



				 May 26, 2023			 d2r(3m_units)
f2c(3m_units)							 f2c(3m_units)



NAME
  f2c(3f) - [M_units:TEMPERATURE] convert Fahrenheit to Celsius (LICENSE:PD)

SYNOPSIS
  elemental real function f2c(fahrenheit)

      class(*),intent(in) :: fahrenheit

DESCRIPTION
  Converts Fahrenheit temperatures to Celsius using the formula:

      celsius=(fahrenheit+40.0)*5.0/9.0 - 40.0

OPTIONS
  fahrenheit
    any standard scalar value supported by anyscalar_to_real(3f).

EXAMPLE
  Sample program

     program demo_f2c
     use M_units, only :  f2c
     implicit none
	write(*,*)'With REAL array input    ', f2c([ -40.0,32.0, 212.0 ])
	write(*,*)'With INTEGER array input ', f2c([ -40,  32,	 212   ])
	write(*,*)'With DOUBLEPRECISION     ', f2c(-40.0d0),f2c(32.0d0),f2c(212.0d0)
     end program demo_f2c

  Results

     With REAL array input	-40.0000000	  0.00000000	   100.000000
     With INTEGER array input	-40.0000000	  0.00000000	   100.000000
     With DOUBLEPRECISION	-40.0000000	  0.00000000	   100.000000


AUTHOR
  John S. Urban

LICENSE
  Public Domain



				 May 26, 2023			 f2c(3m_units)
feet_to_meters(3m_units)			      feet_to_meters(3m_units)



NAME
  feet_to_meters(3f) - [M_units:LENGTH] converts a measurement in feet to
  meters (LICENSE:PD)

SYNOPSIS
  elemental doubleprecision function feet_to_meters(feet)

      class(*),intent(in) :: feet

DESCRIPTION
  Converts feet to meters using the formula:

      meters = 0.0254 * 12.0 * feet

OPTIONS
  feet
    any standard scalar value supported by anyscalar_to_real(3f).  This at
    least includes REAL, INTEGER, and DOUBLEPRECISION.

EXAMPLE
  Sample program

     program demo_feet_to_meters
     use M_units, only : feet_to_meters
     implicit none
	write(*,*)'With REAL array input    ', &
		& feet_to_meters([ -1.0, 0.0, 1.0 ,1.0/12.0])
	write(*,*)'With INTEGER array input ', &
		& feet_to_meters([ -1,	 0,   1   ])
	write(*,*)'With DOUBLEPRECISION     ', &
		& feet_to_meters(-1.0d0), &
		& feet_to_meters(0.0d0), &
		& feet_to_meters(1.0d0)
     end program demo_feet_to_meters

  Results

      With REAL array input	-0.304800004   0.00000000  0.304800004	2.54000016E-02
      With INTEGER array input	-0.304800004   0.00000000  0.304800004
      With DOUBLEPRECISION	-0.304800004   0.00000000  0.304800004


AUTHOR
  John S. Urban

LICENSE
  Public Domain



				 May 26, 2023	      feet_to_meters(3m_units)
inf(3m_units)							 inf(3m_units)



NAME
  inf(3f) - [M_units] return an inf (Infinity) (LICENSE:PD)

SYNOPSIS
  function inf(value) use,intrinsic :: iso_fortran_env, only: real32, real64,
  real128 real(kind=real32|real64|real128) :: inf
  real(kind=real32|real64|real128) :: value

DESCRIPTION
  Return an inf (Infinity) value. The type returned will be the same kind as
  the passed value.

OPTIONS
  value
    A real value whose kind is used to define the kind of the returned value.

RETURNS
  inf
    returns an inf value ("Infinity") on platforms that support inf values.
    The kind is determined by the kind of the input value.

EXAMPLE
  Sample program

       program demo_inf
       use,intrinsic :: iso_fortran_env, only: real32, real64, real128
       use M_units, only : inf
       implicit none
       real(kind=real32)  :: r32
       real(kind=real64)  :: r64
       real(kind=real128) :: r128
       character(len=256) :: message
       integer		  :: ios
	  r32=inf(0.0_real32)
	  r64=inf(0.0_real64)
	  r128=inf(0.0_real128)
	  write(*,*,iomsg=message,iostat=ios)r32,r64,r128
	  if(ios.ne.0)write(*,*)trim(message)
	  write(*,'(z0)',iomsg=message,iostat=ios)r32,r64,r128
	  if(ios.ne.0)write(*,*)trim(message)
	  write(*,'(g0)',iomsg=message,iostat=ios)r32,r64,r128
	  if(ios.ne.0)write(*,*)trim(message)
	  write(*,'(f3.1)',iomsg=message,iostat=ios)r32,r64,r128
	  if(ios.ne.0)write(*,*)trim(message)
	  write(*,'(f2.1)',iomsg=message,iostat=ios)r32,r64,r128
	  if(ios.ne.0)write(*,*)trim(message)
       end program demo_inf
  Results:

      Infinity Infinity Infinity
  7F800000 7FF0000000000000 7FFF0000000000000000000000000000 Inf Inf Inf Inf
  Inf Inf ** ** **

AUTHOR
  John S. Urban

LICENSE
  Public Domain



				 May 26, 2023			 inf(3m_units)
is_even(3m_units)					     is_even(3m_units)



NAME
  is_even(3f) - [M_units] determine if integer is even (LICENSE:PD)

SYNOPSIS
  elemental pure logical is_even(int)

      integer(kind=int8|int16|int32|int64) :: int

DESCRIPTION
  Determine if an integer is even or not.

OPTIONS
  int
    The integer to test

RETURNS
  is_even
    logical value is .true. if the input value INT is even

EXAMPLE
  simple example

      program demo_is_even
      use M_units, only : is_even
      implicit none
      integer :: i
	 write(*,*)is_even(0)
	 write(*,*)is_even(-1)
	 write(*,*)is_even(-2)
	 write(*,*)is_even(+1)
	 write(*,*)is_even(+2)
	 write(*,*)is_even([10,11,17,19,22])
	 write(*,*)(is_even(i),i=-10,10)
      end program demo_is_even
  Expected output

   T
   F
   T
   F
   T
   T F F F T
   T F T F T F T F T F T F T F T F T F T F T
LICENSE
  Public Domain



				 May 26, 2023		     is_even(3m_units)
is_nan(3m_units)					      is_nan(3m_units)



NAME
  is_nan(3f) - [M_units] determine if integer is a Nan (Not a Number) value
  (LICENSE:PD)

SYNOPSIS
  elemental pure logical is_nan(value)

      integer(kind=real32|real64|real128|complex) :: value

DESCRIPTION
  Determine if a real or complex value is a NaN (Not a Number) value

OPTIONS
  value
    The value to test

EXAMPLE
  simple example

      program demo_is_nan
      use M_units, only : is_nan
      real :: x
      character(len=*),parameter   :: linei='Infinity'
      character(len=*),parameter   :: line='NaN'
      character(len=:),allocatable :: readable
      real,parameter :: arr(*)=[-100.0,100.0,huge(0.0)]
	 readable=linei
	 read(readable,*)x
	 write(*,*)is_nan(x),x	 ! note Infinity is not a Nan
	 write(*,*)is_nan(-x),-x
	 readable=line
	 read(readable,*)x
	 write(*,*)is_nan(x),x
	 write(*,*)x==x,x  ! note Nan is never equal to another value
	 write(*,*)is_nan(arr),arr
      end program demo_is_nan

  Expected results

      F 	Infinity
      F        -Infinity
      T 	     NaN
      F 	     NaN
      F F F  -100.000000       100.000000	3.40282347E+38

AUTHOR
  John S. Urban

LICENSE
  Public Domain



				 May 26, 2023		      is_nan(3m_units)
+ echo '>>>> run make'
>>>> run make
+ cd ..
+ make clean
make: *** No rule to make target 'clean'.  Stop.
+ make F90=gfortran gfortran
make: *** No rule to make target 'gfortran'.  Stop.
+ make doxygen
make: *** No rule to make target 'doxygen'.  Stop.
+ make man
make: *** No rule to make target 'man'.  Stop.
+ make ship
make: *** No rule to make target 'ship'.  Stop.
+ make help
make: *** No rule to make target 'help'.  Stop.
+ make clean
make: *** No rule to make target 'clean'.  Stop.
+ echo '>>>> fpm test'
>>>> fpm test
+ cd ../..
+ fpm test
<INFO> No tests to run
0
+ echo '>>>> make BOOK html document'
>>>> make BOOK html document
+ env MANPATH=../../man mandb -c
mandb: warning: $MANPATH set, ignoring /etc/manpath.config
Updating index cache for path `/home/urbanjs/venus/V600/github/M_framework/candidates/M_units/src/source/../../man/man1'. Wait...
Updating index cache for path `/home/urbanjs/venus/V600/github/M_framework/candidates/M_units/src/source/../../man/man3'. Wait...
Processing manual pages under /home/urbanjs/venus/V600/github/M_framework/candidates/M_units/src/source/../../man...
Updating index cache for path `/home/urbanjs/venus/V600/github/M_framework/candidates/M_units/src/source/../../man/man2'. Wait...
Updating index cache for path `/home/urbanjs/venus/V600/github/M_framework/candidates/M_units/src/source/../../man/man4'. Wait...
Updating index cache for path `/home/urbanjs/venus/V600/github/M_framework/candidates/M_units/src/source/../../man/man6'. Wait...
Updating index cache for path `/home/urbanjs/venus/V600/github/M_framework/candidates/M_units/src/source/../../man/man7'. Wait...
Updating index cache for path `/home/urbanjs/venus/V600/github/M_framework/candidates/M_units/src/source/../../man/man8'. Wait...
Updating index cache for path `/home/urbanjs/venus/V600/github/M_framework/candidates/M_units/src/source/../../man/man5'. Wait...
done.
Checking for stray cats under /home/urbanjs/venus/V600/github/M_framework/candidates/M_units/src/source/../../man...
Processing manual pages under /home/urbanjs/venus/V600/github/M_framework/candidates/M_units/src/source/../../man/cat8...
Processing manual pages under /home/urbanjs/venus/V600/github/M_framework/candidates/M_units/src/source/../../man/cat1...
Processing manual pages under /home/urbanjs/venus/V600/github/M_framework/candidates/M_units/src/source/../../man/cat3...
Processing manual pages under /home/urbanjs/venus/V600/github/M_framework/candidates/M_units/src/source/../../man/cat4...
Processing manual pages under /home/urbanjs/venus/V600/github/M_framework/candidates/M_units/src/source/../../man/cat6...
Processing manual pages under /home/urbanjs/venus/V600/github/M_framework/candidates/M_units/src/source/../../man/cat2...
Processing manual pages under /home/urbanjs/venus/V600/github/M_framework/candidates/M_units/src/source/../../man/cat5...
Processing manual pages under /home/urbanjs/venus/V600/github/M_framework/candidates/M_units/src/source/../../man/cat7...
8 man subdirectories contained newer manual pages.
28 manual pages were added.
0 stray cats were added.
+ env OUTPUT_DIR=../../docs/ MAN_CMD=man MANPATH=../../man GPF_book M_constants m_constants
Creating book M_constants
                                                                                        
                                                                                        
 XX   XX                                                                                
  X   X                                            X                       X            
  XX XX                                            X                       X            
  XX XX           XXXXX   XXXXX  XX XX    XXXXX   XXXX    XXXX   XX XX    XXXX    XXXXX 
  X X X          X     X X     X  XX  X  X     X   X          X   XX  X    X     X     X
  X X X          X       X     X  X   X   XXX      X      XXXXX   X   X    X      XXX   
  X   X          X       X     X  X   X      XX    X     X    X   X   X    X         XX 
  X   X          X     X X     X  X   X  X     X   X  X  X    X   X   X    X  X  X     X
 XXX XXX          XXXXX   XXXXX  XXX XXX  XXXXX     XX    XXXX X XXX XXX    XX    XXXXX 
                                                                                        
        XXXXXXXX                                                                        
/home/urbanjs/venus/V600/github/github_scripts/bash/GPF_book:
________________________________________________________________________________
   TOPIC      M_constants
   SECTION    m_constants
   OUTPUT_DIR ../../docs/
   MAN_CMD    man
   MANPATH    ../../man
________________________________________________________________________________
+ HTML
+ cat
+ cat
++ date +%Y-%m-%d
+ cat
+ cat
+ cat
+ echo 'function loadthem(){'
+ uniq
+ read NAME
+ '[' M_constants = INDEX ']'
+ awk '{printf "%s.%s.html\n",$1,$2}'
+ tr -d '()'
+ echo M_constants.3m_constants.html
+ uniq
+ env LC_ALL=C /usr/bin/sort -k 2r,2r -k 1,1
+ man -k '\[M_constants\>'
+ grep -i '(3M_constants)'
+ man --section 3m_constants -k .
+ grep -i '(3M_constants)'
+ env LC_ALL=C /usr/bin/sort -k 2r,2r -k 1,1
+ grep -vi '(3M_constants)'
+ man -k '\[M_constants\>'
+ '[' -r ../../docs//M_constants.3m_constants.html..html ']'
+ read NAME
+ '[' -r ../../docs//M_constants.3m_constants.html ']'
+ echo 'append("M_constants.3m_constants.html");'
+ read NAME
+ echo '}'
+ exit
+ echo '>>>> make HTML index to manpages'
>>>> make HTML index to manpages
+ env MANPATH=../../man OUTDIR=../../docs GPF_manpage_index
making HTML index for section 1 in ../../docs/man1.html
FOUND 0 for section 1
making HTML index for section 2 in ../../docs/man2.html
FOUND 0 for section 2
making HTML index for section 3 in ../../docs/man3.html
FOUND 28 for section 3
<GPF_manpage_index><MANPATH>../../man
<GPF_manpage_index><NAME>M_constants<SECT>(3m_constants)<DASH>-
<GPF_manpage_index><NAME>M_units<SECT>(3m_units)<DASH>-
<GPF_manpage_index><NAME>feet_to_meters<SECT>(3m_units)<DASH>-
<GPF_manpage_index><NAME>meters_to_feet<SECT>(3m_units)<DASH>-
<GPF_manpage_index><NAME>pounds_to_kilograms<SECT>(3m_units)<DASH>-
<GPF_manpage_index><NAME>atomnum2symbol<SECT>(3m_units)<DASH>-
<GPF_manpage_index><NAME>symbol2atomnum<SECT>(3m_units)<DASH>-
<GPF_manpage_index><NAME>c2f<SECT>(3m_units)<DASH>-
<GPF_manpage_index><NAME>f2c<SECT>(3m_units)<DASH>-
<GPF_manpage_index><NAME>acosd<SECT>(3m_units)<DASH>-
<GPF_manpage_index><NAME>asind<SECT>(3m_units)<DASH>-
<GPF_manpage_index><NAME>atan2d<SECT>(3m_units)<DASH>-
<GPF_manpage_index><NAME>atand<SECT>(3m_units)<DASH>-
<GPF_manpage_index><NAME>cartesian_to_polar<SECT>(3m_units)<DASH>-
<GPF_manpage_index><NAME>cartesian_to_spherical<SECT>(3m_units)<DASH>-
<GPF_manpage_index><NAME>cosd<SECT>(3m_units)<DASH>-
<GPF_manpage_index><NAME>d2r<SECT>(3m_units)<DASH>-
<GPF_manpage_index><NAME>norm_angle_deg<SECT>(3m_units)<DASH>-
<GPF_manpage_index><NAME>norm_angle_rad<SECT>(3m_units)<DASH>-
<GPF_manpage_index><NAME>polar_to_cartesian<SECT>(3m_units)<DASH>-
<GPF_manpage_index><NAME>r2d<SECT>(3m_units)<DASH>-
<GPF_manpage_index><NAME>sind<SECT>(3m_units)<DASH>-
<GPF_manpage_index><NAME>spherical_to_cartesian<SECT>(3m_units)<DASH>-
<GPF_manpage_index><NAME>tand<SECT>(3m_units)<DASH>-
<GPF_manpage_index><NAME>inf<SECT>(3m_units)<DASH>-
<GPF_manpage_index><NAME>is_even<SECT>(3m_units)<DASH>-
<GPF_manpage_index><NAME>is_nan<SECT>(3m_units)<DASH>-
<GPF_manpage_index><NAME>nan<SECT>(3m_units)<DASH>-
making HTML index for section 4 in ../../docs/man4.html
FOUND 0 for section 4
making HTML index for section 5 in ../../docs/man5.html
FOUND 0 for section 5
making HTML index for section 6 in ../../docs/man6.html
FOUND 0 for section 6
making HTML index for section 7 in ../../docs/man7.html
FOUND 0 for section 7
making HTML index for section 8 in ../../docs/man8.html
FOUND 0 for section 8
making HTML index for Fortran Intrinsics for section 3 in ../../docs/man3i.html
FOUND 0 for section 3
making HTML index for Fortran Intrinsics for section 7 in ../../docs/man7i.html
FOUND 0 for section 7
sed: can't read ../../docs/*.[37]fortran.html: No such file or directory
+ echo '>>>> spell check'
>>>> spell check
+ spell ../../README.md
+ xargs -n 8
+ column -t
+ echo '>>>> update GPF project and documents'
>>>> update GPF project and documents
+ unset GITHUB
+ make.one libGPF
1778195 (process ID) old priority 0, new priority 19
W-A-R-N-I-N-G: no ccheck.c file (required for configured versions)
+ echo '>>>> run test'
>>>> run test
+ cd ../../test
+ ccall 'test_suite_M_constants.[fF]90'
Empty input file test_suite_M_constants.[fF]90
+ test_suite_M_constants
/home/urbanjs/venus/V600/github/github_scripts/bash/GPF_build_module: line 198: test_suite_M_constants: command not found
+ echo '>>>> GPF_fman'
>>>> GPF_fman
+ '[' -d doc/ ']'
+ GPF_fman m_constants doc
+++ dirname /home/urbanjs/venus/V600/github/github_scripts/bash/GPF_fman
++ realpath /home/urbanjs/venus/V600/github/github_scripts/bash
+ HERE=/home/urbanjs/venus/V600/github/github_scripts/bash
++ dirname /home/urbanjs/venus/V600/github/github_scripts/bash
+ BASE=/home/urbanjs/venus/V600/github/github_scripts
++ dirname /home/urbanjs/venus/V600/github/github_scripts
+ BASE=/home/urbanjs/venus/V600/github
+ DOCS=/home/urbanjs/venus/V600/github/docs
+ export PACKAGE=m_constants
+ PACKAGE=m_constants
+ export TEXTDIR=doc
+ TEXTDIR=doc
+ export NAME
+ cd doc
+ WRITE_MODULE
+ cat
+ cat
+ cat
+ cat
+ COUNT=0
+ read NAME
+ ls acosd.3m_units.man asind.3m_units.man atan2d.3m_units.man atand.3m_units.man atomnum2symbol.3m_units.man c2f.3m_units.man cartesian_to_polar.3m_units.man cartesian_to_spherical.3m_units.man cosd.3m_units.man d2r.3m_units.man f2c.3m_units.man feet_to_meters.3m_units.man inf.3m_units.man is_even.3m_units.man is_nan.3m_units.man M_constants.3m_constants.man meters_to_feet.3m_units.man M_units.3m_units.man nan.3m_units.man norm_angle_deg.3m_units.man norm_angle_rad.3m_units.man polar_to_cartesian.3m_units.man pounds_to_kilograms.3m_units.man r2d.3m_units.man sind.3m_units.man spherical_to_cartesian.3m_units.man symbol2atomnum.3m_units.man tand.3m_units.man
+ SHORTNAME=acosd
+ COUNT=1
+ cat
++ TOCHARACTER
++ :
++ cat acosd.3m_units.man
++ sed -e 's/'\''/'\'''\''/g'
++ sed -e 's/^/'\''/'
++ sed -e 's/$/'\'', \&/'
++ cat
+ read NAME
+ SHORTNAME=asind
+ COUNT=2
+ cat
++ TOCHARACTER
++ :
++ sed -e 's/'\''/'\'''\''/g'
++ sed -e 's/^/'\''/'
++ cat asind.3m_units.man
++ sed -e 's/$/'\'', \&/'
++ cat
+ read NAME
+ SHORTNAME=atan2d
+ COUNT=3
+ cat
++ TOCHARACTER
++ :
++ sed -e 's/'\''/'\'''\''/g'
++ cat atan2d.3m_units.man
++ sed -e 's/$/'\'', \&/'
++ sed -e 's/^/'\''/'
++ cat
+ read NAME
+ SHORTNAME=atand
+ COUNT=4
+ cat
++ TOCHARACTER
++ :
++ cat atand.3m_units.man
++ sed -e 's/^/'\''/'
++ sed -e 's/'\''/'\'''\''/g'
++ sed -e 's/$/'\'', \&/'
++ cat
+ read NAME
+ SHORTNAME=atomnum2symbol
+ COUNT=5
+ cat
++ TOCHARACTER
++ :
++ sed -e 's/^/'\''/'
++ sed -e 's/'\''/'\'''\''/g'
++ cat atomnum2symbol.3m_units.man
++ sed -e 's/$/'\'', \&/'
++ cat
+ read NAME
+ SHORTNAME=c2f
+ COUNT=6
+ cat
++ TOCHARACTER
++ :
++ cat c2f.3m_units.man
++ sed -e 's/'\''/'\'''\''/g'
++ sed -e 's/^/'\''/'
++ sed -e 's/$/'\'', \&/'
++ cat
+ read NAME
+ SHORTNAME=cartesian_to_polar
+ COUNT=7
+ cat
++ TOCHARACTER
++ :
++ cat cartesian_to_polar.3m_units.man
++ sed -e 's/'\''/'\'''\''/g'
++ sed -e 's/^/'\''/'
++ sed -e 's/$/'\'', \&/'
++ cat
+ read NAME
+ SHORTNAME=cartesian_to_spherical
+ COUNT=8
+ cat
++ TOCHARACTER
++ :
++ cat cartesian_to_spherical.3m_units.man
++ sed -e 's/^/'\''/'
++ sed -e 's/$/'\'', \&/'
++ sed -e 's/'\''/'\'''\''/g'
++ cat
+ read NAME
+ SHORTNAME=cosd
+ COUNT=9
+ cat
++ TOCHARACTER
++ :
++ sed -e 's/'\''/'\'''\''/g'
++ cat cosd.3m_units.man
++ sed -e 's/^/'\''/'
++ sed -e 's/$/'\'', \&/'
++ cat
+ read NAME
+ SHORTNAME=d2r
+ COUNT=10
+ cat
++ TOCHARACTER
++ :
++ cat d2r.3m_units.man
++ sed -e 's/'\''/'\'''\''/g'
++ cat
++ sed -e 's/^/'\''/'
++ sed -e 's/$/'\'', \&/'
+ read NAME
+ SHORTNAME=f2c
+ COUNT=11
+ cat
++ TOCHARACTER
++ :
++ sed -e 's/'\''/'\'''\''/g'
++ sed -e 's/^/'\''/'
++ cat f2c.3m_units.man
++ sed -e 's/$/'\'', \&/'
++ cat
+ read NAME
+ SHORTNAME=feet_to_meters
+ COUNT=12
+ cat
++ TOCHARACTER
++ :
++ sed -e 's/^/'\''/'
++ sed -e 's/'\''/'\'''\''/g'
++ sed -e 's/$/'\'', \&/'
++ cat feet_to_meters.3m_units.man
++ cat
+ read NAME
+ SHORTNAME=inf
+ COUNT=13
+ cat
++ TOCHARACTER
++ :
++ sed -e 's/'\''/'\'''\''/g'
++ cat inf.3m_units.man
++ cat
++ sed -e 's/^/'\''/'
++ sed -e 's/$/'\'', \&/'
+ read NAME
+ SHORTNAME=is_even
+ COUNT=14
+ cat
++ TOCHARACTER
++ :
++ sed -e 's/'\''/'\'''\''/g'
++ cat
++ sed -e 's/^/'\''/'
++ cat is_even.3m_units.man
++ sed -e 's/$/'\'', \&/'
+ read NAME
+ SHORTNAME=is_nan
+ COUNT=15
+ cat
++ TOCHARACTER
++ :
++ cat is_nan.3m_units.man
++ sed -e 's/'\''/'\'''\''/g'
++ sed -e 's/$/'\'', \&/'
++ sed -e 's/^/'\''/'
++ cat
+ read NAME
+ SHORTNAME=M_constants
+ COUNT=16
+ cat
++ TOCHARACTER
++ :
++ cat M_constants.3m_constants.man
++ sed -e 's/'\''/'\'''\''/g'
++ sed -e 's/$/'\'', \&/'
++ sed -e 's/^/'\''/'
++ cat
+ read NAME
+ SHORTNAME=meters_to_feet
+ COUNT=17
+ cat
++ TOCHARACTER
++ :
++ cat meters_to_feet.3m_units.man
++ sed -e 's/^/'\''/'
++ sed -e 's/$/'\'', \&/'
++ cat
++ sed -e 's/'\''/'\'''\''/g'
+ read NAME
+ SHORTNAME=M_units
+ COUNT=18
+ cat
++ TOCHARACTER
++ :
++ cat M_units.3m_units.man
++ cat
++ sed -e 's/^/'\''/'
++ sed -e 's/'\''/'\'''\''/g'
++ sed -e 's/$/'\'', \&/'
+ read NAME
+ SHORTNAME=nan
+ COUNT=19
+ cat
++ TOCHARACTER
++ :
++ cat nan.3m_units.man
++ sed -e 's/'\''/'\'''\''/g'
++ cat
++ sed -e 's/^/'\''/'
++ sed -e 's/$/'\'', \&/'
+ read NAME
+ SHORTNAME=norm_angle_deg
+ COUNT=20
+ cat
++ TOCHARACTER
++ :
++ cat norm_angle_deg.3m_units.man
++ sed -e 's/'\''/'\'''\''/g'
++ cat
++ sed -e 's/$/'\'', \&/'
++ sed -e 's/^/'\''/'
+ read NAME
+ SHORTNAME=norm_angle_rad
+ COUNT=21
+ cat
++ TOCHARACTER
++ :
++ cat norm_angle_rad.3m_units.man
++ sed -e 's/'\''/'\'''\''/g'
++ sed -e 's/^/'\''/'
++ sed -e 's/$/'\'', \&/'
++ cat
+ read NAME
+ SHORTNAME=polar_to_cartesian
+ COUNT=22
+ cat
++ TOCHARACTER
++ :
++ cat polar_to_cartesian.3m_units.man
++ sed -e 's/'\''/'\'''\''/g'
++ sed -e 's/^/'\''/'
++ cat
++ sed -e 's/$/'\'', \&/'
+ read NAME
+ SHORTNAME=pounds_to_kilograms
+ COUNT=23
+ cat
++ TOCHARACTER
++ :
++ cat pounds_to_kilograms.3m_units.man
++ sed -e 's/'\''/'\'''\''/g'
++ sed -e 's/$/'\'', \&/'
++ sed -e 's/^/'\''/'
++ cat
+ read NAME
+ SHORTNAME=r2d
+ COUNT=24
+ cat
++ TOCHARACTER
++ :
++ cat r2d.3m_units.man
++ sed -e 's/^/'\''/'
++ sed -e 's/'\''/'\'''\''/g'
++ cat
++ sed -e 's/$/'\'', \&/'
+ read NAME
+ SHORTNAME=sind
+ COUNT=25
+ cat
++ TOCHARACTER
++ :
++ sed -e 's/'\''/'\'''\''/g'
++ cat sind.3m_units.man
++ sed -e 's/^/'\''/'
++ cat
++ sed -e 's/$/'\'', \&/'
+ read NAME
+ SHORTNAME=spherical_to_cartesian
+ COUNT=26
+ cat
++ TOCHARACTER
++ :
++ cat spherical_to_cartesian.3m_units.man
++ sed -e 's/$/'\'', \&/'
++ sed -e 's/^/'\''/'
++ sed -e 's/'\''/'\'''\''/g'
++ cat
+ read NAME
+ SHORTNAME=symbol2atomnum
+ COUNT=27
+ cat
++ TOCHARACTER
++ :
++ cat symbol2atomnum.3m_units.man
++ sed -e 's/'\''/'\'''\''/g'
++ sed -e 's/^/'\''/'
++ sed -e 's/$/'\'', \&/'
++ cat
+ read NAME
+ SHORTNAME=tand
+ COUNT=28
+ cat
++ TOCHARACTER
++ :
++ sed -e 's/'\''/'\'''\''/g'
++ sed -e 's/^/'\''/'
++ cat
++ sed -e 's/$/'\'', \&/'
++ cat tand.3m_units.man
+ read NAME
+ END_MODULE
+ cat
+ cat
+ ls -ld /home/urbanjs/venus/V600/github/PLUGINS/fpm-docs/src/m_constants_docs.f90
-rw-rw-r-- 1 urbanjs urbanjs 66295 May 26 17:13 /home/urbanjs/venus/V600/github/PLUGINS/fpm-docs/src/m_constants_docs.f90
+ cat
